!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=21)}([function(t,n,e){var r;
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
!function(n,e){"use strict";"object"==typeof t.exports?t.exports=n.document?e(n,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(n)}("undefined"!=typeof window?window:this,function(e,o){"use strict";var i=[],a=e.document,s=Object.getPrototypeOf,l=i.slice,d=i.concat,c=i.push,u=i.indexOf,h={},f=h.toString,p=h.hasOwnProperty,m=p.toString,g=m.call(Object),b={},v=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},x=function(t){return null!=t&&t===t.window},y={type:!0,src:!0,noModule:!0};function w(t,n,e){var r,o=(n=n||a).createElement("script");if(o.text=t,e)for(r in y)e[r]&&(o[r]=e[r]);n.head.appendChild(o).parentNode.removeChild(o)}function _(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?h[f.call(t)]||"object":typeof t}var k=function(t,n){return new k.fn.init(t,n)},S=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function C(t){var n=!!t&&"length"in t&&t.length,e=_(t);return!v(t)&&!x(t)&&("array"===e||0===n||"number"==typeof n&&n>0&&n-1 in t)}k.fn=k.prototype={jquery:"3.3.1",constructor:k,length:0,toArray:function(){return l.call(this)},get:function(t){return null==t?l.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var n=k.merge(this.constructor(),t);return n.prevObject=this,n},each:function(t){return k.each(this,t)},map:function(t){return this.pushStack(k.map(this,function(n,e){return t.call(n,e,n)}))},slice:function(){return this.pushStack(l.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var n=this.length,e=+t+(t<0?n:0);return this.pushStack(e>=0&&e<n?[this[e]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:i.sort,splice:i.splice},k.extend=k.fn.extend=function(){var t,n,e,r,o,i,a=arguments[0]||{},s=1,l=arguments.length,d=!1;for("boolean"==typeof a&&(d=a,a=arguments[s]||{},s++),"object"==typeof a||v(a)||(a={}),s===l&&(a=this,s--);s<l;s++)if(null!=(t=arguments[s]))for(n in t)e=a[n],a!==(r=t[n])&&(d&&r&&(k.isPlainObject(r)||(o=Array.isArray(r)))?(o?(o=!1,i=e&&Array.isArray(e)?e:[]):i=e&&k.isPlainObject(e)?e:{},a[n]=k.extend(d,i,r)):void 0!==r&&(a[n]=r));return a},k.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var n,e;return!(!t||"[object Object]"!==f.call(t))&&(!(n=s(t))||"function"==typeof(e=p.call(n,"constructor")&&n.constructor)&&m.call(e)===g)},isEmptyObject:function(t){var n;for(n in t)return!1;return!0},globalEval:function(t){w(t)},each:function(t,n){var e,r=0;if(C(t))for(e=t.length;r<e&&!1!==n.call(t[r],r,t[r]);r++);else for(r in t)if(!1===n.call(t[r],r,t[r]))break;return t},trim:function(t){return null==t?"":(t+"").replace(S,"")},makeArray:function(t,n){var e=n||[];return null!=t&&(C(Object(t))?k.merge(e,"string"==typeof t?[t]:t):c.call(e,t)),e},inArray:function(t,n,e){return null==n?-1:u.call(n,t,e)},merge:function(t,n){for(var e=+n.length,r=0,o=t.length;r<e;r++)t[o++]=n[r];return t.length=o,t},grep:function(t,n,e){for(var r=[],o=0,i=t.length,a=!e;o<i;o++)!n(t[o],o)!==a&&r.push(t[o]);return r},map:function(t,n,e){var r,o,i=0,a=[];if(C(t))for(r=t.length;i<r;i++)null!=(o=n(t[i],i,e))&&a.push(o);else for(i in t)null!=(o=n(t[i],i,e))&&a.push(o);return d.apply([],a)},guid:1,support:b}),"function"==typeof Symbol&&(k.fn[Symbol.iterator]=i[Symbol.iterator]),k.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,n){h["[object "+n+"]"]=n.toLowerCase()});var T=
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(t){var n,e,r,o,i,a,s,l,d,c,u,h,f,p,m,g,b,v,x,y="sizzle"+1*new Date,w=t.document,_=0,k=0,S=at(),C=at(),T=at(),E=function(t,n){return t===n&&(u=!0),0},A={}.hasOwnProperty,K=[],N=K.pop,D=K.push,O=K.push,P=K.slice,I=function(t,n){for(var e=0,r=t.length;e<r;e++)if(t[e]===n)return e;return-1},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",F="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",R="\\["+F+"*("+M+")(?:"+F+"*([*^$|!~]?=)"+F+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+M+"))|)"+F+"*\\]",j=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|.*)\\)|)",G=new RegExp(F+"+","g"),H=new RegExp("^"+F+"+|((?:^|[^\\\\])(?:\\\\.)*)"+F+"+$","g"),U=new RegExp("^"+F+"*,"+F+"*"),V=new RegExp("^"+F+"*([>+~]|"+F+")"+F+"*"),B=new RegExp("="+F+"*([^\\]'\"]*?)"+F+"*\\]","g"),W=new RegExp(j),z=new RegExp("^"+M+"$"),q={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M+"|[*])"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+j),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+F+"*(even|odd|(([+-]|)(\\d*)n|)"+F+"*(?:([+-]|)"+F+"*(\\d+)|))"+F+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+F+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+F+"*((?:-\\d)?\\d*)"+F+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,$=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,J=/[+~]/,Z=new RegExp("\\\\([\\da-f]{1,6}"+F+"?|("+F+")|.)","ig"),tt=function(t,n,e){var r="0x"+n-65536;return r!=r||e?n:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},nt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,et=function(t,n){return n?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},rt=function(){h()},ot=vt(function(t){return!0===t.disabled&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{O.apply(K=P.call(w.childNodes),w.childNodes),K[w.childNodes.length].nodeType}catch(t){O={apply:K.length?function(t,n){D.apply(t,P.call(n))}:function(t,n){for(var e=t.length,r=0;t[e++]=n[r++];);t.length=e-1}}}function it(t,n,r,o){var i,s,d,c,u,p,b,v=n&&n.ownerDocument,_=n?n.nodeType:9;if(r=r||[],"string"!=typeof t||!t||1!==_&&9!==_&&11!==_)return r;if(!o&&((n?n.ownerDocument||n:w)!==f&&h(n),n=n||f,m)){if(11!==_&&(u=$.exec(t)))if(i=u[1]){if(9===_){if(!(d=n.getElementById(i)))return r;if(d.id===i)return r.push(d),r}else if(v&&(d=v.getElementById(i))&&x(n,d)&&d.id===i)return r.push(d),r}else{if(u[2])return O.apply(r,n.getElementsByTagName(t)),r;if((i=u[3])&&e.getElementsByClassName&&n.getElementsByClassName)return O.apply(r,n.getElementsByClassName(i)),r}if(e.qsa&&!T[t+" "]&&(!g||!g.test(t))){if(1!==_)v=n,b=t;else if("object"!==n.nodeName.toLowerCase()){for((c=n.getAttribute("id"))?c=c.replace(nt,et):n.setAttribute("id",c=y),s=(p=a(t)).length;s--;)p[s]="#"+c+" "+bt(p[s]);b=p.join(","),v=J.test(t)&&mt(n.parentNode)||n}if(b)try{return O.apply(r,v.querySelectorAll(b)),r}catch(t){}finally{c===y&&n.removeAttribute("id")}}}return l(t.replace(H,"$1"),n,r,o)}function at(){var t=[];return function n(e,o){return t.push(e+" ")>r.cacheLength&&delete n[t.shift()],n[e+" "]=o}}function st(t){return t[y]=!0,t}function lt(t){var n=f.createElement("fieldset");try{return!!t(n)}catch(t){return!1}finally{n.parentNode&&n.parentNode.removeChild(n),n=null}}function dt(t,n){for(var e=t.split("|"),o=e.length;o--;)r.attrHandle[e[o]]=n}function ct(t,n){var e=n&&t,r=e&&1===t.nodeType&&1===n.nodeType&&t.sourceIndex-n.sourceIndex;if(r)return r;if(e)for(;e=e.nextSibling;)if(e===n)return-1;return t?1:-1}function ut(t){return function(n){return"input"===n.nodeName.toLowerCase()&&n.type===t}}function ht(t){return function(n){var e=n.nodeName.toLowerCase();return("input"===e||"button"===e)&&n.type===t}}function ft(t){return function(n){return"form"in n?n.parentNode&&!1===n.disabled?"label"in n?"label"in n.parentNode?n.parentNode.disabled===t:n.disabled===t:n.isDisabled===t||n.isDisabled!==!t&&ot(n)===t:n.disabled===t:"label"in n&&n.disabled===t}}function pt(t){return st(function(n){return n=+n,st(function(e,r){for(var o,i=t([],e.length,n),a=i.length;a--;)e[o=i[a]]&&(e[o]=!(r[o]=e[o]))})})}function mt(t){return t&&void 0!==t.getElementsByTagName&&t}for(n in e=it.support={},i=it.isXML=function(t){var n=t&&(t.ownerDocument||t).documentElement;return!!n&&"HTML"!==n.nodeName},h=it.setDocument=function(t){var n,o,a=t?t.ownerDocument||t:w;return a!==f&&9===a.nodeType&&a.documentElement?(p=(f=a).documentElement,m=!i(f),w!==f&&(o=f.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",rt,!1):o.attachEvent&&o.attachEvent("onunload",rt)),e.attributes=lt(function(t){return t.className="i",!t.getAttribute("className")}),e.getElementsByTagName=lt(function(t){return t.appendChild(f.createComment("")),!t.getElementsByTagName("*").length}),e.getElementsByClassName=Q.test(f.getElementsByClassName),e.getById=lt(function(t){return p.appendChild(t).id=y,!f.getElementsByName||!f.getElementsByName(y).length}),e.getById?(r.filter.ID=function(t){var n=t.replace(Z,tt);return function(t){return t.getAttribute("id")===n}},r.find.ID=function(t,n){if(void 0!==n.getElementById&&m){var e=n.getElementById(t);return e?[e]:[]}}):(r.filter.ID=function(t){var n=t.replace(Z,tt);return function(t){var e=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return e&&e.value===n}},r.find.ID=function(t,n){if(void 0!==n.getElementById&&m){var e,r,o,i=n.getElementById(t);if(i){if((e=i.getAttributeNode("id"))&&e.value===t)return[i];for(o=n.getElementsByName(t),r=0;i=o[r++];)if((e=i.getAttributeNode("id"))&&e.value===t)return[i]}return[]}}),r.find.TAG=e.getElementsByTagName?function(t,n){return void 0!==n.getElementsByTagName?n.getElementsByTagName(t):e.qsa?n.querySelectorAll(t):void 0}:function(t,n){var e,r=[],o=0,i=n.getElementsByTagName(t);if("*"===t){for(;e=i[o++];)1===e.nodeType&&r.push(e);return r}return i},r.find.CLASS=e.getElementsByClassName&&function(t,n){if(void 0!==n.getElementsByClassName&&m)return n.getElementsByClassName(t)},b=[],g=[],(e.qsa=Q.test(f.querySelectorAll))&&(lt(function(t){p.appendChild(t).innerHTML="<a id='"+y+"'></a><select id='"+y+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+F+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||g.push("\\["+F+"*(?:value|"+L+")"),t.querySelectorAll("[id~="+y+"-]").length||g.push("~="),t.querySelectorAll(":checked").length||g.push(":checked"),t.querySelectorAll("a#"+y+"+*").length||g.push(".#.+[+~]")}),lt(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var n=f.createElement("input");n.setAttribute("type","hidden"),t.appendChild(n).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&g.push("name"+F+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),p.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),g.push(",.*:")})),(e.matchesSelector=Q.test(v=p.matches||p.webkitMatchesSelector||p.mozMatchesSelector||p.oMatchesSelector||p.msMatchesSelector))&&lt(function(t){e.disconnectedMatch=v.call(t,"*"),v.call(t,"[s!='']:x"),b.push("!=",j)}),g=g.length&&new RegExp(g.join("|")),b=b.length&&new RegExp(b.join("|")),n=Q.test(p.compareDocumentPosition),x=n||Q.test(p.contains)?function(t,n){var e=9===t.nodeType?t.documentElement:t,r=n&&n.parentNode;return t===r||!(!r||1!==r.nodeType||!(e.contains?e.contains(r):t.compareDocumentPosition&&16&t.compareDocumentPosition(r)))}:function(t,n){if(n)for(;n=n.parentNode;)if(n===t)return!0;return!1},E=n?function(t,n){if(t===n)return u=!0,0;var r=!t.compareDocumentPosition-!n.compareDocumentPosition;return r||(1&(r=(t.ownerDocument||t)===(n.ownerDocument||n)?t.compareDocumentPosition(n):1)||!e.sortDetached&&n.compareDocumentPosition(t)===r?t===f||t.ownerDocument===w&&x(w,t)?-1:n===f||n.ownerDocument===w&&x(w,n)?1:c?I(c,t)-I(c,n):0:4&r?-1:1)}:function(t,n){if(t===n)return u=!0,0;var e,r=0,o=t.parentNode,i=n.parentNode,a=[t],s=[n];if(!o||!i)return t===f?-1:n===f?1:o?-1:i?1:c?I(c,t)-I(c,n):0;if(o===i)return ct(t,n);for(e=t;e=e.parentNode;)a.unshift(e);for(e=n;e=e.parentNode;)s.unshift(e);for(;a[r]===s[r];)r++;return r?ct(a[r],s[r]):a[r]===w?-1:s[r]===w?1:0},f):f},it.matches=function(t,n){return it(t,null,null,n)},it.matchesSelector=function(t,n){if((t.ownerDocument||t)!==f&&h(t),n=n.replace(B,"='$1']"),e.matchesSelector&&m&&!T[n+" "]&&(!b||!b.test(n))&&(!g||!g.test(n)))try{var r=v.call(t,n);if(r||e.disconnectedMatch||t.document&&11!==t.document.nodeType)return r}catch(t){}return it(n,f,null,[t]).length>0},it.contains=function(t,n){return(t.ownerDocument||t)!==f&&h(t),x(t,n)},it.attr=function(t,n){(t.ownerDocument||t)!==f&&h(t);var o=r.attrHandle[n.toLowerCase()],i=o&&A.call(r.attrHandle,n.toLowerCase())?o(t,n,!m):void 0;return void 0!==i?i:e.attributes||!m?t.getAttribute(n):(i=t.getAttributeNode(n))&&i.specified?i.value:null},it.escape=function(t){return(t+"").replace(nt,et)},it.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},it.uniqueSort=function(t){var n,r=[],o=0,i=0;if(u=!e.detectDuplicates,c=!e.sortStable&&t.slice(0),t.sort(E),u){for(;n=t[i++];)n===t[i]&&(o=r.push(i));for(;o--;)t.splice(r[o],1)}return c=null,t},o=it.getText=function(t){var n,e="",r=0,i=t.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)e+=o(t)}else if(3===i||4===i)return t.nodeValue}else for(;n=t[r++];)e+=o(n);return e},(r=it.selectors={cacheLength:50,createPseudo:st,match:q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(Z,tt),t[3]=(t[3]||t[4]||t[5]||"").replace(Z,tt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||it.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&it.error(t[0]),t},PSEUDO:function(t){var n,e=!t[6]&&t[2];return q.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":e&&W.test(e)&&(n=a(e,!0))&&(n=e.indexOf(")",e.length-n)-e.length)&&(t[0]=t[0].slice(0,n),t[2]=e.slice(0,n)),t.slice(0,3))}},filter:{TAG:function(t){var n=t.replace(Z,tt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===n}},CLASS:function(t){var n=S[t+" "];return n||(n=new RegExp("(^|"+F+")"+t+"("+F+"|$)"))&&S(t,function(t){return n.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,e){return function(r){var o=it.attr(r,t);return null==o?"!="===n:!n||(o+="","="===n?o===e:"!="===n?o!==e:"^="===n?e&&0===o.indexOf(e):"*="===n?e&&o.indexOf(e)>-1:"$="===n?e&&o.slice(-e.length)===e:"~="===n?(" "+o.replace(G," ")+" ").indexOf(e)>-1:"|="===n&&(o===e||o.slice(0,e.length+1)===e+"-"))}},CHILD:function(t,n,e,r,o){var i="nth"!==t.slice(0,3),a="last"!==t.slice(-4),s="of-type"===n;return 1===r&&0===o?function(t){return!!t.parentNode}:function(n,e,l){var d,c,u,h,f,p,m=i!==a?"nextSibling":"previousSibling",g=n.parentNode,b=s&&n.nodeName.toLowerCase(),v=!l&&!s,x=!1;if(g){if(i){for(;m;){for(h=n;h=h[m];)if(s?h.nodeName.toLowerCase()===b:1===h.nodeType)return!1;p=m="only"===t&&!p&&"nextSibling"}return!0}if(p=[a?g.firstChild:g.lastChild],a&&v){for(x=(f=(d=(c=(u=(h=g)[y]||(h[y]={}))[h.uniqueID]||(u[h.uniqueID]={}))[t]||[])[0]===_&&d[1])&&d[2],h=f&&g.childNodes[f];h=++f&&h&&h[m]||(x=f=0)||p.pop();)if(1===h.nodeType&&++x&&h===n){c[t]=[_,f,x];break}}else if(v&&(x=f=(d=(c=(u=(h=n)[y]||(h[y]={}))[h.uniqueID]||(u[h.uniqueID]={}))[t]||[])[0]===_&&d[1]),!1===x)for(;(h=++f&&h&&h[m]||(x=f=0)||p.pop())&&((s?h.nodeName.toLowerCase()!==b:1!==h.nodeType)||!++x||(v&&((c=(u=h[y]||(h[y]={}))[h.uniqueID]||(u[h.uniqueID]={}))[t]=[_,x]),h!==n)););return(x-=o)===r||x%r==0&&x/r>=0}}},PSEUDO:function(t,n){var e,o=r.pseudos[t]||r.setFilters[t.toLowerCase()]||it.error("unsupported pseudo: "+t);return o[y]?o(n):o.length>1?(e=[t,t,"",n],r.setFilters.hasOwnProperty(t.toLowerCase())?st(function(t,e){for(var r,i=o(t,n),a=i.length;a--;)t[r=I(t,i[a])]=!(e[r]=i[a])}):function(t){return o(t,0,e)}):o}},pseudos:{not:st(function(t){var n=[],e=[],r=s(t.replace(H,"$1"));return r[y]?st(function(t,n,e,o){for(var i,a=r(t,null,o,[]),s=t.length;s--;)(i=a[s])&&(t[s]=!(n[s]=i))}):function(t,o,i){return n[0]=t,r(n,null,i,e),n[0]=null,!e.pop()}}),has:st(function(t){return function(n){return it(t,n).length>0}}),contains:st(function(t){return t=t.replace(Z,tt),function(n){return(n.textContent||n.innerText||o(n)).indexOf(t)>-1}}),lang:st(function(t){return z.test(t||"")||it.error("unsupported lang: "+t),t=t.replace(Z,tt).toLowerCase(),function(n){var e;do{if(e=m?n.lang:n.getAttribute("xml:lang")||n.getAttribute("lang"))return(e=e.toLowerCase())===t||0===e.indexOf(t+"-")}while((n=n.parentNode)&&1===n.nodeType);return!1}}),target:function(n){var e=t.location&&t.location.hash;return e&&e.slice(1)===n.id},root:function(t){return t===p},focus:function(t){return t===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:ft(!1),disabled:ft(!0),checked:function(t){var n=t.nodeName.toLowerCase();return"input"===n&&!!t.checked||"option"===n&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!r.pseudos.empty(t)},header:function(t){return X.test(t.nodeName)},input:function(t){return Y.test(t.nodeName)},button:function(t){var n=t.nodeName.toLowerCase();return"input"===n&&"button"===t.type||"button"===n},text:function(t){var n;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(n=t.getAttribute("type"))||"text"===n.toLowerCase())},first:pt(function(){return[0]}),last:pt(function(t,n){return[n-1]}),eq:pt(function(t,n,e){return[e<0?e+n:e]}),even:pt(function(t,n){for(var e=0;e<n;e+=2)t.push(e);return t}),odd:pt(function(t,n){for(var e=1;e<n;e+=2)t.push(e);return t}),lt:pt(function(t,n,e){for(var r=e<0?e+n:e;--r>=0;)t.push(r);return t}),gt:pt(function(t,n,e){for(var r=e<0?e+n:e;++r<n;)t.push(r);return t})}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[n]=ut(n);for(n in{submit:!0,reset:!0})r.pseudos[n]=ht(n);function gt(){}function bt(t){for(var n=0,e=t.length,r="";n<e;n++)r+=t[n].value;return r}function vt(t,n,e){var r=n.dir,o=n.next,i=o||r,a=e&&"parentNode"===i,s=k++;return n.first?function(n,e,o){for(;n=n[r];)if(1===n.nodeType||a)return t(n,e,o);return!1}:function(n,e,l){var d,c,u,h=[_,s];if(l){for(;n=n[r];)if((1===n.nodeType||a)&&t(n,e,l))return!0}else for(;n=n[r];)if(1===n.nodeType||a)if(c=(u=n[y]||(n[y]={}))[n.uniqueID]||(u[n.uniqueID]={}),o&&o===n.nodeName.toLowerCase())n=n[r]||n;else{if((d=c[i])&&d[0]===_&&d[1]===s)return h[2]=d[2];if(c[i]=h,h[2]=t(n,e,l))return!0}return!1}}function xt(t){return t.length>1?function(n,e,r){for(var o=t.length;o--;)if(!t[o](n,e,r))return!1;return!0}:t[0]}function yt(t,n,e,r,o){for(var i,a=[],s=0,l=t.length,d=null!=n;s<l;s++)(i=t[s])&&(e&&!e(i,r,o)||(a.push(i),d&&n.push(s)));return a}function wt(t,n,e,r,o,i){return r&&!r[y]&&(r=wt(r)),o&&!o[y]&&(o=wt(o,i)),st(function(i,a,s,l){var d,c,u,h=[],f=[],p=a.length,m=i||function(t,n,e){for(var r=0,o=n.length;r<o;r++)it(t,n[r],e);return e}(n||"*",s.nodeType?[s]:s,[]),g=!t||!i&&n?m:yt(m,h,t,s,l),b=e?o||(i?t:p||r)?[]:a:g;if(e&&e(g,b,s,l),r)for(d=yt(b,f),r(d,[],s,l),c=d.length;c--;)(u=d[c])&&(b[f[c]]=!(g[f[c]]=u));if(i){if(o||t){if(o){for(d=[],c=b.length;c--;)(u=b[c])&&d.push(g[c]=u);o(null,b=[],d,l)}for(c=b.length;c--;)(u=b[c])&&(d=o?I(i,u):h[c])>-1&&(i[d]=!(a[d]=u))}}else b=yt(b===a?b.splice(p,b.length):b),o?o(null,a,b,l):O.apply(a,b)})}function _t(t){for(var n,e,o,i=t.length,a=r.relative[t[0].type],s=a||r.relative[" "],l=a?1:0,c=vt(function(t){return t===n},s,!0),u=vt(function(t){return I(n,t)>-1},s,!0),h=[function(t,e,r){var o=!a&&(r||e!==d)||((n=e).nodeType?c(t,e,r):u(t,e,r));return n=null,o}];l<i;l++)if(e=r.relative[t[l].type])h=[vt(xt(h),e)];else{if((e=r.filter[t[l].type].apply(null,t[l].matches))[y]){for(o=++l;o<i&&!r.relative[t[o].type];o++);return wt(l>1&&xt(h),l>1&&bt(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(H,"$1"),e,l<o&&_t(t.slice(l,o)),o<i&&_t(t=t.slice(o)),o<i&&bt(t))}h.push(e)}return xt(h)}return gt.prototype=r.filters=r.pseudos,r.setFilters=new gt,a=it.tokenize=function(t,n){var e,o,i,a,s,l,d,c=C[t+" "];if(c)return n?0:c.slice(0);for(s=t,l=[],d=r.preFilter;s;){for(a in e&&!(o=U.exec(s))||(o&&(s=s.slice(o[0].length)||s),l.push(i=[])),e=!1,(o=V.exec(s))&&(e=o.shift(),i.push({value:e,type:o[0].replace(H," ")}),s=s.slice(e.length)),r.filter)!(o=q[a].exec(s))||d[a]&&!(o=d[a](o))||(e=o.shift(),i.push({value:e,type:a,matches:o}),s=s.slice(e.length));if(!e)break}return n?s.length:s?it.error(t):C(t,l).slice(0)},s=it.compile=function(t,n){var e,o=[],i=[],s=T[t+" "];if(!s){for(n||(n=a(t)),e=n.length;e--;)(s=_t(n[e]))[y]?o.push(s):i.push(s);(s=T(t,function(t,n){var e=n.length>0,o=t.length>0,i=function(i,a,s,l,c){var u,p,g,b=0,v="0",x=i&&[],y=[],w=d,k=i||o&&r.find.TAG("*",c),S=_+=null==w?1:Math.random()||.1,C=k.length;for(c&&(d=a===f||a||c);v!==C&&null!=(u=k[v]);v++){if(o&&u){for(p=0,a||u.ownerDocument===f||(h(u),s=!m);g=t[p++];)if(g(u,a||f,s)){l.push(u);break}c&&(_=S)}e&&((u=!g&&u)&&b--,i&&x.push(u))}if(b+=v,e&&v!==b){for(p=0;g=n[p++];)g(x,y,a,s);if(i){if(b>0)for(;v--;)x[v]||y[v]||(y[v]=N.call(l));y=yt(y)}O.apply(l,y),c&&!i&&y.length>0&&b+n.length>1&&it.uniqueSort(l)}return c&&(_=S,d=w),x};return e?st(i):i}(i,o))).selector=t}return s},l=it.select=function(t,n,e,o){var i,l,d,c,u,h="function"==typeof t&&t,f=!o&&a(t=h.selector||t);if(e=e||[],1===f.length){if((l=f[0]=f[0].slice(0)).length>2&&"ID"===(d=l[0]).type&&9===n.nodeType&&m&&r.relative[l[1].type]){if(!(n=(r.find.ID(d.matches[0].replace(Z,tt),n)||[])[0]))return e;h&&(n=n.parentNode),t=t.slice(l.shift().value.length)}for(i=q.needsContext.test(t)?0:l.length;i--&&(d=l[i],!r.relative[c=d.type]);)if((u=r.find[c])&&(o=u(d.matches[0].replace(Z,tt),J.test(l[0].type)&&mt(n.parentNode)||n))){if(l.splice(i,1),!(t=o.length&&bt(l)))return O.apply(e,o),e;break}}return(h||s(t,f))(o,n,!m,e,!n||J.test(t)&&mt(n.parentNode)||n),e},e.sortStable=y.split("").sort(E).join("")===y,e.detectDuplicates=!!u,h(),e.sortDetached=lt(function(t){return 1&t.compareDocumentPosition(f.createElement("fieldset"))}),lt(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||dt("type|href|height|width",function(t,n,e){if(!e)return t.getAttribute(n,"type"===n.toLowerCase()?1:2)}),e.attributes&&lt(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||dt("value",function(t,n,e){if(!e&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),lt(function(t){return null==t.getAttribute("disabled")})||dt(L,function(t,n,e){var r;if(!e)return!0===t[n]?n.toLowerCase():(r=t.getAttributeNode(n))&&r.specified?r.value:null}),it}(e);k.find=T,k.expr=T.selectors,k.expr[":"]=k.expr.pseudos,k.uniqueSort=k.unique=T.uniqueSort,k.text=T.getText,k.isXMLDoc=T.isXML,k.contains=T.contains,k.escapeSelector=T.escape;var E=function(t,n,e){for(var r=[],o=void 0!==e;(t=t[n])&&9!==t.nodeType;)if(1===t.nodeType){if(o&&k(t).is(e))break;r.push(t)}return r},A=function(t,n){for(var e=[];t;t=t.nextSibling)1===t.nodeType&&t!==n&&e.push(t);return e},K=k.expr.match.needsContext;function N(t,n){return t.nodeName&&t.nodeName.toLowerCase()===n.toLowerCase()}var D=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function O(t,n,e){return v(n)?k.grep(t,function(t,r){return!!n.call(t,r,t)!==e}):n.nodeType?k.grep(t,function(t){return t===n!==e}):"string"!=typeof n?k.grep(t,function(t){return u.call(n,t)>-1!==e}):k.filter(n,t,e)}k.filter=function(t,n,e){var r=n[0];return e&&(t=":not("+t+")"),1===n.length&&1===r.nodeType?k.find.matchesSelector(r,t)?[r]:[]:k.find.matches(t,k.grep(n,function(t){return 1===t.nodeType}))},k.fn.extend({find:function(t){var n,e,r=this.length,o=this;if("string"!=typeof t)return this.pushStack(k(t).filter(function(){for(n=0;n<r;n++)if(k.contains(o[n],this))return!0}));for(e=this.pushStack([]),n=0;n<r;n++)k.find(t,o[n],e);return r>1?k.uniqueSort(e):e},filter:function(t){return this.pushStack(O(this,t||[],!1))},not:function(t){return this.pushStack(O(this,t||[],!0))},is:function(t){return!!O(this,"string"==typeof t&&K.test(t)?k(t):t||[],!1).length}});var P,I=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(k.fn.init=function(t,n,e){var r,o;if(!t)return this;if(e=e||P,"string"==typeof t){if(!(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:I.exec(t))||!r[1]&&n)return!n||n.jquery?(n||e).find(t):this.constructor(n).find(t);if(r[1]){if(n=n instanceof k?n[0]:n,k.merge(this,k.parseHTML(r[1],n&&n.nodeType?n.ownerDocument||n:a,!0)),D.test(r[1])&&k.isPlainObject(n))for(r in n)v(this[r])?this[r](n[r]):this.attr(r,n[r]);return this}return(o=a.getElementById(r[2]))&&(this[0]=o,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):v(t)?void 0!==e.ready?e.ready(t):t(k):k.makeArray(t,this)}).prototype=k.fn,P=k(a);var L=/^(?:parents|prev(?:Until|All))/,F={children:!0,contents:!0,next:!0,prev:!0};function M(t,n){for(;(t=t[n])&&1!==t.nodeType;);return t}k.fn.extend({has:function(t){var n=k(t,this),e=n.length;return this.filter(function(){for(var t=0;t<e;t++)if(k.contains(this,n[t]))return!0})},closest:function(t,n){var e,r=0,o=this.length,i=[],a="string"!=typeof t&&k(t);if(!K.test(t))for(;r<o;r++)for(e=this[r];e&&e!==n;e=e.parentNode)if(e.nodeType<11&&(a?a.index(e)>-1:1===e.nodeType&&k.find.matchesSelector(e,t))){i.push(e);break}return this.pushStack(i.length>1?k.uniqueSort(i):i)},index:function(t){return t?"string"==typeof t?u.call(k(t),this[0]):u.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,n){return this.pushStack(k.uniqueSort(k.merge(this.get(),k(t,n))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),k.each({parent:function(t){var n=t.parentNode;return n&&11!==n.nodeType?n:null},parents:function(t){return E(t,"parentNode")},parentsUntil:function(t,n,e){return E(t,"parentNode",e)},next:function(t){return M(t,"nextSibling")},prev:function(t){return M(t,"previousSibling")},nextAll:function(t){return E(t,"nextSibling")},prevAll:function(t){return E(t,"previousSibling")},nextUntil:function(t,n,e){return E(t,"nextSibling",e)},prevUntil:function(t,n,e){return E(t,"previousSibling",e)},siblings:function(t){return A((t.parentNode||{}).firstChild,t)},children:function(t){return A(t.firstChild)},contents:function(t){return N(t,"iframe")?t.contentDocument:(N(t,"template")&&(t=t.content||t),k.merge([],t.childNodes))}},function(t,n){k.fn[t]=function(e,r){var o=k.map(this,n,e);return"Until"!==t.slice(-5)&&(r=e),r&&"string"==typeof r&&(o=k.filter(r,o)),this.length>1&&(F[t]||k.uniqueSort(o),L.test(t)&&o.reverse()),this.pushStack(o)}});var R=/[^\x20\t\r\n\f]+/g;function j(t){return t}function G(t){throw t}function H(t,n,e,r){var o;try{t&&v(o=t.promise)?o.call(t).done(n).fail(e):t&&v(o=t.then)?o.call(t,n,e):n.apply(void 0,[t].slice(r))}catch(t){e.apply(void 0,[t])}}k.Callbacks=function(t){t="string"==typeof t?function(t){var n={};return k.each(t.match(R)||[],function(t,e){n[e]=!0}),n}(t):k.extend({},t);var n,e,r,o,i=[],a=[],s=-1,l=function(){for(o=o||t.once,r=n=!0;a.length;s=-1)for(e=a.shift();++s<i.length;)!1===i[s].apply(e[0],e[1])&&t.stopOnFalse&&(s=i.length,e=!1);t.memory||(e=!1),n=!1,o&&(i=e?[]:"")},d={add:function(){return i&&(e&&!n&&(s=i.length-1,a.push(e)),function n(e){k.each(e,function(e,r){v(r)?t.unique&&d.has(r)||i.push(r):r&&r.length&&"string"!==_(r)&&n(r)})}(arguments),e&&!n&&l()),this},remove:function(){return k.each(arguments,function(t,n){for(var e;(e=k.inArray(n,i,e))>-1;)i.splice(e,1),e<=s&&s--}),this},has:function(t){return t?k.inArray(t,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return o=a=[],i=e="",this},disabled:function(){return!i},lock:function(){return o=a=[],e||n||(i=e=""),this},locked:function(){return!!o},fireWith:function(t,e){return o||(e=[t,(e=e||[]).slice?e.slice():e],a.push(e),n||l()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!r}};return d},k.extend({Deferred:function(t){var n=[["notify","progress",k.Callbacks("memory"),k.Callbacks("memory"),2],["resolve","done",k.Callbacks("once memory"),k.Callbacks("once memory"),0,"resolved"],["reject","fail",k.Callbacks("once memory"),k.Callbacks("once memory"),1,"rejected"]],r="pending",o={state:function(){return r},always:function(){return i.done(arguments).fail(arguments),this},catch:function(t){return o.then(null,t)},pipe:function(){var t=arguments;return k.Deferred(function(e){k.each(n,function(n,r){var o=v(t[r[4]])&&t[r[4]];i[r[1]](function(){var t=o&&o.apply(this,arguments);t&&v(t.promise)?t.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[r[0]+"With"](this,o?[t]:arguments)})}),t=null}).promise()},then:function(t,r,o){var i=0;function a(t,n,r,o){return function(){var s=this,l=arguments,d=function(){var e,d;if(!(t<i)){if((e=r.apply(s,l))===n.promise())throw new TypeError("Thenable self-resolution");d=e&&("object"==typeof e||"function"==typeof e)&&e.then,v(d)?o?d.call(e,a(i,n,j,o),a(i,n,G,o)):(i++,d.call(e,a(i,n,j,o),a(i,n,G,o),a(i,n,j,n.notifyWith))):(r!==j&&(s=void 0,l=[e]),(o||n.resolveWith)(s,l))}},c=o?d:function(){try{d()}catch(e){k.Deferred.exceptionHook&&k.Deferred.exceptionHook(e,c.stackTrace),t+1>=i&&(r!==G&&(s=void 0,l=[e]),n.rejectWith(s,l))}};t?c():(k.Deferred.getStackHook&&(c.stackTrace=k.Deferred.getStackHook()),e.setTimeout(c))}}return k.Deferred(function(e){n[0][3].add(a(0,e,v(o)?o:j,e.notifyWith)),n[1][3].add(a(0,e,v(t)?t:j)),n[2][3].add(a(0,e,v(r)?r:G))}).promise()},promise:function(t){return null!=t?k.extend(t,o):o}},i={};return k.each(n,function(t,e){var a=e[2],s=e[5];o[e[1]]=a.add,s&&a.add(function(){r=s},n[3-t][2].disable,n[3-t][3].disable,n[0][2].lock,n[0][3].lock),a.add(e[3].fire),i[e[0]]=function(){return i[e[0]+"With"](this===i?void 0:this,arguments),this},i[e[0]+"With"]=a.fireWith}),o.promise(i),t&&t.call(i,i),i},when:function(t){var n=arguments.length,e=n,r=Array(e),o=l.call(arguments),i=k.Deferred(),a=function(t){return function(e){r[t]=this,o[t]=arguments.length>1?l.call(arguments):e,--n||i.resolveWith(r,o)}};if(n<=1&&(H(t,i.done(a(e)).resolve,i.reject,!n),"pending"===i.state()||v(o[e]&&o[e].then)))return i.then();for(;e--;)H(o[e],a(e),i.reject);return i.promise()}});var U=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;k.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&U.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},k.readyException=function(t){e.setTimeout(function(){throw t})};var V=k.Deferred();function B(){a.removeEventListener("DOMContentLoaded",B),e.removeEventListener("load",B),k.ready()}k.fn.ready=function(t){return V.then(t).catch(function(t){k.readyException(t)}),this},k.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--k.readyWait:k.isReady)||(k.isReady=!0,!0!==t&&--k.readyWait>0||V.resolveWith(a,[k]))}}),k.ready.then=V.then,"complete"===a.readyState||"loading"!==a.readyState&&!a.documentElement.doScroll?e.setTimeout(k.ready):(a.addEventListener("DOMContentLoaded",B),e.addEventListener("load",B));var W=function(t,n,e,r,o,i,a){var s=0,l=t.length,d=null==e;if("object"===_(e))for(s in o=!0,e)W(t,n,s,e[s],!0,i,a);else if(void 0!==r&&(o=!0,v(r)||(a=!0),d&&(a?(n.call(t,r),n=null):(d=n,n=function(t,n,e){return d.call(k(t),e)})),n))for(;s<l;s++)n(t[s],e,a?r:r.call(t[s],s,n(t[s],e)));return o?t:d?n.call(t):l?n(t[0],e):i},z=/^-ms-/,q=/-([a-z])/g;function Y(t,n){return n.toUpperCase()}function X(t){return t.replace(z,"ms-").replace(q,Y)}var Q=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function $(){this.expando=k.expando+$.uid++}$.uid=1,$.prototype={cache:function(t){var n=t[this.expando];return n||(n={},Q(t)&&(t.nodeType?t[this.expando]=n:Object.defineProperty(t,this.expando,{value:n,configurable:!0}))),n},set:function(t,n,e){var r,o=this.cache(t);if("string"==typeof n)o[X(n)]=e;else for(r in n)o[X(r)]=n[r];return o},get:function(t,n){return void 0===n?this.cache(t):t[this.expando]&&t[this.expando][X(n)]},access:function(t,n,e){return void 0===n||n&&"string"==typeof n&&void 0===e?this.get(t,n):(this.set(t,n,e),void 0!==e?e:n)},remove:function(t,n){var e,r=t[this.expando];if(void 0!==r){if(void 0!==n){e=(n=Array.isArray(n)?n.map(X):(n=X(n))in r?[n]:n.match(R)||[]).length;for(;e--;)delete r[n[e]]}(void 0===n||k.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var n=t[this.expando];return void 0!==n&&!k.isEmptyObject(n)}};var J=new $,Z=new $,tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,nt=/[A-Z]/g;function et(t,n,e){var r;if(void 0===e&&1===t.nodeType)if(r="data-"+n.replace(nt,"-$&").toLowerCase(),"string"==typeof(e=t.getAttribute(r))){try{e=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:tt.test(t)?JSON.parse(t):t)}(e)}catch(t){}Z.set(t,n,e)}else e=void 0;return e}k.extend({hasData:function(t){return Z.hasData(t)||J.hasData(t)},data:function(t,n,e){return Z.access(t,n,e)},removeData:function(t,n){Z.remove(t,n)},_data:function(t,n,e){return J.access(t,n,e)},_removeData:function(t,n){J.remove(t,n)}}),k.fn.extend({data:function(t,n){var e,r,o,i=this[0],a=i&&i.attributes;if(void 0===t){if(this.length&&(o=Z.get(i),1===i.nodeType&&!J.get(i,"hasDataAttrs"))){for(e=a.length;e--;)a[e]&&0===(r=a[e].name).indexOf("data-")&&(r=X(r.slice(5)),et(i,r,o[r]));J.set(i,"hasDataAttrs",!0)}return o}return"object"==typeof t?this.each(function(){Z.set(this,t)}):W(this,function(n){var e;if(i&&void 0===n)return void 0!==(e=Z.get(i,t))?e:void 0!==(e=et(i,t))?e:void 0;this.each(function(){Z.set(this,t,n)})},null,n,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Z.remove(this,t)})}}),k.extend({queue:function(t,n,e){var r;if(t)return n=(n||"fx")+"queue",r=J.get(t,n),e&&(!r||Array.isArray(e)?r=J.access(t,n,k.makeArray(e)):r.push(e)),r||[]},dequeue:function(t,n){n=n||"fx";var e=k.queue(t,n),r=e.length,o=e.shift(),i=k._queueHooks(t,n);"inprogress"===o&&(o=e.shift(),r--),o&&("fx"===n&&e.unshift("inprogress"),delete i.stop,o.call(t,function(){k.dequeue(t,n)},i)),!r&&i&&i.empty.fire()},_queueHooks:function(t,n){var e=n+"queueHooks";return J.get(t,e)||J.access(t,e,{empty:k.Callbacks("once memory").add(function(){J.remove(t,[n+"queue",e])})})}}),k.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?k.queue(this[0],t):void 0===n?this:this.each(function(){var e=k.queue(this,t,n);k._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&k.dequeue(this,t)})},dequeue:function(t){return this.each(function(){k.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,n){var e,r=1,o=k.Deferred(),i=this,a=this.length,s=function(){--r||o.resolveWith(i,[i])};for("string"!=typeof t&&(n=t,t=void 0),t=t||"fx";a--;)(e=J.get(i[a],t+"queueHooks"))&&e.empty&&(r++,e.empty.add(s));return s(),o.promise(n)}});var rt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ot=new RegExp("^(?:([+-])=|)("+rt+")([a-z%]*)$","i"),it=["Top","Right","Bottom","Left"],at=function(t,n){return"none"===(t=n||t).style.display||""===t.style.display&&k.contains(t.ownerDocument,t)&&"none"===k.css(t,"display")},st=function(t,n,e,r){var o,i,a={};for(i in n)a[i]=t.style[i],t.style[i]=n[i];for(i in o=e.apply(t,r||[]),n)t.style[i]=a[i];return o};function lt(t,n,e,r){var o,i,a=20,s=r?function(){return r.cur()}:function(){return k.css(t,n,"")},l=s(),d=e&&e[3]||(k.cssNumber[n]?"":"px"),c=(k.cssNumber[n]||"px"!==d&&+l)&&ot.exec(k.css(t,n));if(c&&c[3]!==d){for(l/=2,d=d||c[3],c=+l||1;a--;)k.style(t,n,c+d),(1-i)*(1-(i=s()/l||.5))<=0&&(a=0),c/=i;c*=2,k.style(t,n,c+d),e=e||[]}return e&&(c=+c||+l||0,o=e[1]?c+(e[1]+1)*e[2]:+e[2],r&&(r.unit=d,r.start=c,r.end=o)),o}var dt={};function ct(t){var n,e=t.ownerDocument,r=t.nodeName,o=dt[r];return o||(n=e.body.appendChild(e.createElement(r)),o=k.css(n,"display"),n.parentNode.removeChild(n),"none"===o&&(o="block"),dt[r]=o,o)}function ut(t,n){for(var e,r,o=[],i=0,a=t.length;i<a;i++)(r=t[i]).style&&(e=r.style.display,n?("none"===e&&(o[i]=J.get(r,"display")||null,o[i]||(r.style.display="")),""===r.style.display&&at(r)&&(o[i]=ct(r))):"none"!==e&&(o[i]="none",J.set(r,"display",e)));for(i=0;i<a;i++)null!=o[i]&&(t[i].style.display=o[i]);return t}k.fn.extend({show:function(){return ut(this,!0)},hide:function(){return ut(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){at(this)?k(this).show():k(this).hide()})}});var ht=/^(?:checkbox|radio)$/i,ft=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,pt=/^$|^module$|\/(?:java|ecma)script/i,mt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function gt(t,n){var e;return e=void 0!==t.getElementsByTagName?t.getElementsByTagName(n||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(n||"*"):[],void 0===n||n&&N(t,n)?k.merge([t],e):e}function bt(t,n){for(var e=0,r=t.length;e<r;e++)J.set(t[e],"globalEval",!n||J.get(n[e],"globalEval"))}mt.optgroup=mt.option,mt.tbody=mt.tfoot=mt.colgroup=mt.caption=mt.thead,mt.th=mt.td;var vt,xt,yt=/<|&#?\w+;/;function wt(t,n,e,r,o){for(var i,a,s,l,d,c,u=n.createDocumentFragment(),h=[],f=0,p=t.length;f<p;f++)if((i=t[f])||0===i)if("object"===_(i))k.merge(h,i.nodeType?[i]:i);else if(yt.test(i)){for(a=a||u.appendChild(n.createElement("div")),s=(ft.exec(i)||["",""])[1].toLowerCase(),l=mt[s]||mt._default,a.innerHTML=l[1]+k.htmlPrefilter(i)+l[2],c=l[0];c--;)a=a.lastChild;k.merge(h,a.childNodes),(a=u.firstChild).textContent=""}else h.push(n.createTextNode(i));for(u.textContent="",f=0;i=h[f++];)if(r&&k.inArray(i,r)>-1)o&&o.push(i);else if(d=k.contains(i.ownerDocument,i),a=gt(u.appendChild(i),"script"),d&&bt(a),e)for(c=0;i=a[c++];)pt.test(i.type||"")&&e.push(i);return u}vt=a.createDocumentFragment().appendChild(a.createElement("div")),(xt=a.createElement("input")).setAttribute("type","radio"),xt.setAttribute("checked","checked"),xt.setAttribute("name","t"),vt.appendChild(xt),b.checkClone=vt.cloneNode(!0).cloneNode(!0).lastChild.checked,vt.innerHTML="<textarea>x</textarea>",b.noCloneChecked=!!vt.cloneNode(!0).lastChild.defaultValue;var _t=a.documentElement,kt=/^key/,St=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Ct=/^([^.]*)(?:\.(.+)|)/;function Tt(){return!0}function Et(){return!1}function At(){try{return a.activeElement}catch(t){}}function Kt(t,n,e,r,o,i){var a,s;if("object"==typeof n){for(s in"string"!=typeof e&&(r=r||e,e=void 0),n)Kt(t,s,e,r,n[s],i);return t}if(null==r&&null==o?(o=e,r=e=void 0):null==o&&("string"==typeof e?(o=r,r=void 0):(o=r,r=e,e=void 0)),!1===o)o=Et;else if(!o)return t;return 1===i&&(a=o,(o=function(t){return k().off(t),a.apply(this,arguments)}).guid=a.guid||(a.guid=k.guid++)),t.each(function(){k.event.add(this,n,o,r,e)})}k.event={global:{},add:function(t,n,e,r,o){var i,a,s,l,d,c,u,h,f,p,m,g=J.get(t);if(g)for(e.handler&&(e=(i=e).handler,o=i.selector),o&&k.find.matchesSelector(_t,o),e.guid||(e.guid=k.guid++),(l=g.events)||(l=g.events={}),(a=g.handle)||(a=g.handle=function(n){return void 0!==k&&k.event.triggered!==n.type?k.event.dispatch.apply(t,arguments):void 0}),d=(n=(n||"").match(R)||[""]).length;d--;)f=m=(s=Ct.exec(n[d])||[])[1],p=(s[2]||"").split(".").sort(),f&&(u=k.event.special[f]||{},f=(o?u.delegateType:u.bindType)||f,u=k.event.special[f]||{},c=k.extend({type:f,origType:m,data:r,handler:e,guid:e.guid,selector:o,needsContext:o&&k.expr.match.needsContext.test(o),namespace:p.join(".")},i),(h=l[f])||((h=l[f]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(t,r,p,a)||t.addEventListener&&t.addEventListener(f,a)),u.add&&(u.add.call(t,c),c.handler.guid||(c.handler.guid=e.guid)),o?h.splice(h.delegateCount++,0,c):h.push(c),k.event.global[f]=!0)},remove:function(t,n,e,r,o){var i,a,s,l,d,c,u,h,f,p,m,g=J.hasData(t)&&J.get(t);if(g&&(l=g.events)){for(d=(n=(n||"").match(R)||[""]).length;d--;)if(f=m=(s=Ct.exec(n[d])||[])[1],p=(s[2]||"").split(".").sort(),f){for(u=k.event.special[f]||{},h=l[f=(r?u.delegateType:u.bindType)||f]||[],s=s[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=i=h.length;i--;)c=h[i],!o&&m!==c.origType||e&&e.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(h.splice(i,1),c.selector&&h.delegateCount--,u.remove&&u.remove.call(t,c));a&&!h.length&&(u.teardown&&!1!==u.teardown.call(t,p,g.handle)||k.removeEvent(t,f,g.handle),delete l[f])}else for(f in l)k.event.remove(t,f+n[d],e,r,!0);k.isEmptyObject(l)&&J.remove(t,"handle events")}},dispatch:function(t){var n,e,r,o,i,a,s=k.event.fix(t),l=new Array(arguments.length),d=(J.get(this,"events")||{})[s.type]||[],c=k.event.special[s.type]||{};for(l[0]=s,n=1;n<arguments.length;n++)l[n]=arguments[n];if(s.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,s)){for(a=k.event.handlers.call(this,s,d),n=0;(o=a[n++])&&!s.isPropagationStopped();)for(s.currentTarget=o.elem,e=0;(i=o.handlers[e++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!s.rnamespace.test(i.namespace)||(s.handleObj=i,s.data=i.data,void 0!==(r=((k.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,l))&&!1===(s.result=r)&&(s.preventDefault(),s.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,s),s.result}},handlers:function(t,n){var e,r,o,i,a,s=[],l=n.delegateCount,d=t.target;if(l&&d.nodeType&&!("click"===t.type&&t.button>=1))for(;d!==this;d=d.parentNode||this)if(1===d.nodeType&&("click"!==t.type||!0!==d.disabled)){for(i=[],a={},e=0;e<l;e++)void 0===a[o=(r=n[e]).selector+" "]&&(a[o]=r.needsContext?k(o,this).index(d)>-1:k.find(o,this,null,[d]).length),a[o]&&i.push(r);i.length&&s.push({elem:d,handlers:i})}return d=this,l<n.length&&s.push({elem:d,handlers:n.slice(l)}),s},addProp:function(t,n){Object.defineProperty(k.Event.prototype,t,{enumerable:!0,configurable:!0,get:v(n)?function(){if(this.originalEvent)return n(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(n){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:n})}})},fix:function(t){return t[k.expando]?t:new k.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==At()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===At()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&N(this,"input"))return this.click(),!1},_default:function(t){return N(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},k.removeEvent=function(t,n,e){t.removeEventListener&&t.removeEventListener(n,e)},k.Event=function(t,n){if(!(this instanceof k.Event))return new k.Event(t,n);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Tt:Et,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,n&&k.extend(this,n),this.timeStamp=t&&t.timeStamp||Date.now(),this[k.expando]=!0},k.Event.prototype={constructor:k.Event,isDefaultPrevented:Et,isPropagationStopped:Et,isImmediatePropagationStopped:Et,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Tt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Tt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Tt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},k.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var n=t.button;return null==t.which&&kt.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==n&&St.test(t.type)?1&n?1:2&n?3:4&n?2:0:t.which}},k.event.addProp),k.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,n){k.event.special[t]={delegateType:n,bindType:n,handle:function(t){var e,r=t.relatedTarget,o=t.handleObj;return r&&(r===this||k.contains(this,r))||(t.type=o.origType,e=o.handler.apply(this,arguments),t.type=n),e}}}),k.fn.extend({on:function(t,n,e,r){return Kt(this,t,n,e,r)},one:function(t,n,e,r){return Kt(this,t,n,e,r,1)},off:function(t,n,e){var r,o;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,k(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(o in t)this.off(o,n,t[o]);return this}return!1!==n&&"function"!=typeof n||(e=n,n=void 0),!1===e&&(e=Et),this.each(function(){k.event.remove(this,t,e,n)})}});var Nt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Dt=/<script|<style|<link/i,Ot=/checked\s*(?:[^=]|=\s*.checked.)/i,Pt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function It(t,n){return N(t,"table")&&N(11!==n.nodeType?n:n.firstChild,"tr")&&k(t).children("tbody")[0]||t}function Lt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Ft(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Mt(t,n){var e,r,o,i,a,s,l,d;if(1===n.nodeType){if(J.hasData(t)&&(i=J.access(t),a=J.set(n,i),d=i.events))for(o in delete a.handle,a.events={},d)for(e=0,r=d[o].length;e<r;e++)k.event.add(n,o,d[o][e]);Z.hasData(t)&&(s=Z.access(t),l=k.extend({},s),Z.set(n,l))}}function Rt(t,n,e,r){n=d.apply([],n);var o,i,a,s,l,c,u=0,h=t.length,f=h-1,p=n[0],m=v(p);if(m||h>1&&"string"==typeof p&&!b.checkClone&&Ot.test(p))return t.each(function(o){var i=t.eq(o);m&&(n[0]=p.call(this,o,i.html())),Rt(i,n,e,r)});if(h&&(i=(o=wt(n,t[0].ownerDocument,!1,t,r)).firstChild,1===o.childNodes.length&&(o=i),i||r)){for(s=(a=k.map(gt(o,"script"),Lt)).length;u<h;u++)l=o,u!==f&&(l=k.clone(l,!0,!0),s&&k.merge(a,gt(l,"script"))),e.call(t[u],l,u);if(s)for(c=a[a.length-1].ownerDocument,k.map(a,Ft),u=0;u<s;u++)l=a[u],pt.test(l.type||"")&&!J.access(l,"globalEval")&&k.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?k._evalUrl&&k._evalUrl(l.src):w(l.textContent.replace(Pt,""),c,l))}return t}function jt(t,n,e){for(var r,o=n?k.filter(n,t):t,i=0;null!=(r=o[i]);i++)e||1!==r.nodeType||k.cleanData(gt(r)),r.parentNode&&(e&&k.contains(r.ownerDocument,r)&&bt(gt(r,"script")),r.parentNode.removeChild(r));return t}k.extend({htmlPrefilter:function(t){return t.replace(Nt,"<$1></$2>")},clone:function(t,n,e){var r,o,i,a,s,l,d,c=t.cloneNode(!0),u=k.contains(t.ownerDocument,t);if(!(b.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||k.isXMLDoc(t)))for(a=gt(c),r=0,o=(i=gt(t)).length;r<o;r++)s=i[r],l=a[r],d=void 0,"input"===(d=l.nodeName.toLowerCase())&&ht.test(s.type)?l.checked=s.checked:"input"!==d&&"textarea"!==d||(l.defaultValue=s.defaultValue);if(n)if(e)for(i=i||gt(t),a=a||gt(c),r=0,o=i.length;r<o;r++)Mt(i[r],a[r]);else Mt(t,c);return(a=gt(c,"script")).length>0&&bt(a,!u&&gt(t,"script")),c},cleanData:function(t){for(var n,e,r,o=k.event.special,i=0;void 0!==(e=t[i]);i++)if(Q(e)){if(n=e[J.expando]){if(n.events)for(r in n.events)o[r]?k.event.remove(e,r):k.removeEvent(e,r,n.handle);e[J.expando]=void 0}e[Z.expando]&&(e[Z.expando]=void 0)}}}),k.fn.extend({detach:function(t){return jt(this,t,!0)},remove:function(t){return jt(this,t)},text:function(t){return W(this,function(t){return void 0===t?k.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return Rt(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||It(this,t).appendChild(t)})},prepend:function(){return Rt(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var n=It(this,t);n.insertBefore(t,n.firstChild)}})},before:function(){return Rt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return Rt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,n=0;null!=(t=this[n]);n++)1===t.nodeType&&(k.cleanData(gt(t,!1)),t.textContent="");return this},clone:function(t,n){return t=null!=t&&t,n=null==n?t:n,this.map(function(){return k.clone(this,t,n)})},html:function(t){return W(this,function(t){var n=this[0]||{},e=0,r=this.length;if(void 0===t&&1===n.nodeType)return n.innerHTML;if("string"==typeof t&&!Dt.test(t)&&!mt[(ft.exec(t)||["",""])[1].toLowerCase()]){t=k.htmlPrefilter(t);try{for(;e<r;e++)1===(n=this[e]||{}).nodeType&&(k.cleanData(gt(n,!1)),n.innerHTML=t);n=0}catch(t){}}n&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return Rt(this,arguments,function(n){var e=this.parentNode;k.inArray(this,t)<0&&(k.cleanData(gt(this)),e&&e.replaceChild(n,this))},t)}}),k.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,n){k.fn[t]=function(t){for(var e,r=[],o=k(t),i=o.length-1,a=0;a<=i;a++)e=a===i?this:this.clone(!0),k(o[a])[n](e),c.apply(r,e.get());return this.pushStack(r)}});var Gt=new RegExp("^("+rt+")(?!px)[a-z%]+$","i"),Ht=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},Ut=new RegExp(it.join("|"),"i");function Vt(t,n,e){var r,o,i,a,s=t.style;return(e=e||Ht(t))&&(""!==(a=e.getPropertyValue(n)||e[n])||k.contains(t.ownerDocument,t)||(a=k.style(t,n)),!b.pixelBoxStyles()&&Gt.test(a)&&Ut.test(n)&&(r=s.width,o=s.minWidth,i=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=e.width,s.width=r,s.minWidth=o,s.maxWidth=i)),void 0!==a?a+"":a}function Bt(t,n){return{get:function(){if(!t())return(this.get=n).apply(this,arguments);delete this.get}}}!function(){function t(){if(c){d.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",_t.appendChild(d).appendChild(c);var t=e.getComputedStyle(c);r="1%"!==t.top,l=12===n(t.marginLeft),c.style.right="60%",s=36===n(t.right),o=36===n(t.width),c.style.position="absolute",i=36===c.offsetWidth||"absolute",_t.removeChild(d),c=null}}function n(t){return Math.round(parseFloat(t))}var r,o,i,s,l,d=a.createElement("div"),c=a.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",b.clearCloneStyle="content-box"===c.style.backgroundClip,k.extend(b,{boxSizingReliable:function(){return t(),o},pixelBoxStyles:function(){return t(),s},pixelPosition:function(){return t(),r},reliableMarginLeft:function(){return t(),l},scrollboxSize:function(){return t(),i}}))}();var Wt=/^(none|table(?!-c[ea]).+)/,zt=/^--/,qt={position:"absolute",visibility:"hidden",display:"block"},Yt={letterSpacing:"0",fontWeight:"400"},Xt=["Webkit","Moz","ms"],Qt=a.createElement("div").style;function $t(t){var n=k.cssProps[t];return n||(n=k.cssProps[t]=function(t){if(t in Qt)return t;for(var n=t[0].toUpperCase()+t.slice(1),e=Xt.length;e--;)if((t=Xt[e]+n)in Qt)return t}(t)||t),n}function Jt(t,n,e){var r=ot.exec(n);return r?Math.max(0,r[2]-(e||0))+(r[3]||"px"):n}function Zt(t,n,e,r,o,i){var a="width"===n?1:0,s=0,l=0;if(e===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===e&&(l+=k.css(t,e+it[a],!0,o)),r?("content"===e&&(l-=k.css(t,"padding"+it[a],!0,o)),"margin"!==e&&(l-=k.css(t,"border"+it[a]+"Width",!0,o))):(l+=k.css(t,"padding"+it[a],!0,o),"padding"!==e?l+=k.css(t,"border"+it[a]+"Width",!0,o):s+=k.css(t,"border"+it[a]+"Width",!0,o));return!r&&i>=0&&(l+=Math.max(0,Math.ceil(t["offset"+n[0].toUpperCase()+n.slice(1)]-i-l-s-.5))),l}function tn(t,n,e){var r=Ht(t),o=Vt(t,n,r),i="border-box"===k.css(t,"boxSizing",!1,r),a=i;if(Gt.test(o)){if(!e)return o;o="auto"}return a=a&&(b.boxSizingReliable()||o===t.style[n]),("auto"===o||!parseFloat(o)&&"inline"===k.css(t,"display",!1,r))&&(o=t["offset"+n[0].toUpperCase()+n.slice(1)],a=!0),(o=parseFloat(o)||0)+Zt(t,n,e||(i?"border":"content"),a,r,o)+"px"}function nn(t,n,e,r,o){return new nn.prototype.init(t,n,e,r,o)}k.extend({cssHooks:{opacity:{get:function(t,n){if(n){var e=Vt(t,"opacity");return""===e?"1":e}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,n,e,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var o,i,a,s=X(n),l=zt.test(n),d=t.style;if(l||(n=$t(s)),a=k.cssHooks[n]||k.cssHooks[s],void 0===e)return a&&"get"in a&&void 0!==(o=a.get(t,!1,r))?o:d[n];"string"===(i=typeof e)&&(o=ot.exec(e))&&o[1]&&(e=lt(t,n,o),i="number"),null!=e&&e==e&&("number"===i&&(e+=o&&o[3]||(k.cssNumber[s]?"":"px")),b.clearCloneStyle||""!==e||0!==n.indexOf("background")||(d[n]="inherit"),a&&"set"in a&&void 0===(e=a.set(t,e,r))||(l?d.setProperty(n,e):d[n]=e))}},css:function(t,n,e,r){var o,i,a,s=X(n);return zt.test(n)||(n=$t(s)),(a=k.cssHooks[n]||k.cssHooks[s])&&"get"in a&&(o=a.get(t,!0,e)),void 0===o&&(o=Vt(t,n,r)),"normal"===o&&n in Yt&&(o=Yt[n]),""===e||e?(i=parseFloat(o),!0===e||isFinite(i)?i||0:o):o}}),k.each(["height","width"],function(t,n){k.cssHooks[n]={get:function(t,e,r){if(e)return!Wt.test(k.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?tn(t,n,r):st(t,qt,function(){return tn(t,n,r)})},set:function(t,e,r){var o,i=Ht(t),a="border-box"===k.css(t,"boxSizing",!1,i),s=r&&Zt(t,n,r,a,i);return a&&b.scrollboxSize()===i.position&&(s-=Math.ceil(t["offset"+n[0].toUpperCase()+n.slice(1)]-parseFloat(i[n])-Zt(t,n,"border",!1,i)-.5)),s&&(o=ot.exec(e))&&"px"!==(o[3]||"px")&&(t.style[n]=e,e=k.css(t,n)),Jt(0,e,s)}}}),k.cssHooks.marginLeft=Bt(b.reliableMarginLeft,function(t,n){if(n)return(parseFloat(Vt(t,"marginLeft"))||t.getBoundingClientRect().left-st(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),k.each({margin:"",padding:"",border:"Width"},function(t,n){k.cssHooks[t+n]={expand:function(e){for(var r=0,o={},i="string"==typeof e?e.split(" "):[e];r<4;r++)o[t+it[r]+n]=i[r]||i[r-2]||i[0];return o}},"margin"!==t&&(k.cssHooks[t+n].set=Jt)}),k.fn.extend({css:function(t,n){return W(this,function(t,n,e){var r,o,i={},a=0;if(Array.isArray(n)){for(r=Ht(t),o=n.length;a<o;a++)i[n[a]]=k.css(t,n[a],!1,r);return i}return void 0!==e?k.style(t,n,e):k.css(t,n)},t,n,arguments.length>1)}}),k.Tween=nn,nn.prototype={constructor:nn,init:function(t,n,e,r,o,i){this.elem=t,this.prop=e,this.easing=o||k.easing._default,this.options=n,this.start=this.now=this.cur(),this.end=r,this.unit=i||(k.cssNumber[e]?"":"px")},cur:function(){var t=nn.propHooks[this.prop];return t&&t.get?t.get(this):nn.propHooks._default.get(this)},run:function(t){var n,e=nn.propHooks[this.prop];return this.options.duration?this.pos=n=k.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=n=t,this.now=(this.end-this.start)*n+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),e&&e.set?e.set(this):nn.propHooks._default.set(this),this}},nn.prototype.init.prototype=nn.prototype,nn.propHooks={_default:{get:function(t){var n;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(n=k.css(t.elem,t.prop,""))&&"auto"!==n?n:0},set:function(t){k.fx.step[t.prop]?k.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[k.cssProps[t.prop]]&&!k.cssHooks[t.prop]?t.elem[t.prop]=t.now:k.style(t.elem,t.prop,t.now+t.unit)}}},nn.propHooks.scrollTop=nn.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},k.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},k.fx=nn.prototype.init,k.fx.step={};var en,rn,on=/^(?:toggle|show|hide)$/,an=/queueHooks$/;function sn(){rn&&(!1===a.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(sn):e.setTimeout(sn,k.fx.interval),k.fx.tick())}function ln(){return e.setTimeout(function(){en=void 0}),en=Date.now()}function dn(t,n){var e,r=0,o={height:t};for(n=n?1:0;r<4;r+=2-n)o["margin"+(e=it[r])]=o["padding"+e]=t;return n&&(o.opacity=o.width=t),o}function cn(t,n,e){for(var r,o=(un.tweeners[n]||[]).concat(un.tweeners["*"]),i=0,a=o.length;i<a;i++)if(r=o[i].call(e,n,t))return r}function un(t,n,e){var r,o,i=0,a=un.prefilters.length,s=k.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var n=en||ln(),e=Math.max(0,d.startTime+d.duration-n),r=1-(e/d.duration||0),i=0,a=d.tweens.length;i<a;i++)d.tweens[i].run(r);return s.notifyWith(t,[d,r,e]),r<1&&a?e:(a||s.notifyWith(t,[d,1,0]),s.resolveWith(t,[d]),!1)},d=s.promise({elem:t,props:k.extend({},n),opts:k.extend(!0,{specialEasing:{},easing:k.easing._default},e),originalProperties:n,originalOptions:e,startTime:en||ln(),duration:e.duration,tweens:[],createTween:function(n,e){var r=k.Tween(t,d.opts,n,e,d.opts.specialEasing[n]||d.opts.easing);return d.tweens.push(r),r},stop:function(n){var e=0,r=n?d.tweens.length:0;if(o)return this;for(o=!0;e<r;e++)d.tweens[e].run(1);return n?(s.notifyWith(t,[d,1,0]),s.resolveWith(t,[d,n])):s.rejectWith(t,[d,n]),this}}),c=d.props;for(!function(t,n){var e,r,o,i,a;for(e in t)if(o=n[r=X(e)],i=t[e],Array.isArray(i)&&(o=i[1],i=t[e]=i[0]),e!==r&&(t[r]=i,delete t[e]),(a=k.cssHooks[r])&&"expand"in a)for(e in i=a.expand(i),delete t[r],i)e in t||(t[e]=i[e],n[e]=o);else n[r]=o}(c,d.opts.specialEasing);i<a;i++)if(r=un.prefilters[i].call(d,t,c,d.opts))return v(r.stop)&&(k._queueHooks(d.elem,d.opts.queue).stop=r.stop.bind(r)),r;return k.map(c,cn,d),v(d.opts.start)&&d.opts.start.call(t,d),d.progress(d.opts.progress).done(d.opts.done,d.opts.complete).fail(d.opts.fail).always(d.opts.always),k.fx.timer(k.extend(l,{elem:t,anim:d,queue:d.opts.queue})),d}k.Animation=k.extend(un,{tweeners:{"*":[function(t,n){var e=this.createTween(t,n);return lt(e.elem,t,ot.exec(n),e),e}]},tweener:function(t,n){v(t)?(n=t,t=["*"]):t=t.match(R);for(var e,r=0,o=t.length;r<o;r++)e=t[r],un.tweeners[e]=un.tweeners[e]||[],un.tweeners[e].unshift(n)},prefilters:[function(t,n,e){var r,o,i,a,s,l,d,c,u="width"in n||"height"in n,h=this,f={},p=t.style,m=t.nodeType&&at(t),g=J.get(t,"fxshow");for(r in e.queue||(null==(a=k._queueHooks(t,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,h.always(function(){h.always(function(){a.unqueued--,k.queue(t,"fx").length||a.empty.fire()})})),n)if(o=n[r],on.test(o)){if(delete n[r],i=i||"toggle"===o,o===(m?"hide":"show")){if("show"!==o||!g||void 0===g[r])continue;m=!0}f[r]=g&&g[r]||k.style(t,r)}if((l=!k.isEmptyObject(n))||!k.isEmptyObject(f))for(r in u&&1===t.nodeType&&(e.overflow=[p.overflow,p.overflowX,p.overflowY],null==(d=g&&g.display)&&(d=J.get(t,"display")),"none"===(c=k.css(t,"display"))&&(d?c=d:(ut([t],!0),d=t.style.display||d,c=k.css(t,"display"),ut([t]))),("inline"===c||"inline-block"===c&&null!=d)&&"none"===k.css(t,"float")&&(l||(h.done(function(){p.display=d}),null==d&&(c=p.display,d="none"===c?"":c)),p.display="inline-block")),e.overflow&&(p.overflow="hidden",h.always(function(){p.overflow=e.overflow[0],p.overflowX=e.overflow[1],p.overflowY=e.overflow[2]})),l=!1,f)l||(g?"hidden"in g&&(m=g.hidden):g=J.access(t,"fxshow",{display:d}),i&&(g.hidden=!m),m&&ut([t],!0),h.done(function(){for(r in m||ut([t]),J.remove(t,"fxshow"),f)k.style(t,r,f[r])})),l=cn(m?g[r]:0,r,h),r in g||(g[r]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(t,n){n?un.prefilters.unshift(t):un.prefilters.push(t)}}),k.speed=function(t,n,e){var r=t&&"object"==typeof t?k.extend({},t):{complete:e||!e&&n||v(t)&&t,duration:t,easing:e&&n||n&&!v(n)&&n};return k.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in k.fx.speeds?r.duration=k.fx.speeds[r.duration]:r.duration=k.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){v(r.old)&&r.old.call(this),r.queue&&k.dequeue(this,r.queue)},r},k.fn.extend({fadeTo:function(t,n,e,r){return this.filter(at).css("opacity",0).show().end().animate({opacity:n},t,e,r)},animate:function(t,n,e,r){var o=k.isEmptyObject(t),i=k.speed(n,e,r),a=function(){var n=un(this,k.extend({},t),i);(o||J.get(this,"finish"))&&n.stop(!0)};return a.finish=a,o||!1===i.queue?this.each(a):this.queue(i.queue,a)},stop:function(t,n,e){var r=function(t){var n=t.stop;delete t.stop,n(e)};return"string"!=typeof t&&(e=n,n=t,t=void 0),n&&!1!==t&&this.queue(t||"fx",[]),this.each(function(){var n=!0,o=null!=t&&t+"queueHooks",i=k.timers,a=J.get(this);if(o)a[o]&&a[o].stop&&r(a[o]);else for(o in a)a[o]&&a[o].stop&&an.test(o)&&r(a[o]);for(o=i.length;o--;)i[o].elem!==this||null!=t&&i[o].queue!==t||(i[o].anim.stop(e),n=!1,i.splice(o,1));!n&&e||k.dequeue(this,t)})},finish:function(t){return!1!==t&&(t=t||"fx"),this.each(function(){var n,e=J.get(this),r=e[t+"queue"],o=e[t+"queueHooks"],i=k.timers,a=r?r.length:0;for(e.finish=!0,k.queue(this,t,[]),o&&o.stop&&o.stop.call(this,!0),n=i.length;n--;)i[n].elem===this&&i[n].queue===t&&(i[n].anim.stop(!0),i.splice(n,1));for(n=0;n<a;n++)r[n]&&r[n].finish&&r[n].finish.call(this);delete e.finish})}}),k.each(["toggle","show","hide"],function(t,n){var e=k.fn[n];k.fn[n]=function(t,r,o){return null==t||"boolean"==typeof t?e.apply(this,arguments):this.animate(dn(n,!0),t,r,o)}}),k.each({slideDown:dn("show"),slideUp:dn("hide"),slideToggle:dn("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,n){k.fn[t]=function(t,e,r){return this.animate(n,t,e,r)}}),k.timers=[],k.fx.tick=function(){var t,n=0,e=k.timers;for(en=Date.now();n<e.length;n++)(t=e[n])()||e[n]!==t||e.splice(n--,1);e.length||k.fx.stop(),en=void 0},k.fx.timer=function(t){k.timers.push(t),k.fx.start()},k.fx.interval=13,k.fx.start=function(){rn||(rn=!0,sn())},k.fx.stop=function(){rn=null},k.fx.speeds={slow:600,fast:200,_default:400},k.fn.delay=function(t,n){return t=k.fx&&k.fx.speeds[t]||t,n=n||"fx",this.queue(n,function(n,r){var o=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(o)}})},function(){var t=a.createElement("input"),n=a.createElement("select").appendChild(a.createElement("option"));t.type="checkbox",b.checkOn=""!==t.value,b.optSelected=n.selected,(t=a.createElement("input")).value="t",t.type="radio",b.radioValue="t"===t.value}();var hn,fn=k.expr.attrHandle;k.fn.extend({attr:function(t,n){return W(this,k.attr,t,n,arguments.length>1)},removeAttr:function(t){return this.each(function(){k.removeAttr(this,t)})}}),k.extend({attr:function(t,n,e){var r,o,i=t.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===t.getAttribute?k.prop(t,n,e):(1===i&&k.isXMLDoc(t)||(o=k.attrHooks[n.toLowerCase()]||(k.expr.match.bool.test(n)?hn:void 0)),void 0!==e?null===e?void k.removeAttr(t,n):o&&"set"in o&&void 0!==(r=o.set(t,e,n))?r:(t.setAttribute(n,e+""),e):o&&"get"in o&&null!==(r=o.get(t,n))?r:null==(r=k.find.attr(t,n))?void 0:r)},attrHooks:{type:{set:function(t,n){if(!b.radioValue&&"radio"===n&&N(t,"input")){var e=t.value;return t.setAttribute("type",n),e&&(t.value=e),n}}}},removeAttr:function(t,n){var e,r=0,o=n&&n.match(R);if(o&&1===t.nodeType)for(;e=o[r++];)t.removeAttribute(e)}}),hn={set:function(t,n,e){return!1===n?k.removeAttr(t,e):t.setAttribute(e,e),e}},k.each(k.expr.match.bool.source.match(/\w+/g),function(t,n){var e=fn[n]||k.find.attr;fn[n]=function(t,n,r){var o,i,a=n.toLowerCase();return r||(i=fn[a],fn[a]=o,o=null!=e(t,n,r)?a:null,fn[a]=i),o}});var pn=/^(?:input|select|textarea|button)$/i,mn=/^(?:a|area)$/i;function gn(t){return(t.match(R)||[]).join(" ")}function bn(t){return t.getAttribute&&t.getAttribute("class")||""}function vn(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(R)||[]}k.fn.extend({prop:function(t,n){return W(this,k.prop,t,n,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[k.propFix[t]||t]})}}),k.extend({prop:function(t,n,e){var r,o,i=t.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&k.isXMLDoc(t)||(n=k.propFix[n]||n,o=k.propHooks[n]),void 0!==e?o&&"set"in o&&void 0!==(r=o.set(t,e,n))?r:t[n]=e:o&&"get"in o&&null!==(r=o.get(t,n))?r:t[n]},propHooks:{tabIndex:{get:function(t){var n=k.find.attr(t,"tabindex");return n?parseInt(n,10):pn.test(t.nodeName)||mn.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),b.optSelected||(k.propHooks.selected={get:function(t){var n=t.parentNode;return n&&n.parentNode&&n.parentNode.selectedIndex,null},set:function(t){var n=t.parentNode;n&&(n.selectedIndex,n.parentNode&&n.parentNode.selectedIndex)}}),k.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){k.propFix[this.toLowerCase()]=this}),k.fn.extend({addClass:function(t){var n,e,r,o,i,a,s,l=0;if(v(t))return this.each(function(n){k(this).addClass(t.call(this,n,bn(this)))});if((n=vn(t)).length)for(;e=this[l++];)if(o=bn(e),r=1===e.nodeType&&" "+gn(o)+" "){for(a=0;i=n[a++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");o!==(s=gn(r))&&e.setAttribute("class",s)}return this},removeClass:function(t){var n,e,r,o,i,a,s,l=0;if(v(t))return this.each(function(n){k(this).removeClass(t.call(this,n,bn(this)))});if(!arguments.length)return this.attr("class","");if((n=vn(t)).length)for(;e=this[l++];)if(o=bn(e),r=1===e.nodeType&&" "+gn(o)+" "){for(a=0;i=n[a++];)for(;r.indexOf(" "+i+" ")>-1;)r=r.replace(" "+i+" "," ");o!==(s=gn(r))&&e.setAttribute("class",s)}return this},toggleClass:function(t,n){var e=typeof t,r="string"===e||Array.isArray(t);return"boolean"==typeof n&&r?n?this.addClass(t):this.removeClass(t):v(t)?this.each(function(e){k(this).toggleClass(t.call(this,e,bn(this),n),n)}):this.each(function(){var n,o,i,a;if(r)for(o=0,i=k(this),a=vn(t);n=a[o++];)i.hasClass(n)?i.removeClass(n):i.addClass(n);else void 0!==t&&"boolean"!==e||((n=bn(this))&&J.set(this,"__className__",n),this.setAttribute&&this.setAttribute("class",n||!1===t?"":J.get(this,"__className__")||""))})},hasClass:function(t){var n,e,r=0;for(n=" "+t+" ";e=this[r++];)if(1===e.nodeType&&(" "+gn(bn(e))+" ").indexOf(n)>-1)return!0;return!1}});var xn=/\r/g;k.fn.extend({val:function(t){var n,e,r,o=this[0];return arguments.length?(r=v(t),this.each(function(e){var o;1===this.nodeType&&(null==(o=r?t.call(this,e,k(this).val()):t)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=k.map(o,function(t){return null==t?"":t+""})),(n=k.valHooks[this.type]||k.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,o,"value")||(this.value=o))})):o?(n=k.valHooks[o.type]||k.valHooks[o.nodeName.toLowerCase()])&&"get"in n&&void 0!==(e=n.get(o,"value"))?e:"string"==typeof(e=o.value)?e.replace(xn,""):null==e?"":e:void 0}}),k.extend({valHooks:{option:{get:function(t){var n=k.find.attr(t,"value");return null!=n?n:gn(k.text(t))}},select:{get:function(t){var n,e,r,o=t.options,i=t.selectedIndex,a="select-one"===t.type,s=a?null:[],l=a?i+1:o.length;for(r=i<0?l:a?i:0;r<l;r++)if(((e=o[r]).selected||r===i)&&!e.disabled&&(!e.parentNode.disabled||!N(e.parentNode,"optgroup"))){if(n=k(e).val(),a)return n;s.push(n)}return s},set:function(t,n){for(var e,r,o=t.options,i=k.makeArray(n),a=o.length;a--;)((r=o[a]).selected=k.inArray(k.valHooks.option.get(r),i)>-1)&&(e=!0);return e||(t.selectedIndex=-1),i}}}}),k.each(["radio","checkbox"],function(){k.valHooks[this]={set:function(t,n){if(Array.isArray(n))return t.checked=k.inArray(k(t).val(),n)>-1}},b.checkOn||(k.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),b.focusin="onfocusin"in e;var yn=/^(?:focusinfocus|focusoutblur)$/,wn=function(t){t.stopPropagation()};k.extend(k.event,{trigger:function(t,n,r,o){var i,s,l,d,c,u,h,f,m=[r||a],g=p.call(t,"type")?t.type:t,b=p.call(t,"namespace")?t.namespace.split("."):[];if(s=f=l=r=r||a,3!==r.nodeType&&8!==r.nodeType&&!yn.test(g+k.event.triggered)&&(g.indexOf(".")>-1&&(b=g.split("."),g=b.shift(),b.sort()),c=g.indexOf(":")<0&&"on"+g,(t=t[k.expando]?t:new k.Event(g,"object"==typeof t&&t)).isTrigger=o?2:3,t.namespace=b.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+b.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=r),n=null==n?[t]:k.makeArray(n,[t]),h=k.event.special[g]||{},o||!h.trigger||!1!==h.trigger.apply(r,n))){if(!o&&!h.noBubble&&!x(r)){for(d=h.delegateType||g,yn.test(d+g)||(s=s.parentNode);s;s=s.parentNode)m.push(s),l=s;l===(r.ownerDocument||a)&&m.push(l.defaultView||l.parentWindow||e)}for(i=0;(s=m[i++])&&!t.isPropagationStopped();)f=s,t.type=i>1?d:h.bindType||g,(u=(J.get(s,"events")||{})[t.type]&&J.get(s,"handle"))&&u.apply(s,n),(u=c&&s[c])&&u.apply&&Q(s)&&(t.result=u.apply(s,n),!1===t.result&&t.preventDefault());return t.type=g,o||t.isDefaultPrevented()||h._default&&!1!==h._default.apply(m.pop(),n)||!Q(r)||c&&v(r[g])&&!x(r)&&((l=r[c])&&(r[c]=null),k.event.triggered=g,t.isPropagationStopped()&&f.addEventListener(g,wn),r[g](),t.isPropagationStopped()&&f.removeEventListener(g,wn),k.event.triggered=void 0,l&&(r[c]=l)),t.result}},simulate:function(t,n,e){var r=k.extend(new k.Event,e,{type:t,isSimulated:!0});k.event.trigger(r,null,n)}}),k.fn.extend({trigger:function(t,n){return this.each(function(){k.event.trigger(t,n,this)})},triggerHandler:function(t,n){var e=this[0];if(e)return k.event.trigger(t,n,e,!0)}}),b.focusin||k.each({focus:"focusin",blur:"focusout"},function(t,n){var e=function(t){k.event.simulate(n,t.target,k.event.fix(t))};k.event.special[n]={setup:function(){var r=this.ownerDocument||this,o=J.access(r,n);o||r.addEventListener(t,e,!0),J.access(r,n,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this,o=J.access(r,n)-1;o?J.access(r,n,o):(r.removeEventListener(t,e,!0),J.remove(r,n))}}});var _n=e.location,kn=Date.now(),Sn=/\?/;k.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text/xml")}catch(t){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||k.error("Invalid XML: "+t),n};var Cn=/\[\]$/,Tn=/\r?\n/g,En=/^(?:submit|button|image|reset|file)$/i,An=/^(?:input|select|textarea|keygen)/i;function Kn(t,n,e,r){var o;if(Array.isArray(n))k.each(n,function(n,o){e||Cn.test(t)?r(t,o):Kn(t+"["+("object"==typeof o&&null!=o?n:"")+"]",o,e,r)});else if(e||"object"!==_(n))r(t,n);else for(o in n)Kn(t+"["+o+"]",n[o],e,r)}k.param=function(t,n){var e,r=[],o=function(t,n){var e=v(n)?n():n;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==e?"":e)};if(Array.isArray(t)||t.jquery&&!k.isPlainObject(t))k.each(t,function(){o(this.name,this.value)});else for(e in t)Kn(e,t[e],n,o);return r.join("&")},k.fn.extend({serialize:function(){return k.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=k.prop(this,"elements");return t?k.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!k(this).is(":disabled")&&An.test(this.nodeName)&&!En.test(t)&&(this.checked||!ht.test(t))}).map(function(t,n){var e=k(this).val();return null==e?null:Array.isArray(e)?k.map(e,function(t){return{name:n.name,value:t.replace(Tn,"\r\n")}}):{name:n.name,value:e.replace(Tn,"\r\n")}}).get()}});var Nn=/%20/g,Dn=/#.*$/,On=/([?&])_=[^&]*/,Pn=/^(.*?):[ \t]*([^\r\n]*)$/gm,In=/^(?:GET|HEAD)$/,Ln=/^\/\//,Fn={},Mn={},Rn="*/".concat("*"),jn=a.createElement("a");function Gn(t){return function(n,e){"string"!=typeof n&&(e=n,n="*");var r,o=0,i=n.toLowerCase().match(R)||[];if(v(e))for(;r=i[o++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(e)):(t[r]=t[r]||[]).push(e)}}function Hn(t,n,e,r){var o={},i=t===Mn;function a(s){var l;return o[s]=!0,k.each(t[s]||[],function(t,s){var d=s(n,e,r);return"string"!=typeof d||i||o[d]?i?!(l=d):void 0:(n.dataTypes.unshift(d),a(d),!1)}),l}return a(n.dataTypes[0])||!o["*"]&&a("*")}function Un(t,n){var e,r,o=k.ajaxSettings.flatOptions||{};for(e in n)void 0!==n[e]&&((o[e]?t:r||(r={}))[e]=n[e]);return r&&k.extend(!0,t,r),t}jn.href=_n.href,k.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:_n.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(_n.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Rn,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":k.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,n){return n?Un(Un(t,k.ajaxSettings),n):Un(k.ajaxSettings,t)},ajaxPrefilter:Gn(Fn),ajaxTransport:Gn(Mn),ajax:function(t,n){"object"==typeof t&&(n=t,t=void 0),n=n||{};var r,o,i,s,l,d,c,u,h,f,p=k.ajaxSetup({},n),m=p.context||p,g=p.context&&(m.nodeType||m.jquery)?k(m):k.event,b=k.Deferred(),v=k.Callbacks("once memory"),x=p.statusCode||{},y={},w={},_="canceled",S={readyState:0,getResponseHeader:function(t){var n;if(c){if(!s)for(s={};n=Pn.exec(i);)s[n[1].toLowerCase()]=n[2];n=s[t.toLowerCase()]}return null==n?null:n},getAllResponseHeaders:function(){return c?i:null},setRequestHeader:function(t,n){return null==c&&(t=w[t.toLowerCase()]=w[t.toLowerCase()]||t,y[t]=n),this},overrideMimeType:function(t){return null==c&&(p.mimeType=t),this},statusCode:function(t){var n;if(t)if(c)S.always(t[S.status]);else for(n in t)x[n]=[x[n],t[n]];return this},abort:function(t){var n=t||_;return r&&r.abort(n),C(0,n),this}};if(b.promise(S),p.url=((t||p.url||_n.href)+"").replace(Ln,_n.protocol+"//"),p.type=n.method||n.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(R)||[""],null==p.crossDomain){d=a.createElement("a");try{d.href=p.url,d.href=d.href,p.crossDomain=jn.protocol+"//"+jn.host!=d.protocol+"//"+d.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=k.param(p.data,p.traditional)),Hn(Fn,p,n,S),c)return S;for(h in(u=k.event&&p.global)&&0==k.active++&&k.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!In.test(p.type),o=p.url.replace(Dn,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Nn,"+")):(f=p.url.slice(o.length),p.data&&(p.processData||"string"==typeof p.data)&&(o+=(Sn.test(o)?"&":"?")+p.data,delete p.data),!1===p.cache&&(o=o.replace(On,"$1"),f=(Sn.test(o)?"&":"?")+"_="+kn+++f),p.url=o+f),p.ifModified&&(k.lastModified[o]&&S.setRequestHeader("If-Modified-Since",k.lastModified[o]),k.etag[o]&&S.setRequestHeader("If-None-Match",k.etag[o])),(p.data&&p.hasContent&&!1!==p.contentType||n.contentType)&&S.setRequestHeader("Content-Type",p.contentType),S.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Rn+"; q=0.01":""):p.accepts["*"]),p.headers)S.setRequestHeader(h,p.headers[h]);if(p.beforeSend&&(!1===p.beforeSend.call(m,S,p)||c))return S.abort();if(_="abort",v.add(p.complete),S.done(p.success),S.fail(p.error),r=Hn(Mn,p,n,S)){if(S.readyState=1,u&&g.trigger("ajaxSend",[S,p]),c)return S;p.async&&p.timeout>0&&(l=e.setTimeout(function(){S.abort("timeout")},p.timeout));try{c=!1,r.send(y,C)}catch(t){if(c)throw t;C(-1,t)}}else C(-1,"No Transport");function C(t,n,a,s){var d,h,f,y,w,_=n;c||(c=!0,l&&e.clearTimeout(l),r=void 0,i=s||"",S.readyState=t>0?4:0,d=t>=200&&t<300||304===t,a&&(y=function(t,n,e){for(var r,o,i,a,s=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=t.mimeType||n.getResponseHeader("Content-Type"));if(r)for(o in s)if(s[o]&&s[o].test(r)){l.unshift(o);break}if(l[0]in e)i=l[0];else{for(o in e){if(!l[0]||t.converters[o+" "+l[0]]){i=o;break}a||(a=o)}i=i||a}if(i)return i!==l[0]&&l.unshift(i),e[i]}(p,S,a)),y=function(t,n,e,r){var o,i,a,s,l,d={},c=t.dataTypes.slice();if(c[1])for(a in t.converters)d[a.toLowerCase()]=t.converters[a];for(i=c.shift();i;)if(t.responseFields[i]&&(e[t.responseFields[i]]=n),!l&&r&&t.dataFilter&&(n=t.dataFilter(n,t.dataType)),l=i,i=c.shift())if("*"===i)i=l;else if("*"!==l&&l!==i){if(!(a=d[l+" "+i]||d["* "+i]))for(o in d)if((s=o.split(" "))[1]===i&&(a=d[l+" "+s[0]]||d["* "+s[0]])){!0===a?a=d[o]:!0!==d[o]&&(i=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&t.throws)n=a(n);else try{n=a(n)}catch(t){return{state:"parsererror",error:a?t:"No conversion from "+l+" to "+i}}}return{state:"success",data:n}}(p,y,S,d),d?(p.ifModified&&((w=S.getResponseHeader("Last-Modified"))&&(k.lastModified[o]=w),(w=S.getResponseHeader("etag"))&&(k.etag[o]=w)),204===t||"HEAD"===p.type?_="nocontent":304===t?_="notmodified":(_=y.state,h=y.data,d=!(f=y.error))):(f=_,!t&&_||(_="error",t<0&&(t=0))),S.status=t,S.statusText=(n||_)+"",d?b.resolveWith(m,[h,_,S]):b.rejectWith(m,[S,_,f]),S.statusCode(x),x=void 0,u&&g.trigger(d?"ajaxSuccess":"ajaxError",[S,p,d?h:f]),v.fireWith(m,[S,_]),u&&(g.trigger("ajaxComplete",[S,p]),--k.active||k.event.trigger("ajaxStop")))}return S},getJSON:function(t,n,e){return k.get(t,n,e,"json")},getScript:function(t,n){return k.get(t,void 0,n,"script")}}),k.each(["get","post"],function(t,n){k[n]=function(t,e,r,o){return v(e)&&(o=o||r,r=e,e=void 0),k.ajax(k.extend({url:t,type:n,dataType:o,data:e,success:r},k.isPlainObject(t)&&t))}}),k._evalUrl=function(t){return k.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},k.fn.extend({wrapAll:function(t){var n;return this[0]&&(v(t)&&(t=t.call(this[0])),n=k(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&n.insertBefore(this[0]),n.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return v(t)?this.each(function(n){k(this).wrapInner(t.call(this,n))}):this.each(function(){var n=k(this),e=n.contents();e.length?e.wrapAll(t):n.append(t)})},wrap:function(t){var n=v(t);return this.each(function(e){k(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){k(this).replaceWith(this.childNodes)}),this}}),k.expr.pseudos.hidden=function(t){return!k.expr.pseudos.visible(t)},k.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},k.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(t){}};var Vn={0:200,1223:204},Bn=k.ajaxSettings.xhr();b.cors=!!Bn&&"withCredentials"in Bn,b.ajax=Bn=!!Bn,k.ajaxTransport(function(t){var n,r;if(b.cors||Bn&&!t.crossDomain)return{send:function(o,i){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];for(a in t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)s.setRequestHeader(a,o[a]);n=function(t){return function(){n&&(n=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===t?s.abort():"error"===t?"number"!=typeof s.status?i(0,"error"):i(s.status,s.statusText):i(Vn[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),r=s.onerror=s.ontimeout=n("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout(function(){n&&r()})},n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(t){if(n)throw t}},abort:function(){n&&n()}}}),k.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),k.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return k.globalEval(t),t}}}),k.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),k.ajaxTransport("script",function(t){var n,e;if(t.crossDomain)return{send:function(r,o){n=k("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",e=function(t){n.remove(),e=null,t&&o("error"===t.type?404:200,t.type)}),a.head.appendChild(n[0])},abort:function(){e&&e()}}});var Wn,zn=[],qn=/(=)\?(?=&|$)|\?\?/;k.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=zn.pop()||k.expando+"_"+kn++;return this[t]=!0,t}}),k.ajaxPrefilter("json jsonp",function(t,n,r){var o,i,a,s=!1!==t.jsonp&&(qn.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&qn.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return o=t.jsonpCallback=v(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(qn,"$1"+o):!1!==t.jsonp&&(t.url+=(Sn.test(t.url)?"&":"?")+t.jsonp+"="+o),t.converters["script json"]=function(){return a||k.error(o+" was not called"),a[0]},t.dataTypes[0]="json",i=e[o],e[o]=function(){a=arguments},r.always(function(){void 0===i?k(e).removeProp(o):e[o]=i,t[o]&&(t.jsonpCallback=n.jsonpCallback,zn.push(o)),a&&v(i)&&i(a[0]),a=i=void 0}),"script"}),b.createHTMLDocument=((Wn=a.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Wn.childNodes.length),k.parseHTML=function(t,n,e){return"string"!=typeof t?[]:("boolean"==typeof n&&(e=n,n=!1),n||(b.createHTMLDocument?((r=(n=a.implementation.createHTMLDocument("")).createElement("base")).href=a.location.href,n.head.appendChild(r)):n=a),i=!e&&[],(o=D.exec(t))?[n.createElement(o[1])]:(o=wt([t],n,i),i&&i.length&&k(i).remove(),k.merge([],o.childNodes)));var r,o,i},k.fn.load=function(t,n,e){var r,o,i,a=this,s=t.indexOf(" ");return s>-1&&(r=gn(t.slice(s)),t=t.slice(0,s)),v(n)?(e=n,n=void 0):n&&"object"==typeof n&&(o="POST"),a.length>0&&k.ajax({url:t,type:o||"GET",dataType:"html",data:n}).done(function(t){i=arguments,a.html(r?k("<div>").append(k.parseHTML(t)).find(r):t)}).always(e&&function(t,n){a.each(function(){e.apply(this,i||[t.responseText,n,t])})}),this},k.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,n){k.fn[n]=function(t){return this.on(n,t)}}),k.expr.pseudos.animated=function(t){return k.grep(k.timers,function(n){return t===n.elem}).length},k.offset={setOffset:function(t,n,e){var r,o,i,a,s,l,d=k.css(t,"position"),c=k(t),u={};"static"===d&&(t.style.position="relative"),s=c.offset(),i=k.css(t,"top"),l=k.css(t,"left"),("absolute"===d||"fixed"===d)&&(i+l).indexOf("auto")>-1?(a=(r=c.position()).top,o=r.left):(a=parseFloat(i)||0,o=parseFloat(l)||0),v(n)&&(n=n.call(t,e,k.extend({},s))),null!=n.top&&(u.top=n.top-s.top+a),null!=n.left&&(u.left=n.left-s.left+o),"using"in n?n.using.call(t,u):c.css(u)}},k.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(n){k.offset.setOffset(this,t,n)});var n,e,r=this[0];return r?r.getClientRects().length?(n=r.getBoundingClientRect(),e=r.ownerDocument.defaultView,{top:n.top+e.pageYOffset,left:n.left+e.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,n,e,r=this[0],o={top:0,left:0};if("fixed"===k.css(r,"position"))n=r.getBoundingClientRect();else{for(n=this.offset(),e=r.ownerDocument,t=r.offsetParent||e.documentElement;t&&(t===e.body||t===e.documentElement)&&"static"===k.css(t,"position");)t=t.parentNode;t&&t!==r&&1===t.nodeType&&((o=k(t).offset()).top+=k.css(t,"borderTopWidth",!0),o.left+=k.css(t,"borderLeftWidth",!0))}return{top:n.top-o.top-k.css(r,"marginTop",!0),left:n.left-o.left-k.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===k.css(t,"position");)t=t.offsetParent;return t||_t})}}),k.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,n){var e="pageYOffset"===n;k.fn[t]=function(r){return W(this,function(t,r,o){var i;if(x(t)?i=t:9===t.nodeType&&(i=t.defaultView),void 0===o)return i?i[n]:t[r];i?i.scrollTo(e?i.pageXOffset:o,e?o:i.pageYOffset):t[r]=o},t,r,arguments.length)}}),k.each(["top","left"],function(t,n){k.cssHooks[n]=Bt(b.pixelPosition,function(t,e){if(e)return e=Vt(t,n),Gt.test(e)?k(t).position()[n]+"px":e})}),k.each({Height:"height",Width:"width"},function(t,n){k.each({padding:"inner"+t,content:n,"":"outer"+t},function(e,r){k.fn[r]=function(o,i){var a=arguments.length&&(e||"boolean"!=typeof o),s=e||(!0===o||!0===i?"margin":"border");return W(this,function(n,e,o){var i;return x(n)?0===r.indexOf("outer")?n["inner"+t]:n.document.documentElement["client"+t]:9===n.nodeType?(i=n.documentElement,Math.max(n.body["scroll"+t],i["scroll"+t],n.body["offset"+t],i["offset"+t],i["client"+t])):void 0===o?k.css(n,e,s):k.style(n,e,o,s)},n,a?o:void 0,a)}})}),k.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,n){k.fn[n]=function(t,e){return arguments.length>0?this.on(n,null,t,e):this.trigger(n)}}),k.fn.extend({hover:function(t,n){return this.mouseenter(t).mouseleave(n||t)}}),k.fn.extend({bind:function(t,n,e){return this.on(t,null,n,e)},unbind:function(t,n){return this.off(t,null,n)},delegate:function(t,n,e,r){return this.on(n,t,e,r)},undelegate:function(t,n,e){return 1===arguments.length?this.off(t,"**"):this.off(n,t||"**",e)}}),k.proxy=function(t,n){var e,r,o;if("string"==typeof n&&(e=t[n],n=t,t=e),v(t))return r=l.call(arguments,2),(o=function(){return t.apply(n||this,r.concat(l.call(arguments)))}).guid=t.guid=t.guid||k.guid++,o},k.holdReady=function(t){t?k.readyWait++:k.ready(!0)},k.isArray=Array.isArray,k.parseJSON=JSON.parse,k.nodeName=N,k.isFunction=v,k.isWindow=x,k.camelCase=X,k.type=_,k.now=Date.now,k.isNumeric=function(t){var n=k.type(t);return("number"===n||"string"===n)&&!isNaN(t-parseFloat(t))},void 0===(r=function(){return k}.apply(n,[]))||(t.exports=r);var Yn=e.jQuery,Xn=e.$;return k.noConflict=function(t){return e.$===k&&(e.$=Xn),t&&e.jQuery===k&&(e.jQuery=Yn),k},o||(e.jQuery=e.$=k),k})},function(t,n,e){(function(n){
/*
 * Konva JavaScript Framework v2.6.0
 * http://konvajs.github.io/
 * Licensed under the MIT
 * Date: Fri Dec 14 2018
 *
 * Original work Copyright (C) 2011 - 2013 by Eric Rowell (KineticJS)
 * Modified work Copyright (C) 2014 - present by Anton Lavrenov (Konva)
 *
 * @license
 */
!function(){"use strict";var e=Math.PI/180,r={version:"2.6.0",stages:[],idCounter:0,ids:{},names:{},shapes:{},listenClickTap:!1,inDblClickWindow:!1,isBrowser:"undefined"!=typeof window&&("[object Window]"==={}.toString.call(window)||"[object global]"==={}.toString.call(window)),isUnminified:/comment/.test(function(){}),enableTrace:!1,traceArrMax:100,dblClickWindow:400,pixelRatio:void 0,dragDistance:3,angleDeg:!0,showWarnings:!0,Filters:{},isDragging:function(){var t=r.DD;return!!t&&t.isDragging},isDragReady:function(){var t=r.DD;return!!t&&!!t.node},_addId:function(t,n){n&&(this.ids[n]=t)},_removeId:function(t){void 0!==t&&delete this.ids[t]},_addName:function(t,n){n&&(this.names[n]||(this.names[n]=[]),this.names[n].push(t))},_removeName:function(t,n){if(t){var e=this.names[t];if(e){for(var r=0;r<e.length;r++){e[r]._id===n&&e.splice(r,1)}0===e.length&&delete this.names[t]}}},getAngle:function(t){return this.angleDeg?t*e:t},_detectIE:function(t){var n=t.indexOf("msie ");if(n>0)return parseInt(t.substring(n+5,t.indexOf(".",n)),10);if(t.indexOf("trident/")>0){var e=t.indexOf("rv:");return parseInt(t.substring(e+3,t.indexOf(".",e)),10)}var r=t.indexOf("edge/");return r>0&&parseInt(t.substring(r+5,t.indexOf(".",r)),10)},_parseUA:function(t){var n=t.toLowerCase(),e=/(chrome)[ \/]([\w.]+)/.exec(n)||/(webkit)[ \/]([\w.]+)/.exec(n)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(n)||/(msie) ([\w.]+)/.exec(n)||n.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(n)||[],o=!!t.match(/Android|BlackBerry|iPhone|iPad|iPod|Opera Mini|IEMobile/i),i=!!t.match(/IEMobile/i);return{browser:e[1]||"",version:e[2]||"0",isIE:r._detectIE(n),mobile:o,ieMobile:i}},UA:void 0},o=void 0!==n?n:"undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope?self:{};r.UA=r._parseUA(o.navigator&&o.navigator.userAgent||""),o.Konva&&console.error("Konva instance is already exist in current eviroment. Please use only one instance."),o.Konva=r,r.global=o,r.window=o,r.document=o.document,t.exports=r}(),function(){"use strict";Konva.Collection=function(){var t=[].slice.call(arguments),n=t.length,e=0;for(this.length=n;e<n;e++)this[e]=t[e];return this},Konva.Collection.prototype=[],Konva.Collection.prototype.each=function(t){for(var n=0;n<this.length;n++)t(this[n],n)},Konva.Collection.prototype.toArray=function(){var t,n=[],e=this.length;for(t=0;t<e;t++)n.push(this[t]);return n},Konva.Collection.toCollection=function(t){var n,e=new Konva.Collection,r=t.length;for(n=0;n<r;n++)e.push(t[n]);return e},Konva.Collection._mapMethod=function(t){Konva.Collection.prototype[t]=function(){var n,e=this.length,r=[].slice.call(arguments);for(n=0;n<e;n++)this[n][t].apply(this[n],r);return this}},Konva.Collection.mapMethods=function(t){var n=t.prototype;for(var e in n)Konva.Collection._mapMethod(e)},Konva.Transform=function(t){this.m=t&&t.slice()||[1,0,0,1,0,0]},Konva.Transform.prototype={copy:function(){return new Konva.Transform(this.m)},point:function(t){var n=this.m;return{x:n[0]*t.x+n[2]*t.y+n[4],y:n[1]*t.x+n[3]*t.y+n[5]}},translate:function(t,n){return this.m[4]+=this.m[0]*t+this.m[2]*n,this.m[5]+=this.m[1]*t+this.m[3]*n,this},scale:function(t,n){return this.m[0]*=t,this.m[1]*=t,this.m[2]*=n,this.m[3]*=n,this},rotate:function(t){var n=Math.cos(t),e=Math.sin(t),r=this.m[0]*n+this.m[2]*e,o=this.m[1]*n+this.m[3]*e,i=this.m[0]*-e+this.m[2]*n,a=this.m[1]*-e+this.m[3]*n;return this.m[0]=r,this.m[1]=o,this.m[2]=i,this.m[3]=a,this},getTranslation:function(){return{x:this.m[4],y:this.m[5]}},skew:function(t,n){var e=this.m[0]+this.m[2]*n,r=this.m[1]+this.m[3]*n,o=this.m[2]+this.m[0]*t,i=this.m[3]+this.m[1]*t;return this.m[0]=e,this.m[1]=r,this.m[2]=o,this.m[3]=i,this},multiply:function(t){var n=this.m[0]*t.m[0]+this.m[2]*t.m[1],e=this.m[1]*t.m[0]+this.m[3]*t.m[1],r=this.m[0]*t.m[2]+this.m[2]*t.m[3],o=this.m[1]*t.m[2]+this.m[3]*t.m[3],i=this.m[0]*t.m[4]+this.m[2]*t.m[5]+this.m[4],a=this.m[1]*t.m[4]+this.m[3]*t.m[5]+this.m[5];return this.m[0]=n,this.m[1]=e,this.m[2]=r,this.m[3]=o,this.m[4]=i,this.m[5]=a,this},invert:function(){var t=1/(this.m[0]*this.m[3]-this.m[1]*this.m[2]),n=this.m[3]*t,e=-this.m[1]*t,r=-this.m[2]*t,o=this.m[0]*t,i=t*(this.m[2]*this.m[5]-this.m[3]*this.m[4]),a=t*(this.m[1]*this.m[4]-this.m[0]*this.m[5]);return this.m[0]=n,this.m[1]=e,this.m[2]=r,this.m[3]=o,this.m[4]=i,this.m[5]=a,this},getMatrix:function(){return this.m},setAbsolutePosition:function(t,n){var e=this.m[0],r=this.m[1],o=this.m[2],i=this.m[3],a=this.m[4],s=(e*(n-this.m[5])-r*(t-a))/(e*i-r*o),l=(t-a-o*s)/e;return this.translate(l,s)}};var t=Math.PI/180,n=180/Math.PI,e={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,132,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,255,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,203],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[119,128,144],slategrey:[119,128,144],snow:[255,255,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],transparent:[255,255,255,0],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,5]},r=/rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/;Konva.Util={_isElement:function(t){return!(!t||1!=t.nodeType)},_isFunction:function(t){return!!(t&&t.constructor&&t.call&&t.apply)},_isObject:function(t){return!!t&&t.constructor===Object},_isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},_isNumber:function(t){return"[object Number]"===Object.prototype.toString.call(t)&&!isNaN(t)&&isFinite(t)},_isString:function(t){return"[object String]"===Object.prototype.toString.call(t)},_isBoolean:function(t){return"[object Boolean]"===Object.prototype.toString.call(t)},isObject:function(t){return t instanceof Object},isValidSelector:function(t){if("string"!=typeof t)return!1;var n=t[0];return"#"===n||"."===n||n===n.toUpperCase()},_sign:function(t){return 0===t?0:t>0?1:-1},createCanvasElement:function(){var t=Konva.isBrowser?Konva.document.createElement("canvas"):new Konva._nodeCanvas;try{t.style=t.style||{}}catch(t){}return t},_isInDocument:function(t){for(;t=t.parentNode;)if(t==Konva.document)return!0;return!1},_simplifyArray:function(t){var n,e,r=[],o=t.length,i=Konva.Util;for(n=0;n<o;n++)e=t[n],i._isNumber(e)?e=Math.round(1e3*e)/1e3:i._isString(e)||(e=e.toString()),r.push(e);return r},_getImage:function(t,n){var e,r;if(t)if(this._isElement(t))n(t);else if(this._isString(t))(e=new Konva.window.Image).onload=function(){n(e)},e.src=t;else if(t.data){(r=Konva.Util.createCanvasElement()).width=t.width,r.height=t.height,r.getContext("2d").putImageData(t,0,0),this._getImage(r.toDataURL(),n)}else n(null);else n(null)},_getRGBAString:function(t){return["rgba(",t.red||0,",",t.green||0,",",t.blue||0,",",t.alpha||1,")"].join("")},_rgbToHex:function(t,n,e){return((1<<24)+(t<<16)+(n<<8)+e).toString(16).slice(1)},_hexToRgb:function(t){t=t.replace("#","");var n=parseInt(t,16);return{r:n>>16&255,g:n>>8&255,b:255&n}},getRandomColor:function(){for(var t=(16777215*Math.random()<<0).toString(16);t.length<6;)t="0"+t;return"#"+t},get:function(t,n){return void 0===t?n:t},getRGB:function(t){var n;return t in e?{r:(n=e[t])[0],g:n[1],b:n[2]}:"#"===t[0]?this._hexToRgb(t.substring(1)):"rgb("===t.substr(0,4)?(n=r.exec(t.replace(/ /g,"")),{r:parseInt(n[1],10),g:parseInt(n[2],10),b:parseInt(n[3],10)}):{r:0,g:0,b:0}},colorToRGBA:function(t){return t=t||"black",Konva.Util._namedColorToRBA(t)||Konva.Util._hex3ColorToRGBA(t)||Konva.Util._hex6ColorToRGBA(t)||Konva.Util._rgbColorToRGBA(t)||Konva.Util._rgbaColorToRGBA(t)},_namedColorToRBA:function(t){var n=e[t.toLowerCase()];return n?{r:n[0],g:n[1],b:n[2],a:1}:null},_rgbColorToRGBA:function(t){if(0===t.indexOf("rgb(")){var n=(t=t.match(/rgb\(([^)]+)\)/)[1]).split(/ *, */).map(Number);return{r:n[0],g:n[1],b:n[2],a:1}}},_rgbaColorToRGBA:function(t){if(0===t.indexOf("rgba(")){var n=(t=t.match(/rgba\(([^)]+)\)/)[1]).split(/ *, */).map(Number);return{r:n[0],g:n[1],b:n[2],a:n[3]}}},_hex6ColorToRGBA:function(t){if("#"===t[0]&&7===t.length)return{r:parseInt(t.slice(1,3),16),g:parseInt(t.slice(3,5),16),b:parseInt(t.slice(5,7),16),a:1}},_hex3ColorToRGBA:function(t){if("#"===t[0]&&4===t.length)return{r:parseInt(t[1]+t[1],16),g:parseInt(t[2]+t[2],16),b:parseInt(t[3]+t[3],16),a:1}},_merge:function(t,n){var e=this._clone(n);for(var r in t)this._isObject(t[r])?e[r]=this._merge(t[r],e[r]):e[r]=t[r];return e},trimRight:function(t){return t.replace(/\s+$/,"")},trimLeft:function(t){return t.replace(/^\s+/,"")},haveIntersection:function(t,n){return!(n.x>t.x+t.width||n.x+n.width<t.x||n.y>t.y+t.height||n.y+n.height<t.y)},cloneObject:function(t){var n={};for(var e in t)this._isObject(t[e])?n[e]=this.cloneObject(t[e]):this._isArray(t[e])?n[e]=this.cloneArray(t[e]):n[e]=t[e];return n},cloneArray:function(t){return t.slice(0)},_degToRad:function(n){return n*t},_radToDeg:function(t){return t*n},_capitalize:function(t){return t.charAt(0).toUpperCase()+t.slice(1)},throw:function(t){throw new Error("Konva error: "+t)},error:function(t){console.error("Konva error: "+t)},warn:function(t){Konva.global.console&&console.warn&&Konva.showWarnings&&console.warn("Konva warning: "+t)},extend:function(t,n){function e(){this.constructor=t}e.prototype=n.prototype;var r=t.prototype;for(var o in t.prototype=new e,r)r.hasOwnProperty(o)&&(t.prototype[o]=r[o]);t.__super__=n.prototype,t.super=n},addMethods:function(t,n){var e;for(e in n)t.prototype[e]=n[e]},_getControlPoints:function(t,n,e,r,o,i,a){var s=Math.sqrt(Math.pow(e-t,2)+Math.pow(r-n,2)),l=Math.sqrt(Math.pow(o-e,2)+Math.pow(i-r,2)),d=a*s/(s+l),c=a*l/(s+l);return[e-d*(o-t),r-d*(i-n),e+c*(o-t),r+c*(i-n)]},_expandPoints:function(t,n){var e,r,o=t.length,i=[];for(e=2;e<o-2;e+=2)r=Konva.Util._getControlPoints(t[e-2],t[e-1],t[e],t[e+1],t[e+2],t[e+3],n),i.push(r[0]),i.push(r[1]),i.push(t[e]),i.push(t[e+1]),i.push(r[2]),i.push(r[3]);return i},_removeLastLetter:function(t){return t.substring(0,t.length-1)},each:function(t,n){for(var e in t)n(e,t[e])},_inRange:function(t,n,e){return n<=t&&t<e},_getProjectionToSegment:function(t,n,e,r,o,i){var a,s,l,d=(t-e)*(t-e)+(n-r)*(n-r);if(0==d)a=t,s=n,l=(o-e)*(o-e)+(i-r)*(i-r);else{var c=((o-t)*(e-t)+(i-n)*(r-n))/d;c<0?(a=t,s=n,l=(t-o)*(t-o)+(n-i)*(n-i)):c>1?(a=e,s=r,l=(e-o)*(e-o)+(r-i)*(r-i)):l=((a=t+c*(e-t))-o)*(a-o)+((s=n+c*(r-n))-i)*(s-i)}return[a,s,l]},_getProjectionToLine:function(t,n,e){var r=Konva.Util.cloneObject(t),o=Number.MAX_VALUE;return n.forEach(function(i,a){if(e||a!==n.length-1){var s=n[(a+1)%n.length],l=Konva.Util._getProjectionToSegment(i.x,i.y,s.x,s.y,t.x,t.y),d=l[0],c=l[1],u=l[2];u<o&&(r.x=d,r.y=c,o=u)}}),r},_prepareArrayForTween:function(t,n,e){var r,o=[],i=[];if(t.length>n.length){var a=n;n=t,t=a}for(r=0;r<t.length;r+=2)o.push({x:t[r],y:t[r+1]});for(r=0;r<n.length;r+=2)i.push({x:n[r],y:n[r+1]});var s=[];return i.forEach(function(t){var n=Konva.Util._getProjectionToLine(t,o,e);s.push(n.x),s.push(n.y)}),s},_prepareToStringify:function(t){var n;for(var e in t.visitedByCircularReferenceRemoval=!0,t)if(t.hasOwnProperty(e)&&t[e]&&"object"==typeof t[e])if(n=Object.getOwnPropertyDescriptor(t,e),t[e].visitedByCircularReferenceRemoval||Konva.Util._isElement(t[e])){if(!n.configurable)return null;delete t[e]}else if(null===Konva.Util._prepareToStringify(t[e])){if(!n.configurable)return null;delete t[e]}return delete t.visitedByCircularReferenceRemoval,t}}}(),function(){"use strict";var t;Konva.Canvas=function(t){this.init(t)},Konva.Canvas.prototype={init:function(n){var e=(n||{}).pixelRatio||Konva.pixelRatio||function(){if(t)return t;var n=Konva.Util.createCanvasElement().getContext("2d");return t=(Konva.window.devicePixelRatio||1)/(n.webkitBackingStorePixelRatio||n.mozBackingStorePixelRatio||n.msBackingStorePixelRatio||n.oBackingStorePixelRatio||n.backingStorePixelRatio||1)}();this.pixelRatio=e,this._canvas=Konva.Util.createCanvasElement(),this._canvas.style.padding=0,this._canvas.style.margin=0,this._canvas.style.border=0,this._canvas.style.background="transparent",this._canvas.style.position="absolute",this._canvas.style.top=0,this._canvas.style.left=0},getContext:function(){return this.context},getPixelRatio:function(){return this.pixelRatio},setPixelRatio:function(t){var n=this.pixelRatio;this.pixelRatio=t,this.setSize(this.getWidth()/n,this.getHeight()/n)},setWidth:function(t){this.width=this._canvas.width=t*this.pixelRatio,this._canvas.style.width=t+"px";var n=this.pixelRatio;this.getContext()._context.scale(n,n)},setHeight:function(t){this.height=this._canvas.height=t*this.pixelRatio,this._canvas.style.height=t+"px";var n=this.pixelRatio;this.getContext()._context.scale(n,n)},getWidth:function(){return this.width},getHeight:function(){return this.height},setSize:function(t,n){this.setWidth(t),this.setHeight(n)},toDataURL:function(t,n){try{return this._canvas.toDataURL(t,n)}catch(t){try{return this._canvas.toDataURL()}catch(t){return Konva.Util.warn("Unable to get data URL. "+t.message),""}}}},Konva.SceneCanvas=function(t){var n=t||{},e=n.width||0,r=n.height||0;Konva.Canvas.call(this,n),this.context=new Konva.SceneContext(this),this.setSize(e,r)},Konva.Util.extend(Konva.SceneCanvas,Konva.Canvas),Konva.HitCanvas=function(t){var n=t||{},e=n.width||0,r=n.height||0;Konva.Canvas.call(this,n),this.context=new Konva.HitContext(this),this.setSize(e,r),this.hitCanvas=!0},Konva.Util.extend(Konva.HitCanvas,Konva.Canvas)}(),function(){"use strict";var t=["arc","arcTo","beginPath","bezierCurveTo","clearRect","clip","closePath","createLinearGradient","createPattern","createRadialGradient","drawImage","fill","fillText","getImageData","createImageData","lineTo","moveTo","putImageData","quadraticCurveTo","rect","restore","rotate","save","scale","setLineDash","setTransform","stroke","strokeText","transform","translate"];Konva.Context=function(t){this.init(t)},Konva.Context.prototype={init:function(t){this.canvas=t,this._context=t._canvas.getContext("2d"),Konva.enableTrace&&(this.traceArr=[],this._enableTrace())},fillShape:function(t){t.getFillEnabled()&&this._fill(t)},strokeShape:function(t){t.getStrokeEnabled()&&this._stroke(t)},fillStrokeShape:function(t){t.getFillEnabled()&&this._fill(t),t.getStrokeEnabled()&&this._stroke(t)},getTrace:function(t){var n,e,r,o,i=this.traceArr,a=i.length,s="";for(n=0;n<a;n++)(r=(e=i[n]).method)?(o=e.args,s+=r,t?s+="()":Konva.Util._isArray(o[0])?s+="(["+o.join(",")+"])":s+="("+o.join(",")+")"):(s+=e.property,t||(s+="="+e.val)),s+=";";return s},clearTrace:function(){this.traceArr=[]},_trace:function(t){var n=this.traceArr;n.push(t),n.length>=Konva.traceArrMax&&n.shift()},reset:function(){var t=this.getCanvas().getPixelRatio();this.setTransform(1*t,0,0,1*t,0,0)},getCanvas:function(){return this.canvas},clear:function(t){var n=this.getCanvas();t?this.clearRect(t.x||0,t.y||0,t.width||0,t.height||0):this.clearRect(0,0,n.getWidth()/n.pixelRatio,n.getHeight()/n.pixelRatio)},_applyLineCap:function(t){var n=t.getLineCap();n&&this.setAttr("lineCap",n)},_applyOpacity:function(t){var n=t.getAbsoluteOpacity();1!==n&&this.setAttr("globalAlpha",n)},_applyLineJoin:function(t){var n=t.getLineJoin();n&&this.setAttr("lineJoin",n)},setAttr:function(t,n){this._context[t]=n},arc:function(){var t=arguments;this._context.arc(t[0],t[1],t[2],t[3],t[4],t[5])},beginPath:function(){this._context.beginPath()},bezierCurveTo:function(){var t=arguments;this._context.bezierCurveTo(t[0],t[1],t[2],t[3],t[4],t[5])},clearRect:function(){var t=arguments;this._context.clearRect(t[0],t[1],t[2],t[3])},clip:function(){this._context.clip()},closePath:function(){this._context.closePath()},createImageData:function(){var t=arguments;return 2===t.length?this._context.createImageData(t[0],t[1]):1===t.length?this._context.createImageData(t[0]):void 0},createLinearGradient:function(){var t=arguments;return this._context.createLinearGradient(t[0],t[1],t[2],t[3])},createPattern:function(){var t=arguments;return this._context.createPattern(t[0],t[1])},createRadialGradient:function(){var t=arguments;return this._context.createRadialGradient(t[0],t[1],t[2],t[3],t[4],t[5])},drawImage:function(){var t=arguments,n=this._context;3===t.length?n.drawImage(t[0],t[1],t[2]):5===t.length?n.drawImage(t[0],t[1],t[2],t[3],t[4]):9===t.length&&n.drawImage(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8])},isPointInPath:function(t,n){return this._context.isPointInPath(t,n)},fill:function(){this._context.fill()},fillRect:function(t,n,e,r){this._context.fillRect(t,n,e,r)},strokeRect:function(t,n,e,r){this._context.strokeRect(t,n,e,r)},fillText:function(){var t=arguments;this._context.fillText(t[0],t[1],t[2])},measureText:function(t){return this._context.measureText(t)},getImageData:function(){var t=arguments;return this._context.getImageData(t[0],t[1],t[2],t[3])},lineTo:function(){var t=arguments;this._context.lineTo(t[0],t[1])},moveTo:function(){var t=arguments;this._context.moveTo(t[0],t[1])},rect:function(){var t=arguments;this._context.rect(t[0],t[1],t[2],t[3])},putImageData:function(){var t=arguments;this._context.putImageData(t[0],t[1],t[2])},quadraticCurveTo:function(){var t=arguments;this._context.quadraticCurveTo(t[0],t[1],t[2],t[3])},restore:function(){this._context.restore()},rotate:function(){var t=arguments;this._context.rotate(t[0])},save:function(){this._context.save()},scale:function(){var t=arguments;this._context.scale(t[0],t[1])},setLineDash:function(){var t=arguments,n=this._context;this._context.setLineDash?n.setLineDash(t[0]):"mozDash"in n?n.mozDash=t[0]:"webkitLineDash"in n&&(n.webkitLineDash=t[0])},getLineDash:function(){return this._context.getLineDash()},setTransform:function(){var t=arguments;this._context.setTransform(t[0],t[1],t[2],t[3],t[4],t[5])},stroke:function(){this._context.stroke()},strokeText:function(){var t=arguments;this._context.strokeText(t[0],t[1],t[2])},transform:function(){var t=arguments;this._context.transform(t[0],t[1],t[2],t[3],t[4],t[5])},translate:function(){var t=arguments;this._context.translate(t[0],t[1])},_enableTrace:function(){var n,e,r=this,o=t.length,i=Konva.Util._simplifyArray,a=this.setAttr,s=function(t){var n,o=r[t];r[t]=function(){return e=i(Array.prototype.slice.call(arguments,0)),n=o.apply(r,arguments),r._trace({method:t,args:e}),n}};for(n=0;n<o;n++)s(t[n]);r.setAttr=function(){a.apply(r,arguments);var t=arguments[0],n=arguments[1];"shadowOffsetX"!==t&&"shadowOffsetY"!==t&&"shadowBlur"!==t||(n/=this.canvas.getPixelRatio()),r._trace({property:t,val:n})}}},["fillStyle","strokeStyle","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","lineCap","lineDashOffset","lineJoin","lineWidth","miterLimit","font","textAlign","textBaseline","globalAlpha","globalCompositeOperation"].forEach(function(t){Object.defineProperty(Konva.Context.prototype,t,{get:function(){return this._context[t]},set:function(n){this._context[t]=n}})}),Konva.SceneContext=function(t){Konva.Context.call(this,t)},Konva.SceneContext.prototype={_fillColor:function(t){var n=t.fill();this.setAttr("fillStyle",n),t._fillFunc(this)},_fillPattern:function(t){var n=t.getFillPatternX(),e=t.getFillPatternY(),r=t.getFillPatternScale(),o=Konva.getAngle(t.getFillPatternRotation()),i=t.getFillPatternOffset();(n||e)&&this.translate(n||0,e||0),o&&this.rotate(o),r&&this.scale(r.x,r.y),i&&this.translate(-1*i.x,-1*i.y),this.setAttr("fillStyle",this.createPattern(t.getFillPatternImage(),t.getFillPatternRepeat()||"repeat")),this.fill()},_fillLinearGradient:function(t){var n=t.getFillLinearGradientStartPoint(),e=t.getFillLinearGradientEndPoint(),r=t.getFillLinearGradientColorStops(),o=this.createLinearGradient(n.x,n.y,e.x,e.y);if(r){for(var i=0;i<r.length;i+=2)o.addColorStop(r[i],r[i+1]);this.setAttr("fillStyle",o),t._fillFunc(this)}},_fillRadialGradient:function(t){for(var n=t.getFillRadialGradientStartPoint(),e=t.getFillRadialGradientEndPoint(),r=t.getFillRadialGradientStartRadius(),o=t.getFillRadialGradientEndRadius(),i=t.getFillRadialGradientColorStops(),a=this.createRadialGradient(n.x,n.y,r,e.x,e.y,o),s=0;s<i.length;s+=2)a.addColorStop(i[s],i[s+1]);this.setAttr("fillStyle",a),this.fill()},_fill:function(t){var n=t.fill(),e=t.getFillPriority();if(n&&"color"===e)this._fillColor(t);else{var r=t.getFillPatternImage();if(r&&"pattern"===e)this._fillPattern(t);else{var o=t.getFillLinearGradientColorStops();if(o&&"linear-gradient"===e)this._fillLinearGradient(t);else{var i=t.getFillRadialGradientColorStops();i&&"radial-gradient"===e?this._fillRadialGradient(t):n?this._fillColor(t):r?this._fillPattern(t):o?this._fillLinearGradient(t):i&&this._fillRadialGradient(t)}}}},_strokeLinearGradient:function(t){var n=t.getStrokeLinearGradientStartPoint(),e=t.getStrokeLinearGradientEndPoint(),r=t.getStrokeLinearGradientColorStops(),o=this.createLinearGradient(n.x,n.y,e.x,e.y);if(r){for(var i=0;i<r.length;i+=2)o.addColorStop(r[i],r[i+1]);this.setAttr("strokeStyle",o)}},_stroke:function(t){var n=t.dash(),e=t.getStrokeScaleEnabled()||t instanceof Konva.Text;if(t.hasStroke()){if(!e){this.save();var r=this.getCanvas().getPixelRatio();this.setTransform(r,0,0,r,0,0)}this._applyLineCap(t),n&&t.dashEnabled()&&(this.setLineDash(n),this.setAttr("lineDashOffset",t.dashOffset())),this.setAttr("lineWidth",t.strokeWidth()),t.getShadowForStrokeEnabled()||this.setAttr("shadowColor","rgba(0,0,0,0)"),t.getStrokeLinearGradientColorStops()?this._strokeLinearGradient(t):this.setAttr("strokeStyle",t.stroke()),t._strokeFunc(this),e||this.restore()}},_applyShadow:function(t){var n=Konva.Util,e=n.get(t.getShadowRGBA(),"black"),r=n.get(t.getShadowBlur(),5),o=n.get(t.getShadowOffset(),{x:0,y:0}),i=t.getAbsoluteScale(),a=this.canvas.getPixelRatio(),s=i.x*a,l=i.y*a;this.setAttr("shadowColor",e),this.setAttr("shadowBlur",r*Math.min(Math.abs(s),Math.abs(l))),this.setAttr("shadowOffsetX",o.x*s),this.setAttr("shadowOffsetY",o.y*l)},_applyGlobalCompositeOperation:function(t){var n=t.getGlobalCompositeOperation();"source-over"!==n&&this.setAttr("globalCompositeOperation",n)}},Konva.Util.extend(Konva.SceneContext,Konva.Context),Konva.HitContext=function(t){Konva.Context.call(this,t)},Konva.HitContext.prototype={_fill:function(t){this.save(),this.setAttr("fillStyle",t.colorKey),t._fillFuncHit(this),this.restore()},_stroke:function(t){if(t.hasStroke()&&t.strokeHitEnabled()){var n=t.getStrokeScaleEnabled()||t instanceof Konva.Text;n||(this.save(),this.setTransform(1,0,0,1,0,0)),this._applyLineCap(t),this.setAttr("lineWidth",t.strokeWidth()),this.setAttr("strokeStyle",t.colorKey),t._strokeFuncHit(this),n||this.restore()}}},Konva.Util.extend(Konva.HitContext,Konva.Context)}(),function(){"use strict";Konva.Factory={addGetterSetter:function(t,n,e,r,o){this.addGetter(t,n,e),this.addSetter(t,n,r,o),this.addOverloadedGetterSetter(t,n)},addGetter:function(t,n,e){var r="get"+Konva.Util._capitalize(n);t.prototype[r]=function(){var t=this.attrs[n];return void 0===t?e:t}},addSetter:function(t,n,e,r){var o="set"+Konva.Util._capitalize(n);t.prototype[o]=function(t){return e&&null!=t&&(t=e.call(this,t,n)),this._setAttr(n,t),r&&r.call(this),this}},addComponentsGetterSetter:function(t,n,e,r,o){var i,a,s=e.length,l=Konva.Util._capitalize,d="get"+l(n),c="set"+l(n);t.prototype[d]=function(){var t={};for(i=0;i<s;i++)t[a=e[i]]=this.getAttr(n+l(a));return t},t.prototype[c]=function(t){var e,i=this.attrs[n];for(e in r&&(t=r.call(this,t)),t)t.hasOwnProperty(e)&&this._setAttr(n+l(e),t[e]);return this._fireChangeEvent(n,i,t),o&&o.call(this),this},this.addOverloadedGetterSetter(t,n)},addOverloadedGetterSetter:function(t,n){var e=Konva.Util._capitalize(n),r="set"+e,o="get"+e;t.prototype[n]=function(){return arguments.length?(this[r](arguments[0]),this):this[o]()}},addDeprecatedGetterSetter:function(t,n,e,r){Konva.Util.error("Adding deprecated "+n);var o="get"+Konva.Util._capitalize(n),i=n+" property is deprecated and will be removed soon. Look at Konva change log for more information.";t.prototype[o]=function(){Konva.Util.error(i);var t=this.attrs[n];return void 0===t?e:t},this.addSetter(t,n,r,function(){Konva.Util.error(i)}),this.addOverloadedGetterSetter(t,n)},backCompat:function(t,n){Konva.Util.each(n,function(n,e){var r=t.prototype[e],o="get"+Konva.Util._capitalize(n),i="set"+Konva.Util._capitalize(n);function a(){r.apply(this,arguments),Konva.Util.error('"'+n+'" method is deprecated and will be removed soon. Use ""'+e+'" instead.')}t.prototype[n]=a,t.prototype[o]=a,t.prototype[i]=a})},afterSetFilter:function(){this._filterUpToDate=!1}},Konva.Validators={RGBComponent:function(t){return t>255?255:t<0?0:Math.round(t)},alphaComponent:function(t){return t>1?1:t<1e-4?1e-4:t},_formatValue:function(t){return Konva.Util._isString(t)?'"'+t+'"':"[object Number]"===Object.prototype.toString.call(t)?t:Konva.Util._isBoolean(t)?t:Object.prototype.toString.call(t)},getNumberValidator:function(){if(Konva.isUnminified)return function(t,n){return Konva.Util._isNumber(t)||Konva.Util.warn(Konva.Validators._formatValue(t)+' is a not valid value for "'+n+'" attribute. The value should be a number.'),t}},getNumberOrAutoValidator:function(){if(Konva.isUnminified)return function(t,n){return Konva.Util._isNumber(t)||"auto"===t||Konva.Util.warn(Konva.Validators._formatValue(t)+' is a not valid value for "'+n+'" attribute. The value should be a number or "auto".'),t}},getStringValidator:function(){if(Konva.isUnminified)return function(t,n){return Konva.Util._isString(t)||Konva.Util.warn(Konva.Validators._formatValue(t)+' is a not valid value for "'+n+'" attribute. The value should be a string.'),t}},getFunctionValidator:function(){if(Konva.isUnminified)return function(t,n){return Konva.Util._isFunction(t)||Konva.Util.warn(Konva.Validators._formatValue(t)+' is a not valid value for "'+n+'" attribute. The value should be a function.'),t}},getNumberArrayValidator:function(){if(Konva.isUnminified)return function(t,n){return Konva.Util._isArray(t)?t.forEach(function(t){Konva.Util._isNumber(t)||Konva.Util.warn('"'+n+'" attribute has non numeric element '+t+". Make sure that all elements are numbers.")}):Konva.Util.warn(Konva.Validators._formatValue(t)+' is a not valid value for "'+n+'" attribute. The value should be a array of numbers.'),t}},getBooleanValidator:function(){if(Konva.isUnminified)return function(t,n){return!0===t||!1===t||Konva.Util.warn(Konva.Validators._formatValue(t)+' is a not valid value for "'+n+'" attribute. The value should be a boolean.'),t}}}}(),function(t){"use strict";var n="Shape",e=["id"],r=["xChange.konva","yChange.konva","scaleXChange.konva","scaleYChange.konva","skewXChange.konva","skewYChange.konva","rotationChange.konva","offsetXChange.konva","offsetYChange.konva","transformsEnabledChange.konva"].join(" "),o=["scaleXChange.konva","scaleYChange.konva"].join(" ");t.Node=function(t){this._init(t)},t.Util.addMethods(t.Node,{_init:function(n){this._id=t.idCounter++,this.eventListeners={},this.attrs={},this._cache={},this._filterUpToDate=!1,this._isUnderCache=!1,this.setAttrs(n),this.on(r,function(){this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform")}),this.on(o,function(){this._clearSelfAndDescendantCache("absoluteScale")}),this.on("visibleChange.konva",function(){this._clearSelfAndDescendantCache("visible")}),this.on("listeningChange.konva",function(){this._clearSelfAndDescendantCache("listening")}),this.on("opacityChange.konva",function(){this._clearSelfAndDescendantCache("absoluteOpacity")})},_clearCache:function(t){t?delete this._cache[t]:this._cache={}},_getCache:function(t,n){return void 0===this._cache[t]&&(this._cache[t]=n.call(this)),this._cache[t]},_clearSelfAndDescendantCache:function(t){this._clearCache(t),this._cache.canvas||this.children&&this.getChildren().each(function(n){n._clearSelfAndDescendantCache(t)})},clearCache:function(){return delete this._cache.canvas,this._filterUpToDate=!1,this._clearSelfAndDescendantCache(),this},cache:function(n){var e=n||{},r={};void 0!==e.x&&void 0!==e.y&&void 0!==e.width&&void 0!==e.height||(r=this.getClientRect({skipTransform:!0,relativeTo:this.getParent()}));var o=e.width||r.width,i=e.height||r.height,a=e.pixelRatio,s=void 0===e.x?r.x:e.x,l=void 0===e.y?r.y:e.y,d=e.offset||0,c=e.drawBorder||!1;if(o&&i){o+=2*d,i+=2*d,s-=d,l-=d;var u=new t.SceneCanvas({pixelRatio:a,width:o,height:i}),h=new t.SceneCanvas({pixelRatio:a,width:o,height:i}),f=new t.HitCanvas({pixelRatio:1,width:o,height:i}),p=u.getContext(),m=f.getContext();return f.isCache=!0,this.clearCache(),p.save(),m.save(),p.translate(-s,-l),m.translate(-s,-l),this._isUnderCache=!0,this._clearSelfAndDescendantCache("absoluteOpacity"),this._clearSelfAndDescendantCache("absoluteScale"),this.drawScene(u,this,!0),this.drawHit(f,this,!0),this._isUnderCache=!1,p.restore(),m.restore(),c&&(p.save(),p.beginPath(),p.rect(0,0,o,i),p.closePath(),p.setAttr("strokeStyle","red"),p.setAttr("lineWidth",5),p.stroke(),p.restore()),this._cache.canvas={scene:u,filter:h,hit:f,x:s,y:l},this}t.Util.error("Can not cache the node. Width or height of the node equals 0. Caching is skipped.")},getClientRect:function(){throw new Error('abstract "getClientRect" method call')},_transformedRect:function(t,n){var e,r,o,i,a=[{x:t.x,y:t.y},{x:t.x+t.width,y:t.y},{x:t.x+t.width,y:t.y+t.height},{x:t.x,y:t.y+t.height}],s=this.getAbsoluteTransform(n);return a.forEach(function(t){var n=s.point(t);void 0===e&&(e=o=n.x,r=i=n.y),e=Math.min(e,n.x),r=Math.min(r,n.y),o=Math.max(o,n.x),i=Math.max(i,n.y)}),{x:e,y:r,width:o-e,height:i-r}},_drawCachedSceneCanvas:function(t){t.save(),t._applyOpacity(this),t._applyGlobalCompositeOperation(this),t.translate(this._cache.canvas.x,this._cache.canvas.y);var n=this._getCachedSceneCanvas(),e=n.pixelRatio;t.drawImage(n._canvas,0,0,n.width/e,n.height/e),t.restore()},_drawCachedHitCanvas:function(t){var n=this._cache.canvas.hit;t.save(),t.translate(this._cache.canvas.x,this._cache.canvas.y),t.drawImage(n._canvas,0,0),t.restore()},_getCachedSceneCanvas:function(){var n,e,r,o,i=this.filters(),a=this._cache.canvas,s=a.scene,l=a.filter,d=l.getContext();if(i){if(!this._filterUpToDate){var c=s.pixelRatio;try{for(n=i.length,d.clear(),d.drawImage(s._canvas,0,0,s.getWidth()/c,s.getHeight()/c),e=d.getImageData(0,0,l.getWidth(),l.getHeight()),r=0;r<n;r++)"function"==typeof(o=i[r])?(o.call(this,e),d.putImageData(e,0,0)):t.Util.error("Filter should be type of function, but got "+typeof o+" insted. Please check correct filters")}catch(n){t.Util.error("Unable to apply filter. "+n.message)}this._filterUpToDate=!0}return l}return s},on:function(t,n){if(3===arguments.length)return this._delegate.apply(this,arguments);var e,r,o,i,a=t.split(" "),s=a.length;for(e=0;e<s;e++)o=(r=a[e].split("."))[0],i=r[1]||"",this.eventListeners[o]||(this.eventListeners[o]=[]),this.eventListeners[o].push({name:i,handler:n});return this},off:function(t,n){var e,r,o,i,a,s=(t||"").split(" "),l=s.length;if(!t)for(r in this.eventListeners)this._off(r);for(e=0;e<l;e++)if(i=(o=s[e].split("."))[0],a=o[1],i)this.eventListeners[i]&&this._off(i,a,n);else for(r in this.eventListeners)this._off(r,a,n);return this},dispatchEvent:function(t){var n={target:this,type:t.type,evt:t};return this.fire(t.type,n),this},addEventListener:function(t,n){return this.on(t,function(t){n.call(this,t.evt)}),this},removeEventListener:function(t){return this.off(t),this},_delegate:function(n,e,r){var o=this;this.on(n,function(n){for(var i=n.target.findAncestors(e,!0,o),a=0;a<i.length;a++)(n=t.Util.cloneObject(n)).currentTarget=i[a],r.call(i[a],n)})},remove:function(){var t=this.getParent();return t&&t.children&&(t.children.splice(this.index,1),t._setChildrenIndices(),delete this.parent),this._clearSelfAndDescendantCache("stage"),this._clearSelfAndDescendantCache("absoluteTransform"),this._clearSelfAndDescendantCache("visible"),this._clearSelfAndDescendantCache("listening"),this._clearSelfAndDescendantCache("absoluteOpacity"),this},destroy:function(){t._removeId(this.getId());for(var n=(this.getName()||"").split(/\s/g),e=0;e<n.length;e++){var r=n[e];t._removeName(r,this._id)}return this.remove(),this},getAttr:function(n){var e="get"+t.Util._capitalize(n);return t.Util._isFunction(this[e])?this[e]():this.attrs[n]},getAncestors:function(){for(var n=this.getParent(),e=new t.Collection;n;)e.push(n),n=n.getParent();return e},getAttrs:function(){return this.attrs||{}},setAttrs:function(n){var e,r;if(!n)return this;for(e in n)"children"!==e&&(r="set"+t.Util._capitalize(e),t.Util._isFunction(this[r])?this[r](n[e]):this._setAttr(e,n[e]));return this},isListening:function(){return this._getCache("listening",this._isListening)},_isListening:function(){var t=this.getListening(),n=this.getParent();return"inherit"===t?!n||n.isListening():t},isVisible:function(){return this._getCache("visible",this._isVisible)},_isVisible:function(t){var n=this.getVisible(),e=this.getParent();return t===e&&"inherit"===n||(t===e?n:"inherit"===n?!e||e._isVisible(t):n)},shouldDrawHit:function(){var t=this.getLayer();return!t&&this.isListening()&&this.isVisible()||t&&t.hitGraphEnabled()&&this.isListening()&&this.isVisible()},show:function(){return this.setVisible(!0),this},hide:function(){return this.setVisible(!1),this},getZIndex:function(){return this.index||0},getAbsoluteZIndex:function(){var t,e,r,o,i=this.getDepth(),a=this,s=0;return"Stage"!==a.nodeType&&function l(d){for(t=[],e=d.length,r=0;r<e;r++)o=d[r],s++,o.nodeType!==n&&(t=t.concat(o.getChildren().toArray())),o._id===a._id&&(r=e);t.length>0&&t[0].getDepth()<=i&&l(t)}(a.getStage().getChildren()),s},getDepth:function(){for(var t=0,n=this.parent;n;)t++,n=n.parent;return t},setPosition:function(t){return this.setX(t.x),this.setY(t.y),this},getPosition:function(){return{x:this.getX(),y:this.getY()}},getAbsolutePosition:function(n){var e=this.getAbsoluteTransform(n).getMatrix(),r=new t.Transform,o=this.offset();return r.m=e.slice(),r.translate(o.x,o.y),r.getTranslation()},setAbsolutePosition:function(t){var n,e=this._clearTransform();return this.attrs.x=e.x,this.attrs.y=e.y,delete e.x,delete e.y,(n=this.getAbsoluteTransform()).invert(),n.translate(t.x,t.y),t={x:this.attrs.x+n.getTranslation().x,y:this.attrs.y+n.getTranslation().y},this.setPosition({x:t.x,y:t.y}),this._setTransform(e),this},_setTransform:function(t){var n;for(n in t)this.attrs[n]=t[n];this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform")},_clearTransform:function(){var t={x:this.getX(),y:this.getY(),rotation:this.getRotation(),scaleX:this.getScaleX(),scaleY:this.getScaleY(),offsetX:this.getOffsetX(),offsetY:this.getOffsetY(),skewX:this.getSkewX(),skewY:this.getSkewY()};return this.attrs.x=0,this.attrs.y=0,this.attrs.rotation=0,this.attrs.scaleX=1,this.attrs.scaleY=1,this.attrs.offsetX=0,this.attrs.offsetY=0,this.attrs.skewX=0,this.attrs.skewY=0,this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform"),t},move:function(t){var n=t.x,e=t.y,r=this.getX(),o=this.getY();return void 0!==n&&(r+=n),void 0!==e&&(o+=e),this.setPosition({x:r,y:o}),this},_eachAncestorReverse:function(t,n){var e,r,o=[],i=this.getParent();if(n&&n._id===this._id)t(this);else{for(o.unshift(this);i&&(!n||i._id!==n._id);)o.unshift(i),i=i.parent;for(e=o.length,r=0;r<e;r++)t(o[r])}},rotate:function(t){return this.setRotation(this.getRotation()+t),this},moveToTop:function(){if(!this.parent)return t.Util.warn("Node has no parent. moveToTop function is ignored."),!1;var n=this.index;return this.parent.children.splice(n,1),this.parent.children.push(this),this.parent._setChildrenIndices(),!0},moveUp:function(){if(!this.parent)return t.Util.warn("Node has no parent. moveUp function is ignored."),!1;var n=this.index;return n<this.parent.getChildren().length-1&&(this.parent.children.splice(n,1),this.parent.children.splice(n+1,0,this),this.parent._setChildrenIndices(),!0)},moveDown:function(){if(!this.parent)return t.Util.warn("Node has no parent. moveDown function is ignored."),!1;var n=this.index;return n>0&&(this.parent.children.splice(n,1),this.parent.children.splice(n-1,0,this),this.parent._setChildrenIndices(),!0)},moveToBottom:function(){if(!this.parent)return t.Util.warn("Node has no parent. moveToBottom function is ignored."),!1;var n=this.index;return n>0&&(this.parent.children.splice(n,1),this.parent.children.unshift(this),this.parent._setChildrenIndices(),!0)},setZIndex:function(n){if(!this.parent)return t.Util.warn("Node has no parent. zIndex parameter is ignored."),!1;var e=this.index;return this.parent.children.splice(e,1),this.parent.children.splice(n,0,this),this.parent._setChildrenIndices(),this},getAbsoluteOpacity:function(){return this._getCache("absoluteOpacity",this._getAbsoluteOpacity)},_getAbsoluteOpacity:function(){var t=this.getOpacity(),n=this.getParent();return n&&!n._isUnderCache&&(t*=this.getParent().getAbsoluteOpacity()),t},moveTo:function(t){return this.getParent()!==t&&((this.__originalRemove||this.remove).call(this),t.add(this)),this},toObject:function(){var n,e,r,o,i={},a=this.getAttrs();for(n in i.attrs={},a)e=a[n],r="function"==typeof this[n]&&this[n],delete a[n],o=r?r.call(this):null,a[n]=e,o!==e&&(i.attrs[n]=e);return i.className=this.getClassName(),t.Util._prepareToStringify(i)},toJSON:function(){return JSON.stringify(this.toObject())},getParent:function(){return this.parent},findAncestors:function(t,n,e){var r=[];n&&this._isMatch(t)&&r.push(this);for(var o=this.parent;o;){if(o===e)return r;o._isMatch(t)&&r.push(o),o=o.parent}return r},findAncestor:function(t,n,e){return this.findAncestors(t,n,e)[0]},_isMatch:function(n){if(!n)return!1;var e,r,o=n.replace(/ /g,"").split(","),i=o.length;for(e=0;e<i;e++)if(r=o[e],t.Util.isValidSelector(r)||(t.Util.warn('Selector "'+r+'" is invalid. Allowed selectors examples are "#foo", ".bar" or "Group".'),t.Util.warn('If you have a custom shape with such className, please change it to start with upper letter like "Triangle".'),t.Util.warn("Konva is awesome, right?")),"#"===r.charAt(0)){if(this.id()===r.slice(1))return!0}else if("."===r.charAt(0)){if(this.hasName(r.slice(1)))return!0}else if(0!==this._get(r).length)return!0;return!1},getLayer:function(){var t=this.getParent();return t?t.getLayer():null},getStage:function(){return this._getCache("stage",this._getStage)},_getStage:function(){var t=this.getParent();return t?t.getStage():void 0},fire:function(t,n,e){return(n=n||{}).target=n.target||this,e?this._fireAndBubble(t,n):this._fire(t,n),this},getAbsoluteTransform:function(t){return t?this._getAbsoluteTransform(t):this._getCache("absoluteTransform",this._getAbsoluteTransform)},_getAbsoluteTransform:function(n){var e=new t.Transform;return this._eachAncestorReverse(function(t){var n=t.transformsEnabled();"all"===n?e.multiply(t.getTransform()):"position"===n&&e.translate(t.getX()-t.getOffsetX(),t.getY()-t.getOffsetY())},n),e},getAbsoluteScale:function(t){return t?this._getAbsoluteScale(t):this._getCache("absoluteScale",this._getAbsoluteScale)},_getAbsoluteScale:function(t){for(var n=this;n;)n._isUnderCache&&(t=n),n=n.getParent();var e=1,r=1;return this._eachAncestorReverse(function(t){e*=t.scaleX(),r*=t.scaleY()},t),{x:e,y:r}},getTransform:function(){return this._getCache("transform",this._getTransform)},_getTransform:function(){var n=new t.Transform,e=this.getX(),r=this.getY(),o=t.getAngle(this.getRotation()),i=this.getScaleX(),a=this.getScaleY(),s=this.getSkewX(),l=this.getSkewY(),d=this.getOffsetX(),c=this.getOffsetY();return 0===e&&0===r||n.translate(e,r),0!==o&&n.rotate(o),0===s&&0===l||n.skew(s,l),1===i&&1===a||n.scale(i,a),0===d&&0===c||n.translate(-1*d,-1*c),n},clone:function(n){var r,o,i,a,s,l=t.Util.cloneObject(this.attrs);for(var d in e){delete l[e[d]]}for(r in n)l[r]=n[r];var c=new this.constructor(l);for(r in this.eventListeners)for(i=(o=this.eventListeners[r]).length,a=0;a<i;a++)(s=o[a]).name.indexOf("konva")<0&&(c.eventListeners[r]||(c.eventListeners[r]=[]),c.eventListeners[r].push(s));return c},_toKonvaCanvas:function(n){n=n||{};var e=this.getClientRect(),r=this.getStage(),o=void 0!==n.x?n.x:e.x,i=void 0!==n.y?n.y:e.y,a=n.pixelRatio||1,s=new t.SceneCanvas({width:n.width||e.width||(r?r.getWidth():0),height:n.height||e.height||(r?r.getHeight():0),pixelRatio:a}),l=s.getContext();return l.save(),(o||i)&&l.translate(-1*o,-1*i),this.drawScene(s),l.restore(),s},toCanvas:function(t){return this._toKonvaCanvas(t)._canvas},toDataURL:function(t){var n=(t=t||{}).mimeType||null,e=t.quality||null,r=this._toKonvaCanvas(t).toDataURL(n,e);return t.callback&&t.callback(r),r},toImage:function(n){if(!n||!n.callback)throw"callback required for toImage method config argument";var e=n.callback;delete n.callback,t.Util._getImage(this.toDataURL(n),function(t){e(t)})},setSize:function(t){return this.setWidth(t.width),this.setHeight(t.height),this},getSize:function(){return{width:this.getWidth(),height:this.getHeight()}},getWidth:function(){return this.attrs.width||0},getHeight:function(){return this.attrs.height||0},getClassName:function(){return this.className||this.nodeType},getType:function(){return this.nodeType},getDragDistance:function(){return void 0!==this.attrs.dragDistance?this.attrs.dragDistance:this.parent?this.parent.getDragDistance():t.dragDistance},_get:function(t){return this.className===t||this.nodeType===t?[this]:[]},_off:function(t,n,e){var r,o,i,a=this.eventListeners[t];for(r=0;r<a.length;r++)if(o=a[r].name,i=a[r].handler,!("konva"===o&&"konva"!==n||n&&o!==n||e&&e!==i)){if(a.splice(r,1),0===a.length){delete this.eventListeners[t];break}r--}},_fireChangeEvent:function(t,n,e){this._fire(t+"Change",{oldVal:n,newVal:e})},setId:function(n){var e=this.getId();return t._removeId(e),t._addId(this,n),this._setAttr("id",n),this},setName:function(n){var e,r,o=(this.getName()||"").split(/\s/g),i=(n||"").split(/\s/g);for(r=0;r<o.length;r++)e=o[r],-1===i.indexOf(e)&&e&&t._removeName(e,this._id);for(r=0;r<i.length;r++)e=i[r],-1===o.indexOf(e)&&e&&t._addName(this,e);return this._setAttr("name",n),this},addName:function(t){if(!this.hasName(t)){var n=this.name(),e=n?n+" "+t:t;this.setName(e)}return this},hasName:function(t){return-1!==(this.name()||"").split(/\s/g).indexOf(t)},removeName:function(t){var n=(this.name()||"").split(/\s/g),e=n.indexOf(t);return-1!==e&&(n.splice(e,1),this.setName(n.join(" "))),this},setAttr:function(n,e){var r=this["set"+t.Util._capitalize(n)];return t.Util._isFunction(r)?r.call(this,e):this._setAttr(n,e),this},_setAttr:function(n,e){var r;(r=this.attrs[n])===e&&!t.Util.isObject(e)||(null==e?delete this.attrs[n]:this.attrs[n]=e,this._fireChangeEvent(n,r,e))},_setComponentAttr:function(t,n,e){var r;void 0!==e&&((r=this.attrs[t])||(this.attrs[t]=this.getAttr(t)),this.attrs[t][n]=e,this._fireChangeEvent(t,r,e))},_fireAndBubble:function(t,e,r){var o=!0;if(e&&this.nodeType===n&&(e.target=this),"mouseenter"===t&&r&&(this._id===r._id||this.isAncestorOf&&this.isAncestorOf(r))?o=!1:"mouseleave"===t&&r&&(this._id===r._id||this.isAncestorOf&&this.isAncestorOf(r))&&(o=!1),o){this._fire(t,e);var i=("mouseenter"===t||"mouseleave"===t)&&r&&r.isAncestorOf&&r.isAncestorOf(this)&&!r.isAncestorOf(this.parent);(e&&!e.cancelBubble||!e)&&this.parent&&this.parent.isListening()&&!i&&(r&&r.parent?this._fireAndBubble.call(this.parent,t,e,r.parent):this._fireAndBubble.call(this.parent,t,e))}},_fire:function(t,n){var e,r=this.eventListeners[t];if((n=n||{}).currentTarget=this,n.type=t,r)for(e=0;e<r.length;e++)r[e].handler.call(this,n)},draw:function(){return this.drawScene(),this.drawHit(),this}}),t.Node.create=function(n,e){return t.Util._isString(n)&&(n=JSON.parse(n)),this._createNode(n,e)},t.Node._createNode=function(n,e){var r,o,i,a=t.Node.prototype.getClassName.call(n),s=n.children;if(e&&(n.attrs.container=e),r=new t[a](n.attrs),s)for(o=s.length,i=0;i<o;i++)r.add(this._createNode(s[i]));return r},t.Factory.addOverloadedGetterSetter(t.Node,"position"),t.Factory.addGetterSetter(t.Node,"x",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Node,"y",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Node,"globalCompositeOperation","source-over",t.Validators.getStringValidator()),t.Factory.addGetterSetter(t.Node,"opacity",1,t.Validators.getNumberValidator()),t.Factory.addGetter(t.Node,"name"),t.Factory.addOverloadedGetterSetter(t.Node,"name"),t.Factory.addGetter(t.Node,"id"),t.Factory.addOverloadedGetterSetter(t.Node,"id"),t.Factory.addGetterSetter(t.Node,"rotation",0,t.Validators.getNumberValidator()),t.Factory.addComponentsGetterSetter(t.Node,"scale",["x","y"]),t.Factory.addGetterSetter(t.Node,"scaleX",1,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Node,"scaleY",1,t.Validators.getNumberValidator()),t.Factory.addComponentsGetterSetter(t.Node,"skew",["x","y"]),t.Factory.addGetterSetter(t.Node,"skewX",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Node,"skewY",0,t.Validators.getNumberValidator()),t.Factory.addComponentsGetterSetter(t.Node,"offset",["x","y"]),t.Factory.addGetterSetter(t.Node,"offsetX",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Node,"offsetY",0,t.Validators.getNumberValidator()),t.Factory.addSetter(t.Node,"dragDistance",t.Validators.getNumberValidator()),t.Factory.addOverloadedGetterSetter(t.Node,"dragDistance"),t.Factory.addSetter(t.Node,"width",t.Validators.getNumberValidator()),t.Factory.addOverloadedGetterSetter(t.Node,"width"),t.Factory.addSetter(t.Node,"height",t.Validators.getNumberValidator()),t.Factory.addOverloadedGetterSetter(t.Node,"height"),t.Factory.addGetterSetter(t.Node,"listening","inherit",function(n){return!0===n||!1===n||"inherit"===n||t.Util.warn(n+' is a not valid value for "listening" attribute. The value may be true, false or "inherit".'),n}),t.Factory.addGetterSetter(t.Node,"preventDefault",!0,t.Validators.getBooleanValidator()),t.Factory.addGetterSetter(t.Node,"filters",null,function(t){return this._filterUpToDate=!1,t}),t.Factory.addGetterSetter(t.Node,"visible","inherit",function(n){return!0===n||!1===n||"inherit"===n||t.Util.warn(n+' is a not valid value for "visible" attribute. The value may be true, false or "inherit".'),n}),t.Factory.addGetterSetter(t.Node,"transformsEnabled","all",t.Validators.getStringValidator()),t.Factory.addOverloadedGetterSetter(t.Node,"size"),t.Factory.backCompat(t.Node,{rotateDeg:"rotate",setRotationDeg:"setRotation",getRotationDeg:"getRotation"}),t.Collection.mapMethods(t.Node)}(Konva),function(){"use strict";Konva.Filters.Grayscale=function(t){var n,e,r=t.data,o=r.length;for(n=0;n<o;n+=4)e=.34*r[n]+.5*r[n+1]+.16*r[n+2],r[n]=e,r[n+1]=e,r[n+2]=e}}(),function(t){"use strict";t.Filters.Brighten=function(t){var n,e=255*this.brightness(),r=t.data,o=r.length;for(n=0;n<o;n+=4)r[n]+=e,r[n+1]+=e,r[n+2]+=e},t.Factory.addGetterSetter(t.Node,"brightness",0,t.Validators.getNumberValidator(),t.Factory.afterSetFilter)}(Konva),function(){"use strict";Konva.Filters.Invert=function(t){var n,e=t.data,r=e.length;for(n=0;n<r;n+=4)e[n]=255-e[n],e[n+1]=255-e[n+1],e[n+2]=255-e[n+2]}}(),function(t){"use strict";function n(){this.r=0,this.g=0,this.b=0,this.a=0,this.next=null}var e=[512,512,456,512,328,456,335,512,405,328,271,456,388,335,292,512,454,405,364,328,298,271,496,456,420,388,360,335,312,292,273,512,482,454,428,405,383,364,345,328,312,298,284,271,259,496,475,456,437,420,404,388,374,360,347,335,323,312,302,292,282,273,265,512,497,482,468,454,441,428,417,405,394,383,373,364,354,345,337,328,320,312,305,298,291,284,278,271,265,259,507,496,485,475,465,456,446,437,428,420,412,404,396,388,381,374,367,360,354,347,341,335,329,323,318,312,307,302,297,292,287,282,278,273,269,265,261,512,505,497,489,482,475,468,461,454,447,441,435,428,422,417,411,405,399,394,389,383,378,373,368,364,359,354,350,345,341,337,332,328,324,320,316,312,309,305,301,298,294,291,287,284,281,278,274,271,268,265,262,259,257,507,501,496,491,485,480,475,470,465,460,456,451,446,442,437,433,428,424,420,416,412,408,404,400,396,392,388,385,381,377,374,370,367,363,360,357,354,350,347,344,341,338,335,332,329,326,323,320,318,315,312,310,307,304,302,299,297,294,292,289,287,285,282,280,278,275,273,271,269,267,265,263,261,259],r=[9,11,12,13,13,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24];t.Filters.Blur=function(t){var o=Math.round(this.blurRadius());o>0&&function(t,o){var i,a,s,l,d,c,u,h,f,p,m,g,b,v,x,y,w,_,k,S,C,T,E,A,K=t.data,N=t.width,D=t.height,O=o+o+1,P=N-1,I=D-1,L=o+1,F=L*(L+1)/2,M=new n,R=null,j=M,G=null,H=null,U=e[o],V=r[o];for(s=1;s<O;s++)j=j.next=new n,s===L&&(R=j);for(j.next=M,u=c=0,a=0;a<D;a++){for(y=w=_=k=h=f=p=m=0,g=L*(S=K[c]),b=L*(C=K[c+1]),v=L*(T=K[c+2]),x=L*(E=K[c+3]),h+=F*S,f+=F*C,p+=F*T,m+=F*E,j=M,s=0;s<L;s++)j.r=S,j.g=C,j.b=T,j.a=E,j=j.next;for(s=1;s<L;s++)l=c+((P<s?P:s)<<2),h+=(j.r=S=K[l])*(A=L-s),f+=(j.g=C=K[l+1])*A,p+=(j.b=T=K[l+2])*A,m+=(j.a=E=K[l+3])*A,y+=S,w+=C,_+=T,k+=E,j=j.next;for(G=M,H=R,i=0;i<N;i++)K[c+3]=E=m*U>>V,0!==E?(E=255/E,K[c]=(h*U>>V)*E,K[c+1]=(f*U>>V)*E,K[c+2]=(p*U>>V)*E):K[c]=K[c+1]=K[c+2]=0,h-=g,f-=b,p-=v,m-=x,g-=G.r,b-=G.g,v-=G.b,x-=G.a,l=u+((l=i+o+1)<P?l:P)<<2,h+=y+=G.r=K[l],f+=w+=G.g=K[l+1],p+=_+=G.b=K[l+2],m+=k+=G.a=K[l+3],G=G.next,g+=S=H.r,b+=C=H.g,v+=T=H.b,x+=E=H.a,y-=S,w-=C,_-=T,k-=E,H=H.next,c+=4;u+=N}for(i=0;i<N;i++){for(w=_=k=y=f=p=m=h=0,g=L*(S=K[c=i<<2]),b=L*(C=K[c+1]),v=L*(T=K[c+2]),x=L*(E=K[c+3]),h+=F*S,f+=F*C,p+=F*T,m+=F*E,j=M,s=0;s<L;s++)j.r=S,j.g=C,j.b=T,j.a=E,j=j.next;for(d=N,s=1;s<=o;s++)c=d+i<<2,h+=(j.r=S=K[c])*(A=L-s),f+=(j.g=C=K[c+1])*A,p+=(j.b=T=K[c+2])*A,m+=(j.a=E=K[c+3])*A,y+=S,w+=C,_+=T,k+=E,j=j.next,s<I&&(d+=N);for(c=i,G=M,H=R,a=0;a<D;a++)K[3+(l=c<<2)]=E=m*U>>V,E>0?(E=255/E,K[l]=(h*U>>V)*E,K[l+1]=(f*U>>V)*E,K[l+2]=(p*U>>V)*E):K[l]=K[l+1]=K[l+2]=0,h-=g,f-=b,p-=v,m-=x,g-=G.r,b-=G.g,v-=G.b,x-=G.a,l=i+((l=a+L)<I?l:I)*N<<2,h+=y+=G.r=K[l],f+=w+=G.g=K[l+1],p+=_+=G.b=K[l+2],m+=k+=G.a=K[l+3],G=G.next,g+=S=H.r,b+=C=H.g,v+=T=H.b,x+=E=H.a,y-=S,w-=C,_-=T,k-=E,H=H.next,c+=N}}(t,o)},t.Factory.addGetterSetter(t.Node,"blurRadius",0,t.Validators.getNumberValidator(),t.Factory.afterSetFilter)}(Konva),function(){"use strict";function t(t,n,e){var r=4*(e*t.width+n),o=[];return o.push(t.data[r++],t.data[r++],t.data[r++],t.data[r++]),o}function n(t,n){return Math.sqrt(Math.pow(t[0]-n[0],2)+Math.pow(t[1]-n[1],2)+Math.pow(t[2]-n[2],2))}Konva.Filters.Mask=function(e){var r=function(e,r){var o=t(e,0,0),i=t(e,e.width-1,0),a=t(e,0,e.height-1),s=t(e,e.width-1,e.height-1),l=r||10;if(n(o,i)<l&&n(i,s)<l&&n(s,a)<l&&n(a,o)<l){for(var d=function(t){for(var n=[0,0,0],e=0;e<t.length;e++)n[0]+=t[e][0],n[1]+=t[e][1],n[2]+=t[e][2];return n[0]/=t.length,n[1]/=t.length,n[2]/=t.length,n}([i,o,s,a]),c=[],u=0;u<e.width*e.height;u++){var h=n(d,[e.data[4*u],e.data[4*u+1],e.data[4*u+2]]);c[u]=h<l?0:255}return c}}(e,this.threshold());return r&&function(t,n){for(var e=0;e<t.width*t.height;e++)t.data[4*e+3]=n[e]}(e,r=function(t,n,e){for(var r=[1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9],o=Math.round(Math.sqrt(r.length)),i=Math.floor(o/2),a=[],s=0;s<e;s++)for(var l=0;l<n;l++){for(var d=s*n+l,c=0,u=0;u<o;u++)for(var h=0;h<o;h++){var f=s+u-i,p=l+h-i;if(f>=0&&f<e&&p>=0&&p<n){var m=r[u*o+h];c+=t[f*n+p]*m}}a[d]=c}return a}(r=function(t,n,e){for(var r=[1,1,1,1,1,1,1,1,1],o=Math.round(Math.sqrt(r.length)),i=Math.floor(o/2),a=[],s=0;s<e;s++)for(var l=0;l<n;l++){for(var d=s*n+l,c=0,u=0;u<o;u++)for(var h=0;h<o;h++){var f=s+u-i,p=l+h-i;if(f>=0&&f<e&&p>=0&&p<n){var m=r[u*o+h];c+=t[f*n+p]*m}}a[d]=c>=1020?255:0}return a}(r=function(t,n,e){for(var r=[1,1,1,1,0,1,1,1,1],o=Math.round(Math.sqrt(r.length)),i=Math.floor(o/2),a=[],s=0;s<e;s++)for(var l=0;l<n;l++){for(var d=s*n+l,c=0,u=0;u<o;u++)for(var h=0;h<o;h++){var f=s+u-i,p=l+h-i;if(f>=0&&f<e&&p>=0&&p<n){var m=r[u*o+h];c+=t[f*n+p]*m}}a[d]=2040===c?255:0}return a}(r,e.width,e.height),e.width,e.height),e.width,e.height)),e},Konva.Factory.addGetterSetter(Konva.Node,"threshold",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter)}(),function(){"use strict";Konva.Filters.RGB=function(t){var n,e,r=t.data,o=r.length,i=this.red(),a=this.green(),s=this.blue();for(n=0;n<o;n+=4)e=(.34*r[n]+.5*r[n+1]+.16*r[n+2])/255,r[n]=e*i,r[n+1]=e*a,r[n+2]=e*s,r[n+3]=r[n+3]},Konva.Factory.addGetterSetter(Konva.Node,"red",0,function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)}),Konva.Factory.addGetterSetter(Konva.Node,"green",0,function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)}),Konva.Factory.addGetterSetter(Konva.Node,"blue",0,Konva.Validators.RGBComponent,Konva.Factory.afterSetFilter)}(),function(){"use strict";Konva.Filters.RGBA=function(t){var n,e,r=t.data,o=r.length,i=this.red(),a=this.green(),s=this.blue(),l=this.alpha();for(n=0;n<o;n+=4)e=1-l,r[n]=i*l+r[n]*e,r[n+1]=a*l+r[n+1]*e,r[n+2]=s*l+r[n+2]*e},Konva.Factory.addGetterSetter(Konva.Node,"red",0,function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)}),Konva.Factory.addGetterSetter(Konva.Node,"green",0,function(t){return this._filterUpToDate=!1,t>255?255:t<0?0:Math.round(t)}),Konva.Factory.addGetterSetter(Konva.Node,"blue",0,Konva.Validators.RGBComponent,Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"alpha",1,function(t){return this._filterUpToDate=!1,t>1?1:t<0?0:t})}(),function(){"use strict";Konva.Filters.HSV=function(t){var n,e,r,o,i,a=t.data,s=a.length,l=Math.pow(2,this.value()),d=Math.pow(2,this.saturation()),c=Math.abs(this.hue()+360)%360,u=l*d*Math.cos(c*Math.PI/180),h=l*d*Math.sin(c*Math.PI/180),f=.299*l+.701*u+.167*h,p=.587*l-.587*u+.33*h,m=.114*l-.114*u-.497*h,g=.299*l-.299*u-.328*h,b=.587*l+.413*u+.035*h,v=.114*l-.114*u+.293*h,x=.299*l-.3*u+1.25*h,y=.587*l-.586*u-1.05*h,w=.114*l+.886*u-.2*h;for(n=0;n<s;n+=4)e=a[n+0],r=a[n+1],o=a[n+2],i=a[n+3],a[n+0]=f*e+p*r+m*o,a[n+1]=g*e+b*r+v*o,a[n+2]=x*e+y*r+w*o,a[n+3]=i},Konva.Factory.addGetterSetter(Konva.Node,"hue",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"saturation",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"value",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter)}(),function(){"use strict";Konva.Factory.addGetterSetter(Konva.Node,"hue",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"saturation",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"luminance",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter),Konva.Filters.HSL=function(t){var n,e,r,o,i,a=t.data,s=a.length,l=Math.pow(2,this.saturation()),d=Math.abs(this.hue()+360)%360,c=127*this.luminance(),u=1*l*Math.cos(d*Math.PI/180),h=1*l*Math.sin(d*Math.PI/180),f=.299+.701*u+.167*h,p=.587-.587*u+.33*h,m=.114-.114*u-.497*h,g=.299-.299*u-.328*h,b=.587+.413*u+.035*h,v=.114-.114*u+.293*h,x=.299-.3*u+1.25*h,y=.587-.586*u-1.05*h,w=.114+.886*u-.2*h;for(n=0;n<s;n+=4)e=a[n+0],r=a[n+1],o=a[n+2],i=a[n+3],a[n+0]=f*e+p*r+m*o+c,a[n+1]=g*e+b*r+v*o+c,a[n+2]=x*e+y*r+w*o+c,a[n+3]=i}}(),function(){"use strict";Konva.Filters.Emboss=function(t){var n=10*this.embossStrength(),e=255*this.embossWhiteLevel(),r=this.embossDirection(),o=this.embossBlend(),i=0,a=0,s=t.data,l=t.width,d=t.height,c=4*l,u=d;switch(r){case"top-left":i=-1,a=-1;break;case"top":i=-1,a=0;break;case"top-right":i=-1,a=1;break;case"right":i=0,a=1;break;case"bottom-right":i=1,a=1;break;case"bottom":i=1,a=0;break;case"bottom-left":i=1,a=-1;break;case"left":i=0,a=-1;break;default:Konva.Util.error("Unknown emboss direction: "+r)}do{var h=(u-1)*c,f=i;u+f<1&&(f=0),u+f>d&&(f=0);var p=(u-1+f)*l*4,m=l;do{var g=h+4*(m-1),b=a;m+b<1&&(b=0),m+b>l&&(b=0);var v=p+4*(m-1+b),x=s[g]-s[v],y=s[g+1]-s[v+1],w=s[g+2]-s[v+2],_=x,k=_>0?_:-_;if((y>0?y:-y)>k&&(_=y),(w>0?w:-w)>k&&(_=w),_*=n,o){var S=s[g]+_,C=s[g+1]+_,T=s[g+2]+_;s[g]=S>255?255:S<0?0:S,s[g+1]=C>255?255:C<0?0:C,s[g+2]=T>255?255:T<0?0:T}else{var E=e-_;E<0?E=0:E>255&&(E=255),s[g]=s[g+1]=s[g+2]=E}}while(--m)}while(--u)},Konva.Factory.addGetterSetter(Konva.Node,"embossStrength",.5,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"embossWhiteLevel",.5,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"embossDirection","top-left",null,Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"embossBlend",!1,null,Konva.Factory.afterSetFilter)}(),function(){"use strict";function t(t,n,e,r,o){var i=e-n,a=o-r;return 0===i?r+a/2:0===a?r:a*((t-n)/i)+r}Konva.Filters.Enhance=function(n){var e,r,o,i,a=n.data,s=a.length,l=a[0],d=l,c=a[1],u=c,h=a[2],f=h,p=this.enhance();if(0!==p){for(i=0;i<s;i+=4)(e=a[i+0])<l?l=e:e>d&&(d=e),(r=a[i+1])<c?c=r:r>u&&(u=r),(o=a[i+2])<h?h=o:o>f&&(f=o);var m,g,b,v,x,y,w,_,k;for(d===l&&(d=255,l=0),u===c&&(u=255,c=0),f===h&&(f=255,h=0),p>0?(g=d+p*(255-d),b=l-p*(l-0),x=u+p*(255-u),y=c-p*(c-0),_=f+p*(255-f),k=h-p*(h-0)):(g=d+p*(d-(m=.5*(d+l))),b=l+p*(l-m),x=u+p*(u-(v=.5*(u+c))),y=c+p*(c-v),_=f+p*(f-(w=.5*(f+h))),k=h+p*(h-w)),i=0;i<s;i+=4)a[i+0]=t(a[i+0],l,d,b,g),a[i+1]=t(a[i+1],c,u,y,x),a[i+2]=t(a[i+2],h,f,k,_)}},Konva.Factory.addGetterSetter(Konva.Node,"enhance",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter)}(),function(){"use strict";Konva.Filters.Posterize=function(t){var n,e=Math.round(254*this.levels())+1,r=t.data,o=r.length,i=255/e;for(n=0;n<o;n+=1)r[n]=Math.floor(r[n]/i)*i},Konva.Factory.addGetterSetter(Konva.Node,"levels",.5,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter)}(),function(){"use strict";Konva.Filters.Noise=function(t){var n,e=255*this.noise(),r=t.data,o=r.length,i=e/2;for(n=0;n<o;n+=4)r[n+0]+=i-2*i*Math.random(),r[n+1]+=i-2*i*Math.random(),r[n+2]+=i-2*i*Math.random()},Konva.Factory.addGetterSetter(Konva.Node,"noise",.2,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter)}(),function(){"use strict";Konva.Filters.Pixelate=function(t){var n,e,r,o,i,a,s,l,d,c,u,h,f,p,m=Math.ceil(this.pixelSize()),g=t.width,b=t.height,v=Math.ceil(g/m),x=Math.ceil(b/m);if(t=t.data,m<=0)Konva.Util.error("pixelSize value can not be <= 0");else for(h=0;h<v;h+=1)for(f=0;f<x;f+=1){for(o=0,i=0,a=0,s=0,d=(l=h*m)+m,u=(c=f*m)+m,p=0,n=l;n<d;n+=1)if(!(n>=g))for(e=c;e<u;e+=1)e>=b||(o+=t[(r=4*(g*e+n))+0],i+=t[r+1],a+=t[r+2],s+=t[r+3],p+=1);for(o/=p,i/=p,a/=p,s/=p,n=l;n<d;n+=1)if(!(n>=g))for(e=c;e<u;e+=1)e>=b||(t[(r=4*(g*e+n))+0]=o,t[r+1]=i,t[r+2]=a,t[r+3]=s)}},Konva.Factory.addGetterSetter(Konva.Node,"pixelSize",8,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter)}(),function(){"use strict";Konva.Filters.Threshold=function(t){var n,e=255*this.threshold(),r=t.data,o=r.length;for(n=0;n<o;n+=1)r[n]=r[n]<e?0:255},Konva.Factory.addGetterSetter(Konva.Node,"threshold",.5,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter)}(),function(){"use strict";
/**
   * Sepia Filter
   * Based on: Pixastic Lib - Sepia filter - v0.1.0
   * Copyright (c) 2008 Jacob Seidelin, jseidelin@nihilogic.dk, http://blog.nihilogic.dk/
   * @function
   * @name Sepia
   * @memberof Konva.Filters
   * @param {Object} imageData
   * @author Jacob Seidelin <jseidelin@nihilogic.dk>
   * @license MPL v1.1 [http://www.pixastic.com/lib/license.txt]
   * @example
   * node.cache();
   * node.filters([Konva.Filters.Sepia]);
   */Konva.Filters.Sepia=function(t){var n,e,r,o,i,a,s,l,d,c=t.data,u=t.width,h=t.height,f=4*u;do{n=(h-1)*f,e=u;do{s=.393*(o=c[r=n+4*(e-1)])+.769*(i=c[r+1])+.189*(a=c[r+2]),l=.349*o+.686*i+.168*a,d=.272*o+.534*i+.131*a,c[r]=s>255?255:s,c[r+1]=l>255?255:l,c[r+2]=d>255?255:d,c[r+3]=c[r+3]}while(--e)}while(--h)}}(),function(){"use strict";Konva.Filters.Solarize=function(t){var n=t.data,e=t.width,r=4*e,o=t.height;do{var i=(o-1)*r,a=e;do{var s=i+4*(a-1),l=n[s],d=n[s+1],c=n[s+2];l>127&&(l=255-l),d>127&&(d=255-d),c>127&&(c=255-c),n[s]=l,n[s+1]=d,n[s+2]=c}while(--a)}while(--o)}}(),function(){"use strict";Konva.Filters.Kaleidoscope=function(t){var n,e,r,o,i,a,s,l,d,c=t.width,u=t.height,h=Math.round(this.kaleidoscopePower()),f=Math.round(this.kaleidoscopeAngle()),p=Math.floor(c*(f%360)/360);if(!(h<1)){var m=Konva.Util.createCanvasElement();m.width=c,m.height=u;var g=m.getContext("2d").getImageData(0,0,c,u);!function(t,n,e){var r,o,i,a,s=t.data,l=n.data,d=t.width,c=t.height,u=e.polarCenterX||d/2,h=e.polarCenterY||c/2,f=0,p=0,m=0,g=0,b=Math.sqrt(u*u+h*h);o=d-u,i=c-h,b=(a=Math.sqrt(o*o+i*i))>b?a:b;var v,x,y,w,_=c,k=d,S=360/k*Math.PI/180;for(x=0;x<k;x+=1)for(y=Math.sin(x*S),w=Math.cos(x*S),v=0;v<_;v+=1)o=Math.floor(u+b*v/_*w),f=s[0+(r=4*((i=Math.floor(h+b*v/_*y))*d+o))],p=s[r+1],m=s[r+2],g=s[r+3],l[0+(r=4*(x+v*d))]=f,l[r+1]=p,l[r+2]=m,l[r+3]=g}(t,g,{polarCenterX:c/2,polarCenterY:u/2});for(var b=c/Math.pow(2,h);b<=8;)b*=2,h-=1;var v=b=Math.ceil(b),x=0,y=v,w=1;for(p+b>c&&(x=v,y=0,w=-1),e=0;e<u;e+=1)for(n=x;n!==y;n+=w)l=4*(c*e+Math.round(n+p)%c),o=g.data[l+0],i=g.data[l+1],a=g.data[l+2],s=g.data[l+3],d=4*(c*e+n),g.data[d+0]=o,g.data[d+1]=i,g.data[d+2]=a,g.data[d+3]=s;for(e=0;e<u;e+=1)for(v=Math.floor(b),r=0;r<h;r+=1){for(n=0;n<v+1;n+=1)l=4*(c*e+n),o=g.data[l+0],i=g.data[l+1],a=g.data[l+2],s=g.data[l+3],d=4*(c*e+2*v-n-1),g.data[d+0]=o,g.data[d+1]=i,g.data[d+2]=a,g.data[d+3]=s;v*=2}!function(t,n,e){var r,o,i,a,s,l,d=t.data,c=n.data,u=t.width,h=t.height,f=e.polarCenterX||u/2,p=e.polarCenterY||h/2,m=0,g=0,b=0,v=0,x=Math.sqrt(f*f+p*p);o=u-f,i=h-p,x=(l=Math.sqrt(o*o+i*i))>x?l:x;var y,w,_,k=h,S=u,C=e.polarRotation||0;for(o=0;o<u;o+=1)for(i=0;i<h;i+=1)a=o-f,s=i-p,y=Math.sqrt(a*a+s*s)*k/x,w=(w=(180*Math.atan2(s,a)/Math.PI+360+C)%360)*S/360,_=Math.floor(w),m=d[0+(r=4*(Math.floor(y)*u+_))],g=d[r+1],b=d[r+2],v=d[r+3],c[0+(r=4*(i*u+o))]=m,c[r+1]=g,c[r+2]=b,c[r+3]=v}(g,t,{polarRotation:0})}},Konva.Factory.addGetterSetter(Konva.Node,"kaleidoscopePower",2,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter),Konva.Factory.addGetterSetter(Konva.Node,"kaleidoscopeAngle",0,Konva.Validators.getNumberValidator(),Konva.Factory.afterSetFilter)}(),function(t){"use strict";t.Filters.Contrast=function(t){var n,e=Math.pow((parseInt(this.contrast())+100)/100,2),r=t.data,o=r.length,i=150,a=150,s=150;for(n=0;n<o;n+=4)i=r[n],a=r[n+1],s=r[n+2],i/=255,i-=.5,i*=e,i+=.5,a/=255,a-=.5,a*=e,a+=.5,s/=255,s-=.5,s*=e,s+=.5,i=(i*=255)<0?0:i>255?255:i,a=(a*=255)<0?0:a>255?255:a,s=(s*=255)<0?0:s>255?255:s,r[n]=i,r[n+1]=a,r[n+2]=s},t.Factory.addGetterSetter(t.Node,"contrast",0,t.Validators.getNumberValidator(),t.Factory.afterSetFilter)}(Konva),function(){"use strict";Konva.Container=function(t){this.__init(t)},Konva.Util.addMethods(Konva.Container,{__init:function(t){this.children=new Konva.Collection,Konva.Node.call(this,t)},getChildren:function(t){if(!t)return this.children;var n=new Konva.Collection;return this.children.each(function(e){t(e)&&n.push(e)}),n},hasChildren:function(){return this.getChildren().length>0},removeChildren:function(){for(var t,n=Konva.Collection.toCollection(this.children),e=0;e<n.length;e++)delete(t=n[e]).parent,t.index=0,t.remove();return n=null,this.children=new Konva.Collection,this},destroyChildren:function(){for(var t,n=Konva.Collection.toCollection(this.children),e=0;e<n.length;e++)delete(t=n[e]).parent,t.index=0,t.destroy();return n=null,this.children=new Konva.Collection,this},add:function(t){if(arguments.length>1){for(var n=0;n<arguments.length;n++)this.add(arguments[n]);return this}if(t.getParent())return t.moveTo(this),this;var e=this.children;return this._validateAdd(t),t.index=e.length,t.parent=this,e.push(t),this._fire("add",{child:t}),Konva.DD&&t.isDragging()&&Konva.DD.anim.setLayers(t.getLayer()),this},destroy:function(){return this.hasChildren()&&this.destroyChildren(),Konva.Node.prototype.destroy.call(this),this},find:function(t){return this._generalFind(t,!1)},findOne:function(t){var n=this._generalFind(t,!0);return n.length>0?n[0]:void 0},_generalFind:function(t,n){var e=[];return"string"==typeof t?e=this._findByString(t,n):"function"==typeof t&&(e=this._findByFunction(t,n)),Konva.Collection.toCollection(e)},_findByString:function(t){var n,e,r,o,i,a,s,l=[],d=t.replace(/ /g,"").split(","),c=d.length;for(n=0;n<c;n++){if(r=d[n],!Konva.Util.isValidSelector(r)){var u='Selector "'+r+'" is invalid. Allowed selectors examples are "#foo", ".bar" or "Group".\nIf you have a custom shape with such className, please change it to start with upper letter like "Triangle".\nKonva is awesome, right?';Konva.Util.warn(u)}if("#"===r.charAt(0))(i=this._getNodeById(r.slice(1)))&&l.push(i);else if("."===r.charAt(0))o=this._getNodesByName(r.slice(1)),l=l.concat(o);else for(s=(a=this.getChildren()).length,e=0;e<s;e++)l=l.concat(a[e]._get(r))}return l},_findByFunction:function(t,n){var e=[],r=function(o){if(!(n&&e.length>0)){var i=o.getChildren(),a=i.length;t(o)&&(e=e.concat(o));for(var s=0;s<a;s++)r(i[s])}};return r(this),e},_getNodeById:function(t){var n=Konva.ids[t];return void 0!==n&&this.isAncestorOf(n)?n:null},_getNodesByName:function(t){var n=Konva.names[t]||[];return this._getDescendants(n)},_get:function(t){for(var n=Konva.Node.prototype._get.call(this,t),e=this.getChildren(),r=e.length,o=0;o<r;o++)n=n.concat(e[o]._get(t));return n},toObject:function(){var t=Konva.Node.prototype.toObject.call(this);t.children=[];for(var n=this.getChildren(),e=n.length,r=0;r<e;r++){var o=n[r];t.children.push(o.toObject())}return t},_getDescendants:function(t){for(var n=[],e=t.length,r=0;r<e;r++){var o=t[r];this.isAncestorOf(o)&&n.push(o)}return n},isAncestorOf:function(t){for(var n=t.getParent();n;){if(n._id===this._id)return!0;n=n.getParent()}return!1},clone:function(t){var n=Konva.Node.prototype.clone.call(this,t);return this.getChildren().each(function(t){n.add(t.clone())}),n},getAllIntersections:function(t){var n=[];return this.find("Shape").each(function(e){e.isVisible()&&e.intersects(t)&&n.push(e)}),n},_setChildrenIndices:function(){this.children.each(function(t,n){t.index=n})},drawScene:function(t,n,e){var r=this.getLayer(),o=t||r&&r.getCanvas(),i=o&&o.getContext(),a=this._cache.canvas,s=a&&a.scene;return(this.isVisible()||e)&&(!e&&s?(i.save(),r._applyTransform(this,i,n),this._drawCachedSceneCanvas(i),i.restore()):this._drawChildren(o,"drawScene",n,!1,e)),this},drawHit:function(t,n,e){var r=this.getLayer(),o=t||r&&r.hitCanvas,i=o&&o.getContext(),a=this._cache.canvas,s=a&&a.hit;return(this.shouldDrawHit(o)||e)&&(r&&r.clearHitCache(),!e&&s?(i.save(),r._applyTransform(this,i,n),this._drawCachedHitCanvas(i),i.restore()):this._drawChildren(o,"drawHit",n)),this},_drawChildren:function(t,n,e,r,o){var i,a,s=this.getLayer(),l=t&&t.getContext(),d=this.getClipWidth(),c=this.getClipHeight(),u=this.getClipFunc(),h=d&&c||u;if(h&&s){l.save();var f=this.getAbsoluteTransform(e),p=f.getMatrix();l.transform(p[0],p[1],p[2],p[3],p[4],p[5]),l.beginPath(),u?u.call(this,l,this):(i=this.getClipX(),a=this.getClipY(),l.rect(i,a,d,c)),l.clip(),p=f.copy().invert().getMatrix(),l.transform(p[0],p[1],p[2],p[3],p[4],p[5])}this.children.each(function(i){i[n](t,e,r,o)}),h&&l.restore()},shouldDrawHit:function(t){var n=this.getLayer(),e=Konva.DD&&Konva.isDragging()&&-1!==Konva.DD.anim.getLayers().indexOf(n);return t&&t.isCache||n&&n.hitGraphEnabled()&&this.isVisible()&&!e},getClientRect:function(t){var n,e,r,o,i=(t=t||{}).skipTransform,a=t.relativeTo,s={x:1/0,y:1/0,width:0,height:0},l=this;this.children.each(function(i){if(i.getVisible()){var a=i.getClientRect({relativeTo:l,skipShadow:t.skipShadow,skipStroke:t.skipStroke});0===a.width&&0===a.height||(void 0===n?(n=a.x,e=a.y,r=a.x+a.width,o=a.y+a.height):(n=Math.min(n,a.x),e=Math.min(e,a.y),r=Math.max(r,a.x+a.width),o=Math.max(o,a.y+a.height)))}});for(var d=this.find("Shape"),c=!1,u=0;u<d.length;u++){if(d[u]._isVisible(this)){c=!0;break}}return s=c?{x:n,y:e,width:r-n,height:o-e}:{x:0,y:0,width:0,height:0},i?s:this._transformedRect(s,a)}}),Konva.Util.extend(Konva.Container,Konva.Node),Konva.Container.prototype.get=Konva.Container.prototype.find,Konva.Factory.addComponentsGetterSetter(Konva.Container,"clip",["x","y","width","height"]),Konva.Factory.addGetterSetter(Konva.Container,"clipX",void 0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Container,"clipY",void 0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Container,"clipWidth",void 0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Container,"clipHeight",void 0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Container,"clipFunc"),Konva.Collection.mapMethods(Konva.Container)}(),function(t){"use strict";var n="hasShadow",e="shadowRGBA";function r(t){t.fill()}function o(t){t.stroke()}function i(t){t.fill()}function a(t){t.stroke()}function s(){this._clearCache(n)}function l(){this._clearCache(e)}t.Shape=function(t){this.__init(t)},t.Util.addMethods(t.Shape,{__init:function(n){this.nodeType="Shape",this._fillFunc=r,this._strokeFunc=o,this._fillFuncHit=i,this._strokeFuncHit=a;for(var e,d=t.shapes;!(e=t.Util.getRandomColor())||e in d;);this.colorKey=e,d[e]=this,t.Node.call(this,n),this.on("shadowColorChange.konva shadowBlurChange.konva shadowOffsetChange.konva shadowOpacityChange.konva shadowEnabledChange.konva",s),this.on("shadowColorChange.konva shadowOpacityChange.konva shadowEnabledChange.konva",l)},hasChildren:function(){return!1},getChildren:function(){return[]},getContext:function(){return this.getLayer().getContext()},getCanvas:function(){return this.getLayer().getCanvas()},hasShadow:function(){return this._getCache(n,this._hasShadow)},_hasShadow:function(){return this.getShadowEnabled()&&0!==this.getShadowOpacity()&&!!(this.getShadowColor()||this.getShadowBlur()||this.getShadowOffsetX()||this.getShadowOffsetY())},getShadowRGBA:function(){return this._getCache(e,this._getShadowRGBA)},_getShadowRGBA:function(){if(this.hasShadow()){var n=t.Util.colorToRGBA(this.shadowColor());return"rgba("+n.r+","+n.g+","+n.b+","+n.a*(this.getShadowOpacity()||1)+")"}},hasFill:function(){return!!(this.getFill()||this.getFillPatternImage()||this.getFillLinearGradientColorStops()||this.getFillRadialGradientColorStops())},hasStroke:function(){return this.strokeEnabled()&&!(!this.stroke()&&!this.getStrokeLinearGradientColorStops())},intersects:function(t){var n=this.getStage().bufferHitCanvas;return n.getContext().clear(),this.drawHit(n),n.context.getImageData(Math.round(t.x),Math.round(t.y),1,1).data[3]>0},destroy:function(){return t.Node.prototype.destroy.call(this),delete t.shapes[this.colorKey],this},_useBufferCanvas:function(t){return!t&&this.perfectDrawEnabled()&&1!==this.getAbsoluteOpacity()&&this.hasFill()&&this.hasStroke()&&this.getStage()||this.perfectDrawEnabled()&&this.hasShadow()&&1!==this.getAbsoluteOpacity()&&this.hasFill()&&this.hasStroke()&&this.getStage()},getSelfRect:function(){var t=this.getSize();return{x:this._centroid?Math.round(-t.width/2):0,y:this._centroid?Math.round(-t.height/2):0,width:t.width,height:t.height}},getClientRect:function(t){var n=(t=t||{}).skipTransform,e=t.relativeTo,r=this.getSelfRect(),o=!t.skipStroke&&this.hasStroke()&&this.strokeWidth()||0,i=r.width+o,a=r.height+o,s=!t.skipShadow&&this.hasShadow(),l=s?this.shadowOffsetX():0,d=s?this.shadowOffsetY():0,c=i+Math.abs(l),u=a+Math.abs(d),h=s&&this.shadowBlur()||0,f=c+2*h,p=u+2*h,m=0;Math.round(o/2)!==o/2&&(m=1);var g={width:f+m,height:p+m,x:-Math.round(o/2+h)+Math.min(l,0)+r.x,y:-Math.round(o/2+h)+Math.min(d,0)+r.y};return n?g:this._transformedRect(g,e)},drawScene:function(t,n,e,r){var o,i,a=this.getLayer(),s=t||a.getCanvas(),l=s.getContext(),d=this._cache.canvas,c=this.sceneFunc(),u=this.hasShadow(),h=this.hasStroke();if(!this.isVisible()&&!e)return this;if(d)return l.save(),a._applyTransform(this,l,n),this._drawCachedSceneCanvas(l),l.restore(),this;if(!c)return this;if(l.save(),this._useBufferCanvas(e)&&!r){if((i=(o=this.getStage().bufferCanvas).getContext()).clear(),i.save(),i._applyLineJoin(this),!e)if(a)a._applyTransform(this,i,n);else{var f=this.getAbsoluteTransform(n).getMatrix();l.transform(f[0],f[1],f[2],f[3],f[4],f[5])}c.call(this,i,this),i.restore();var p=o.pixelRatio;u&&!s.hitCanvas?(l.save(),l._applyShadow(this),l._applyOpacity(this),l._applyGlobalCompositeOperation(this),l.drawImage(o._canvas,0,0,o.width/p,o.height/p),l.restore()):(l._applyOpacity(this),l._applyGlobalCompositeOperation(this),l.drawImage(o._canvas,0,0,o.width/p,o.height/p))}else{if(l._applyLineJoin(this),!e)if(a)a._applyTransform(this,l,n);else{var m=this.getAbsoluteTransform(n).getMatrix();l.transform(m[0],m[1],m[2],m[3],m[4],m[5])}u&&h&&!s.hitCanvas?(l.save(),e||(l._applyOpacity(this),l._applyGlobalCompositeOperation(this)),l._applyShadow(this),c.call(this,l,this),l.restore(),this.hasFill()&&this.getShadowForStrokeEnabled()&&c.call(this,l,this)):u&&!s.hitCanvas?(l.save(),e||(l._applyOpacity(this),l._applyGlobalCompositeOperation(this)),l._applyShadow(this),c.call(this,l,this),l.restore()):(e||(l._applyOpacity(this),l._applyGlobalCompositeOperation(this)),c.call(this,l,this))}return l.restore(),this},drawHit:function(t,n,e){var r=this.getLayer(),o=t||r.hitCanvas,i=o.getContext(),a=this.hitFunc()||this.sceneFunc(),s=this._cache.canvas,l=s&&s.hit;if(!this.shouldDrawHit(o)&&!e)return this;if(r&&r.clearHitCache(),l)return i.save(),r._applyTransform(this,i,n),this._drawCachedHitCanvas(i),i.restore(),this;if(!a)return this;if(i.save(),i._applyLineJoin(this),!e)if(r)r._applyTransform(this,i,n);else{var d=this.getAbsoluteTransform(n).getMatrix();i.transform(d[0],d[1],d[2],d[3],d[4],d[5])}return a.call(this,i,this),i.restore(),this},drawHitFromCache:function(n){var e,r,o,i,a,s=n||0,l=this._cache.canvas,d=this._getCachedSceneCanvas(),c=l.hit,u=c.getContext(),h=c.getWidth(),f=c.getHeight();u.clear(),u.drawImage(d._canvas,0,0,h,f);try{for(o=(r=(e=u.getImageData(0,0,h,f)).data).length,i=t.Util._hexToRgb(this.colorKey),a=0;a<o;a+=4)r[a+3]>s?(r[a]=i.r,r[a+1]=i.g,r[a+2]=i.b,r[a+3]=255):r[a+3]=0;u.putImageData(e,0,0)}catch(n){t.Util.error("Unable to draw hit graph from cached scene canvas. "+n.message)}return this}}),t.Util.extend(t.Shape,t.Node),t.Factory.addGetterSetter(t.Shape,"stroke",void 0,t.Validators.getStringValidator()),t.Factory.addGetterSetter(t.Shape,"strokeWidth",2,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"strokeHitEnabled",!0,t.Validators.getBooleanValidator()),t.Factory.addGetterSetter(t.Shape,"perfectDrawEnabled",!0,t.Validators.getBooleanValidator()),t.Factory.addGetterSetter(t.Shape,"shadowForStrokeEnabled",!0,t.Validators.getBooleanValidator()),t.Factory.addGetterSetter(t.Shape,"lineJoin"),t.Factory.addGetterSetter(t.Shape,"lineCap"),t.Factory.addGetterSetter(t.Shape,"sceneFunc"),t.Factory.addGetterSetter(t.Shape,"hitFunc"),t.Factory.addGetterSetter(t.Shape,"dash"),t.Factory.addGetterSetter(t.Shape,"dashOffset",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"shadowColor",void 0,t.Validators.getStringValidator()),t.Factory.addGetterSetter(t.Shape,"shadowBlur",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"shadowOpacity",1,t.Validators.getNumberValidator()),t.Factory.addComponentsGetterSetter(t.Shape,"shadowOffset",["x","y"]),t.Factory.addGetterSetter(t.Shape,"shadowOffsetX",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"shadowOffsetY",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"fillPatternImage"),t.Factory.addGetterSetter(t.Shape,"fill",void 0,t.Validators.getStringValidator()),t.Factory.addGetterSetter(t.Shape,"fillPatternX",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"fillPatternY",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"fillLinearGradientColorStops"),t.Factory.addGetterSetter(t.Shape,"strokeLinearGradientColorStops"),t.Factory.addGetterSetter(t.Shape,"fillRadialGradientStartRadius",0),t.Factory.addGetterSetter(t.Shape,"fillRadialGradientEndRadius",0),t.Factory.addGetterSetter(t.Shape,"fillRadialGradientColorStops"),t.Factory.addGetterSetter(t.Shape,"fillPatternRepeat","repeat"),t.Factory.addGetterSetter(t.Shape,"fillEnabled",!0),t.Factory.addGetterSetter(t.Shape,"strokeEnabled",!0),t.Factory.addGetterSetter(t.Shape,"shadowEnabled",!0),t.Factory.addGetterSetter(t.Shape,"dashEnabled",!0),t.Factory.addGetterSetter(t.Shape,"strokeScaleEnabled",!0),t.Factory.addGetterSetter(t.Shape,"fillPriority","color"),t.Factory.addComponentsGetterSetter(t.Shape,"fillPatternOffset",["x","y"]),t.Factory.addGetterSetter(t.Shape,"fillPatternOffsetX",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"fillPatternOffsetY",0,t.Validators.getNumberValidator()),t.Factory.addComponentsGetterSetter(t.Shape,"fillPatternScale",["x","y"]),t.Factory.addGetterSetter(t.Shape,"fillPatternScaleX",1,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Shape,"fillPatternScaleY",1,t.Validators.getNumberValidator()),t.Factory.addComponentsGetterSetter(t.Shape,"fillLinearGradientStartPoint",["x","y"]),t.Factory.addComponentsGetterSetter(t.Shape,"strokeLinearGradientStartPoint",["x","y"]),t.Factory.addGetterSetter(t.Shape,"fillLinearGradientStartPointX",0),t.Factory.addGetterSetter(t.Shape,"strokeLinearGradientStartPointX",0),t.Factory.addGetterSetter(t.Shape,"fillLinearGradientStartPointY",0),t.Factory.addGetterSetter(t.Shape,"strokeLinearGradientStartPointY",0),t.Factory.addComponentsGetterSetter(t.Shape,"fillLinearGradientEndPoint",["x","y"]),t.Factory.addComponentsGetterSetter(t.Shape,"strokeLinearGradientEndPoint",["x","y"]),t.Factory.addGetterSetter(t.Shape,"fillLinearGradientEndPointX",0),t.Factory.addGetterSetter(t.Shape,"strokeLinearGradientEndPointX",0),t.Factory.addGetterSetter(t.Shape,"fillLinearGradientEndPointY",0),t.Factory.addGetterSetter(t.Shape,"strokeLinearGradientEndPointY",0),t.Factory.addComponentsGetterSetter(t.Shape,"fillRadialGradientStartPoint",["x","y"]),t.Factory.addGetterSetter(t.Shape,"fillRadialGradientStartPointX",0),t.Factory.addGetterSetter(t.Shape,"fillRadialGradientStartPointY",0),t.Factory.addComponentsGetterSetter(t.Shape,"fillRadialGradientEndPoint",["x","y"]),t.Factory.addGetterSetter(t.Shape,"fillRadialGradientEndPointX",0),t.Factory.addGetterSetter(t.Shape,"fillRadialGradientEndPointY",0),t.Factory.addGetterSetter(t.Shape,"fillPatternRotation",0),t.Factory.backCompat(t.Shape,{dashArray:"dash",getDashArray:"getDash",setDashArray:"getDash",drawFunc:"sceneFunc",getDrawFunc:"getSceneFunc",setDrawFunc:"setSceneFunc",drawHitFunc:"hitFunc",getDrawHitFunc:"getHitFunc",setDrawHitFunc:"setHitFunc"}),t.Collection.mapMethods(t.Shape)}(Konva),function(){"use strict";var t="_",n=["mousedown","mousemove","mouseup","mouseout","touchstart","touchmove","touchend","mouseover","wheel","contextmenu"],e=n.length;function r(n,e){n.content.addEventListener(e,function(r){n[t+e](r)},!1)}Konva.Stage=function(t){this.___init(t)},Konva.Util.addMethods(Konva.Stage,{___init:function(t){this.nodeType="Stage",Konva.Container.call(this,t),this._id=Konva.idCounter++,this._buildDOM(),this._bindContentEvents(),this._enableNestedTransforms=!1,Konva.stages.push(this)},_validateAdd:function(t){"Layer"!==t.getType()&&Konva.Util.throw("You may only add layers to the stage.")},setContainer:function(t){if("string"==typeof t){if("."===t.charAt(0)){var n=t.slice(1);t=Konva.document.getElementsByClassName(n)[0]}else{var e;e="#"!==t.charAt(0)?t:t.slice(1),t=Konva.document.getElementById(e)}if(!t)throw"Can not find container in document with id "+e}return this._setAttr("container",t),this},shouldDrawHit:function(){return!0},draw:function(){return Konva.Node.prototype.draw.call(this),this},setHeight:function(t){return Konva.Node.prototype.setHeight.call(this,t),this._resizeDOM(),this},setWidth:function(t){return Konva.Node.prototype.setWidth.call(this,t),this._resizeDOM(),this},clear:function(){var t,n=this.children,e=n.length;for(t=0;t<e;t++)n[t].clear();return this},clone:function(t){return t||(t={}),t.container=Konva.document.createElement("div"),Konva.Container.prototype.clone.call(this,t)},destroy:function(){var t=this.content;Konva.Container.prototype.destroy.call(this),t&&Konva.Util._isInDocument(t)&&this.getContainer().removeChild(t);var n=Konva.stages.indexOf(this);return n>-1&&Konva.stages.splice(n,1),this},getPointerPosition:function(){return this.pointerPos},getStage:function(){return this},getContent:function(){return this.content},_toKonvaCanvas:function(t){var n=(t=t||{}).x||0,e=t.y||0,r=new Konva.SceneCanvas({width:t.width||this.getWidth(),height:t.height||this.getHeight(),pixelRatio:t.pixelRatio||1}),o=r.getContext()._context,i=this.children;return(n||e)&&o.translate(-1*n,-1*e),i.each(function(r){if(r.isVisible()){var i=r._toKonvaCanvas(t);o.drawImage(i._canvas,n,e,i.getWidth()/i.getPixelRatio(),i.getHeight()/i.getPixelRatio())}}),r},toImage:function(t){var n=t.callback;t.callback=function(t){Konva.Util._getImage(t,function(t){n(t)})},this.toDataURL(t)},getIntersection:function(t,n){var e,r,o=this.getChildren();for(e=o.length-1;e>=0;e--)if(r=o[e].getIntersection(t,n))return r;return null},_resizeDOM:function(){if(this.content){var t,n,e=this.getWidth(),r=this.getHeight(),o=this.getChildren(),i=o.length;for(this.content.style.width=e+"px",this.content.style.height=r+"px",this.bufferCanvas.setSize(e,r),this.bufferHitCanvas.setSize(e,r),t=0;t<i;t++)(n=o[t]).setSize(e,r),n.draw()}},add:function(t){if(arguments.length>1){for(var n=0;n<arguments.length;n++)this.add(arguments[n]);return this}return Konva.Container.prototype.add.call(this,t),t._setCanvasSize(this.width(),this.height()),t.draw(),Konva.isBrowser&&this.content.appendChild(t.canvas._canvas),this},getParent:function(){return null},getLayer:function(){return null},getLayers:function(){return this.getChildren()},_bindContentEvents:function(){if(Konva.isBrowser)for(var t=0;t<e;t++)r(this,n[t])},_mouseover:function(t){Konva.UA.mobile||(this._setPointerPosition(t),this._fire("contentMouseover",{evt:t}))},_mouseout:function(t){if(!Konva.UA.mobile){this._setPointerPosition(t);var n=this.targetShape;n&&!Konva.isDragging()&&(n._fireAndBubble("mouseout",{evt:t}),n._fireAndBubble("mouseleave",{evt:t}),this.targetShape=null),this.pointerPos=void 0,this._fire("contentMouseout",{evt:t})}},_mousemove:function(t){return Konva.UA.ieMobile?this._touchmove(t):void 0===t.movementX&&void 0===t.movementY||0!==t.movementY||0!==t.movementX?Konva.UA.mobile?null:(this._setPointerPosition(t),Konva.isDragging()||((n=this.getIntersection(this.getPointerPosition()))&&n.isListening()?Konva.isDragging()||this.targetShape&&this.targetShape._id===n._id?n._fireAndBubble("mousemove",{evt:t}):(this.targetShape&&(this.targetShape._fireAndBubble("mouseout",{evt:t},n),this.targetShape._fireAndBubble("mouseleave",{evt:t},n)),n._fireAndBubble("mouseover",{evt:t},this.targetShape),n._fireAndBubble("mouseenter",{evt:t},this.targetShape),this.targetShape=n):(this.targetShape&&!Konva.isDragging()&&(this.targetShape._fireAndBubble("mouseout",{evt:t}),this.targetShape._fireAndBubble("mouseleave",{evt:t}),this.targetShape=null),this._fire("mousemove",{evt:t,target:this,currentTarget:this})),this._fire("contentMousemove",{evt:t})),void(t.cancelable&&t.preventDefault())):null;var n},_mousedown:function(t){if(Konva.UA.ieMobile)return this._touchstart(t);if(!Konva.UA.mobile){this._setPointerPosition(t);var n=this.getIntersection(this.getPointerPosition());Konva.listenClickTap=!0,n&&n.isListening()?(this.clickStartShape=n,n._fireAndBubble("mousedown",{evt:t})):this._fire("mousedown",{evt:t,target:this,currentTarget:this}),this._fire("contentMousedown",{evt:t})}},_mouseup:function(t){if(Konva.UA.ieMobile)return this._touchend(t);if(!Konva.UA.mobile){this._setPointerPosition(t);var n=this.getIntersection(this.getPointerPosition()),e=this.clickStartShape,r=this.clickEndShape,o=!1,i=Konva.DD;Konva.inDblClickWindow?(o=!0,clearTimeout(this.dblTimeout)):i&&i.justDragged?i&&(i.justDragged=!1):(Konva.inDblClickWindow=!0,clearTimeout(this.dblTimeout)),this.dblTimeout=setTimeout(function(){Konva.inDblClickWindow=!1},Konva.dblClickWindow),n&&n.isListening()?(this.clickEndShape=n,n._fireAndBubble("mouseup",{evt:t}),Konva.listenClickTap&&e&&e._id===n._id&&(n._fireAndBubble("click",{evt:t}),o&&r&&r._id===n._id&&n._fireAndBubble("dblclick",{evt:t}))):(this._fire("mouseup",{evt:t,target:this,currentTarget:this}),Konva.listenClickTap&&this._fire("click",{evt:t,target:this,currentTarget:this}),o&&this._fire("dblclick",{evt:t,target:this,currentTarget:this})),this._fire("contentMouseup",{evt:t}),Konva.listenClickTap&&(this._fire("contentClick",{evt:t}),o&&this._fire("contentDblclick",{evt:t})),Konva.listenClickTap=!1}t.cancelable&&t.preventDefault()},_contextmenu:function(t){this._setPointerPosition(t);var n=this.getIntersection(this.getPointerPosition());n&&n.isListening()?n._fireAndBubble("contextmenu",{evt:t}):this._fire("contextmenu",{evt:t,target:this,currentTarget:this}),this._fire("contentContextmenu",{evt:t})},_touchstart:function(t){this._setPointerPosition(t);var n=this.getIntersection(this.getPointerPosition());Konva.listenClickTap=!0,n&&n.isListening()?(this.tapStartShape=n,n._fireAndBubble("touchstart",{evt:t}),n.isListening()&&n.preventDefault()&&t.cancelable&&t.preventDefault()):this._fire("touchstart",{evt:t,target:this,currentTarget:this}),this._fire("contentTouchstart",{evt:t})},_touchend:function(t){this._setPointerPosition(t);var n=this.getIntersection(this.getPointerPosition()),e=!1;Konva.inDblClickWindow?(e=!0,clearTimeout(this.dblTimeout)):(Konva.inDblClickWindow=!0,clearTimeout(this.dblTimeout)),this.dblTimeout=setTimeout(function(){Konva.inDblClickWindow=!1},Konva.dblClickWindow),n&&n.isListening()?(n._fireAndBubble("touchend",{evt:t}),Konva.listenClickTap&&this.tapStartShape&&n._id===this.tapStartShape._id&&(n._fireAndBubble("tap",{evt:t}),e&&n._fireAndBubble("dbltap",{evt:t})),n.isListening()&&n.preventDefault()&&t.cancelable&&t.preventDefault()):(this._fire("touchend",{evt:t,target:this,currentTarget:this}),Konva.listenClickTap&&this._fire("tap",{evt:t,target:this,currentTarget:this}),e&&this._fire("dbltap",{evt:t,target:this,currentTarget:this})),this._fire("contentTouchend",{evt:t}),Konva.listenClickTap&&(this._fire("contentTap",{evt:t}),e&&this._fire("contentDbltap",{evt:t})),Konva.listenClickTap=!1},_touchmove:function(t){this._setPointerPosition(t);var n,e=Konva.DD;Konva.isDragging()||((n=this.getIntersection(this.getPointerPosition()))&&n.isListening()?(n._fireAndBubble("touchmove",{evt:t}),n.isListening()&&n.preventDefault()&&t.cancelable&&t.preventDefault()):this._fire("touchmove",{evt:t,target:this,currentTarget:this}),this._fire("contentTouchmove",{evt:t})),e&&Konva.isDragging()&&Konva.DD.node.preventDefault()&&t.cancelable&&t.preventDefault()},_wheel:function(t){this._setPointerPosition(t);var n=this.getIntersection(this.getPointerPosition());n&&n.isListening()?n._fireAndBubble("wheel",{evt:t}):this._fire("wheel",{evt:t,target:this,currentTarget:this}),this._fire("contentWheel",{evt:t})},_setPointerPosition:function(t){var n=this._getContentPosition(),e=null,r=null;if(void 0!==(t=t||window.event).touches){if(t.touches.length>0){var o=t.touches[0];e=o.clientX-n.left,r=o.clientY-n.top}}else e=t.clientX-n.left,r=t.clientY-n.top;null!==e&&null!==r&&(this.pointerPos={x:e,y:r})},_getContentPosition:function(){var t=this.content.getBoundingClientRect?this.content.getBoundingClientRect():{top:0,left:0};return{top:t.top,left:t.left}},_buildDOM:function(){if(this.bufferCanvas=new Konva.SceneCanvas,this.bufferHitCanvas=new Konva.HitCanvas({pixelRatio:1}),Konva.isBrowser){var t=this.getContainer();if(!t)throw"Stage has no container. A container is required.";t.innerHTML="",this.content=Konva.document.createElement("div"),this.content.style.position="relative",this.content.style.userSelect="none",this.content.className="konvajs-content",this.content.setAttribute("role","presentation"),t.appendChild(this.content),this._resizeDOM()}},_onContent:function(t,n){var e,r,o=t.split(" "),i=o.length;for(e=0;e<i;e++)r=o[e],this.content.addEventListener(r,n,!1)},cache:function(){Konva.Util.warn("Cache function is not allowed for stage. You may use cache only for layers, groups and shapes.")},clearCache:function(){}}),Konva.Util.extend(Konva.Stage,Konva.Container),Konva.Factory.addGetter(Konva.Stage,"container"),Konva.Factory.addOverloadedGetterSetter(Konva.Stage,"container")}(),function(t){"use strict";t.BaseLayer=function(t){this.___init(t)},t.Util.addMethods(t.BaseLayer,{___init:function(n){this.nodeType="Layer",t.Container.call(this,n)},createPNGStream:function(){return this.canvas._canvas.createPNGStream()},getCanvas:function(){return this.canvas},getHitCanvas:function(){return this.hitCanvas},getContext:function(){return this.getCanvas().getContext()},clear:function(t){return this.getContext().clear(t),this},clearHitCache:function(){this._hitImageData=void 0},setZIndex:function(n){t.Node.prototype.setZIndex.call(this,n);var e=this.getStage();return e&&(e.content.removeChild(this.getCanvas()._canvas),n<e.getChildren().length-1?e.content.insertBefore(this.getCanvas()._canvas,e.getChildren()[n+1].getCanvas()._canvas):e.content.appendChild(this.getCanvas()._canvas)),this},moveToTop:function(){t.Node.prototype.moveToTop.call(this);var n=this.getStage();return n&&(n.content.removeChild(this.getCanvas()._canvas),n.content.appendChild(this.getCanvas()._canvas)),this},moveUp:function(){if(!t.Node.prototype.moveUp.call(this))return this;var n=this.getStage();return n?(n.content.removeChild(this.getCanvas()._canvas),this.index<n.getChildren().length-1?n.content.insertBefore(this.getCanvas()._canvas,n.getChildren()[this.index+1].getCanvas()._canvas):n.content.appendChild(this.getCanvas()._canvas),this):this},moveDown:function(){if(t.Node.prototype.moveDown.call(this)){var n=this.getStage();if(n){var e=n.getChildren();n.content.removeChild(this.getCanvas()._canvas),n.content.insertBefore(this.getCanvas()._canvas,e[this.index+1].getCanvas()._canvas)}}return this},moveToBottom:function(){if(t.Node.prototype.moveToBottom.call(this)){var n=this.getStage();if(n){var e=n.getChildren();n.content.removeChild(this.getCanvas()._canvas),n.content.insertBefore(this.getCanvas()._canvas,e[1].getCanvas()._canvas)}}return this},getLayer:function(){return this},remove:function(){var n=this.getCanvas()._canvas;return t.Node.prototype.remove.call(this),n&&n.parentNode&&t.Util._isInDocument(n)&&n.parentNode.removeChild(n),this},getStage:function(){return this.parent},setSize:function(t,n){return this.canvas.setSize(t,n),this},_toKonvaCanvas:function(n){return(n=n||{}).width=n.width||this.getWidth(),n.height=n.height||this.getHeight(),n.x=void 0!==n.x?n.x:this.getX(),n.y=void 0!==n.y?n.y:this.getY(),t.Node.prototype._toKonvaCanvas.call(this,n)},getWidth:function(){if(this.parent)return this.parent.getWidth()},setWidth:function(){t.Util.warn('Can not change width of layer. Use "stage.width(value)" function instead.')},getHeight:function(){if(this.parent)return this.parent.getHeight()},setHeight:function(){t.Util.warn('Can not change height of layer. Use "stage.height(value)" function instead.')},_applyTransform:function(t,n,e){var r=t.getAbsoluteTransform(e).getMatrix();n.transform(r[0],r[1],r[2],r[3],r[4],r[5])}}),t.Util.extend(t.BaseLayer,t.Container),t.Factory.addGetterSetter(t.BaseLayer,"clearBeforeDraw",!0),t.Collection.mapMethods(t.BaseLayer)}(Konva),function(){"use strict";var t=[{x:0,y:0},{x:-1,y:-1},{x:1,y:-1},{x:1,y:1},{x:-1,y:1}],n=t.length;Konva.Layer=function(t){this.____init(t)},Konva.Util.addMethods(Konva.Layer,{____init:function(t){this.nodeType="Layer",this.canvas=new Konva.SceneCanvas,this.hitCanvas=new Konva.HitCanvas({pixelRatio:1}),Konva.BaseLayer.call(this,t)},_setCanvasSize:function(t,n){this.canvas.setSize(t,n),this.hitCanvas.setSize(t,n)},_validateAdd:function(t){var n=t.getType();"Group"!==n&&"Shape"!==n&&Konva.Util.throw("You may only add groups and shapes to a layer.")},getIntersection:function(e,r){var o,i,a,s;if(!this.hitGraphEnabled()||!this.isVisible())return null;for(var l=1,d=!1;;){for(i=0;i<n;i++){if(a=t[i],(s=(o=this._getIntersection({x:e.x+a.x*l,y:e.y+a.y*l})).shape)&&r)return s.findAncestor(r,!0);if(s)return s;if(d=!!o.antialiased,!o.antialiased)break}if(!d)return null;l+=1}},_getImageData:function(t,n){var e=this.hitCanvas.width||1,r=this.hitCanvas.height||1,o=Math.round(n)*e+Math.round(t);return this._hitImageData||(this._hitImageData=this.hitCanvas.context.getImageData(0,0,e,r)),[this._hitImageData.data[4*o+0],this._hitImageData.data[4*o+1],this._hitImageData.data[4*o+2],this._hitImageData.data[4*o+3]]},_getIntersection:function(t){var n,e,r=this.hitCanvas.pixelRatio,o=this.hitCanvas.context.getImageData(Math.round(t.x*r),Math.round(t.y*r),1,1).data,i=o[3];return 255===i?(n=Konva.Util._rgbToHex(o[0],o[1],o[2]),(e=Konva.shapes["#"+n])?{shape:e}:{antialiased:!0}):i>0?{antialiased:!0}:{}},drawScene:function(t,n){var e=this.getLayer(),r=t||e&&e.getCanvas();return this._fire("beforeDraw",{node:this}),this.getClearBeforeDraw()&&r.getContext().clear(),Konva.Container.prototype.drawScene.call(this,r,n),this._fire("draw",{node:this}),this},drawHit:function(t,n){var e=this.getLayer(),r=t||e&&e.hitCanvas;return e&&e.getClearBeforeDraw()&&e.getHitCanvas().getContext().clear(),Konva.Container.prototype.drawHit.call(this,r,n),this.imageData=null,this},clear:function(t){return Konva.BaseLayer.prototype.clear.call(this,t),this.getHitCanvas().getContext().clear(t),this.imageData=null,this},setVisible:function(t){return Konva.Node.prototype.setVisible.call(this,t),t?(this.getCanvas()._canvas.style.display="block",this.hitCanvas._canvas.style.display="block"):(this.getCanvas()._canvas.style.display="none",this.hitCanvas._canvas.style.display="none"),this},enableHitGraph:function(){return this.setHitGraphEnabled(!0),this},disableHitGraph:function(){return this.setHitGraphEnabled(!1),this},setSize:function(t,n){return Konva.BaseLayer.prototype.setSize.call(this,t,n),this.hitCanvas.setSize(t,n),this}}),Konva.Util.extend(Konva.Layer,Konva.BaseLayer),Konva.Factory.addGetterSetter(Konva.Layer,"hitGraphEnabled",!0),Konva.Collection.mapMethods(Konva.Layer)}(),function(){"use strict";Konva.FastLayer=function(t){this.____init(t)},Konva.Util.addMethods(Konva.FastLayer,{____init:function(t){this.nodeType="Layer",this.canvas=new Konva.SceneCanvas,Konva.BaseLayer.call(this,t)},_validateAdd:function(t){"Shape"!==t.getType()&&Konva.Util.throw("You may only add shapes to a fast layer.")},_setCanvasSize:function(t,n){this.canvas.setSize(t,n)},hitGraphEnabled:function(){return!1},getIntersection:function(){return null},drawScene:function(t){var n=this.getLayer(),e=t||n&&n.getCanvas();return this.getClearBeforeDraw()&&e.getContext().clear(),Konva.Container.prototype.drawScene.call(this,e),this},draw:function(){return this.drawScene(),this},setVisible:function(t){return Konva.Node.prototype.setVisible.call(this,t),this.getCanvas()._canvas.style.display=t?"block":"none",this}}),Konva.Util.extend(Konva.FastLayer,Konva.BaseLayer),Konva.Collection.mapMethods(Konva.FastLayer)}(),function(){"use strict";Konva.Group=function(t){this.___init(t)},Konva.Util.addMethods(Konva.Group,{___init:function(t){this.nodeType="Group",Konva.Container.call(this,t)},_validateAdd:function(t){var n=t.getType();"Group"!==n&&"Shape"!==n&&Konva.Util.throw("You may only add groups and shapes to groups.")}}),Konva.Util.extend(Konva.Group,Konva.Container),Konva.Collection.mapMethods(Konva.Group)}(),function(t){"use strict";var n=t.global.performance&&t.global.performance.now?function(){return t.global.performance.now()}:function(){return(new Date).getTime()};function e(t){setTimeout(t,1e3/60)}var r=t.global.requestAnimationFrame||t.global.webkitRequestAnimationFrame||t.global.mozRequestAnimationFrame||t.global.oRequestAnimationFrame||t.global.msRequestAnimationFrame||e;function o(){return r.apply(t.global,arguments)}t.Animation=function(e,r){var o=t.Animation;this.func=e,this.setLayers(r),this.id=o.animIdCounter++,this.frame={time:0,timeDiff:0,lastTime:n()}},t.Animation.prototype={setLayers:function(t){var n=[];return n=t?t.length>0?t:[t]:[],this.layers=n,this},getLayers:function(){return this.layers},addLayer:function(t){var n,e=this.layers,r=e.length;for(n=0;n<r;n++)if(e[n]._id===t._id)return!1;return this.layers.push(t),!0},isRunning:function(){var n,e=t.Animation.animations,r=e.length;for(n=0;n<r;n++)if(e[n].id===this.id)return!0;return!1},start:function(){var e=t.Animation;return this.stop(),this.frame.timeDiff=0,this.frame.lastTime=n(),e._addAnimation(this),this},stop:function(){return t.Animation._removeAnimation(this),this},_updateFrameObject:function(t){this.frame.timeDiff=t-this.frame.lastTime,this.frame.lastTime=t,this.frame.time+=this.frame.timeDiff,this.frame.frameRate=1e3/this.frame.timeDiff}},t.Animation.animations=[],t.Animation.animIdCounter=0,t.Animation.animRunning=!1,t.Animation._addAnimation=function(t){this.animations.push(t),this._handleAnimation()},t.Animation._removeAnimation=function(t){var n,e=t.id,r=this.animations,o=r.length;for(n=0;n<o;n++)if(r[n].id===e){this.animations.splice(n,1);break}},t.Animation._runFrames=function(){var t,e,r,o,i,a,s,l,d={},c=this.animations;for(o=0;o<c.length;o++)if(e=(t=c[o]).layers,r=t.func,t._updateFrameObject(n()),a=e.length,!r||!1!==r.call(t,t.frame))for(i=0;i<a;i++)void 0!==(s=e[i])._id&&(d[s._id]=s);for(l in d)d.hasOwnProperty(l)&&d[l].draw()},t.Animation._animationLoop=function(){var n=t.Animation;n.animations.length?(n._runFrames(),o(n._animationLoop)):n.animRunning=!1},t.Animation._handleAnimation=function(){this.animRunning||(this.animRunning=!0,o(this._animationLoop))},t.BaseLayer.prototype.batchDraw=function(){var n=this,e=t.Animation;return this.batchAnim||(this.batchAnim=new e(function(){n.batchAnim.stop()},this)),this.batchAnim.isRunning()||this.batchAnim.start(),this},t.Stage.prototype.batchDraw=function(){return this.getChildren().each(function(t){t.batchDraw()}),this}}(Konva),function(){"use strict";var t={node:1,duration:1,easing:1,onFinish:1,yoyo:1},n=0,e=["fill","stroke","shadowColor"],r=function(t,n,e,r,o,i,a){this.prop=t,this.propFunc=n,this.begin=r,this._pos=r,this.duration=i,this._change=0,this.prevPos=0,this.yoyo=a,this._time=0,this._position=0,this._startTime=0,this._finish=0,this.func=e,this._change=o-this.begin,this.pause()};r.prototype={fire:function(t){var n=this[t];n&&n()},setTime:function(t){t>this.duration?this.yoyo?(this._time=this.duration,this.reverse()):this.finish():t<0?this.yoyo?(this._time=0,this.play()):this.reset():(this._time=t,this.update())},getTime:function(){return this._time},setPosition:function(t){this.prevPos=this._pos,this.propFunc(t),this._pos=t},getPosition:function(t){return void 0===t&&(t=this._time),this.func(t,this.begin,this._change,this.duration)},play:function(){this.state=2,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onPlay")},reverse:function(){this.state=3,this._time=this.duration-this._time,this._startTime=this.getTimer()-this._time,this.onEnterFrame(),this.fire("onReverse")},seek:function(t){this.pause(),this._time=t,this.update(),this.fire("onSeek")},reset:function(){this.pause(),this._time=0,this.update(),this.fire("onReset")},finish:function(){this.pause(),this._time=this.duration,this.update(),this.fire("onFinish")},update:function(){this.setPosition(this.getPosition(this._time))},onEnterFrame:function(){var t=this.getTimer()-this._startTime;2===this.state?this.setTime(t):3===this.state&&this.setTime(this.duration-t)},pause:function(){this.state=1,this.fire("onPause")},getTimer:function(){return(new Date).getTime()}},Konva.Tween=function(e){var o,i,a=this,s=e.node,l=s._id,d=e.easing||Konva.Easings.Linear,c=!!e.yoyo;o=void 0===e.duration?.3:0===e.duration?.001:e.duration,this.node=s,this._id=n++;var u=s.getLayer()||(s instanceof Konva.Stage?s.getLayers():null);for(i in u||Konva.Util.error("Tween constructor have `node` that is not in a layer. Please add node into layer first."),this.anim=new Konva.Animation(function(){a.tween.onEnterFrame()},u),this.tween=new r(i,function(t){a._tweenFunc(t)},d,0,1,1e3*o,c),this._addListeners(),Konva.Tween.attrs[l]||(Konva.Tween.attrs[l]={}),Konva.Tween.attrs[l][this._id]||(Konva.Tween.attrs[l][this._id]={}),Konva.Tween.tweens[l]||(Konva.Tween.tweens[l]={}),e)void 0===t[i]&&this._addAttr(i,e[i]);this.reset(),this.onFinish=e.onFinish,this.onReset=e.onReset},Konva.Tween.attrs={},Konva.Tween.tweens={},Konva.Tween.prototype={_addAttr:function(t,n){var r,o,i,a,s,l,d,c,u=this.node,h=u._id;if((i=Konva.Tween.tweens[h][t])&&delete Konva.Tween.attrs[h][i][t],r=u.getAttr(t),Konva.Util._isArray(n))if(o=[],s=Math.max(n.length,r.length),"points"===t&&n.length!==r.length&&(n.length>r.length?(d=r,r=Konva.Util._prepareArrayForTween(r,n,u.closed())):(l=n,n=Konva.Util._prepareArrayForTween(n,r,u.closed()))),0===t.indexOf("fill"))for(a=0;a<s;a++)if(a%2==0)o.push(n[a]-r[a]);else{var f=Konva.Util.colorToRGBA(r[a]);c=Konva.Util.colorToRGBA(n[a]),r[a]=f,o.push({r:c.r-f.r,g:c.g-f.g,b:c.b-f.b,a:c.a-f.a})}else for(a=0;a<s;a++)o.push(n[a]-r[a]);else-1!==e.indexOf(t)?(r=Konva.Util.colorToRGBA(r),o={r:(c=Konva.Util.colorToRGBA(n)).r-r.r,g:c.g-r.g,b:c.b-r.b,a:c.a-r.a}):o=n-r;Konva.Tween.attrs[h][this._id][t]={start:r,diff:o,end:n,trueEnd:l,trueStart:d},Konva.Tween.tweens[h][t]=this._id},_tweenFunc:function(t){var n,r,o,i,a,s,l,d,c=this.node,u=Konva.Tween.attrs[c._id][this._id];for(n in u){if(o=(r=u[n]).start,i=r.diff,d=r.end,Konva.Util._isArray(o))if(a=[],l=Math.max(o.length,d.length),0===n.indexOf("fill"))for(s=0;s<l;s++)s%2==0?a.push((o[s]||0)+i[s]*t):a.push("rgba("+Math.round(o[s].r+i[s].r*t)+","+Math.round(o[s].g+i[s].g*t)+","+Math.round(o[s].b+i[s].b*t)+","+(o[s].a+i[s].a*t)+")");else for(s=0;s<l;s++)a.push((o[s]||0)+i[s]*t);else a=-1!==e.indexOf(n)?"rgba("+Math.round(o.r+i.r*t)+","+Math.round(o.g+i.g*t)+","+Math.round(o.b+i.b*t)+","+(o.a+i.a*t)+")":o+i*t;c.setAttr(n,a)}},_addListeners:function(){var t=this;this.tween.onPlay=function(){t.anim.start()},this.tween.onReverse=function(){t.anim.start()},this.tween.onPause=function(){t.anim.stop()},this.tween.onFinish=function(){var n=t.node,e=Konva.Tween.attrs[n._id][t._id];e.points&&e.points.trueEnd&&n.points(e.points.trueEnd),t.onFinish&&t.onFinish.call(t)},this.tween.onReset=function(){var n=t.node,e=Konva.Tween.attrs[n._id][t._id];e.points&&e.points.trueStart&&n.points(e.points.trueStart),t.onReset&&t.onReset()}},play:function(){return this.tween.play(),this},reverse:function(){return this.tween.reverse(),this},reset:function(){return this.tween.reset(),this},seek:function(t){return this.tween.seek(1e3*t),this},pause:function(){return this.tween.pause(),this},finish:function(){return this.tween.finish(),this},destroy:function(){var t,n=this.node._id,e=this._id,r=Konva.Tween.tweens[n];for(t in this.pause(),r)delete Konva.Tween.tweens[n][t];delete Konva.Tween.attrs[n][e]}},Konva.Node.prototype.to=function(t){var n=t.onFinish;t.node=this,t.onFinish=function(){this.destroy(),n&&n()},new Konva.Tween(t).play()},Konva.Easings={BackEaseIn:function(t,n,e,r){var o=1.70158;return e*(t/=r)*t*((o+1)*t-o)+n},BackEaseOut:function(t,n,e,r){var o=1.70158;return e*((t=t/r-1)*t*((o+1)*t+o)+1)+n},BackEaseInOut:function(t,n,e,r){var o=1.70158;return(t/=r/2)<1?e/2*(t*t*((1+(o*=1.525))*t-o))+n:e/2*((t-=2)*t*((1+(o*=1.525))*t+o)+2)+n},ElasticEaseIn:function(t,n,e,r,o,i){var a=0;return 0===t?n:1==(t/=r)?n+e:(i||(i=.3*r),!o||o<Math.abs(e)?(o=e,a=i/4):a=i/(2*Math.PI)*Math.asin(e/o),-o*Math.pow(2,10*(t-=1))*Math.sin((t*r-a)*(2*Math.PI)/i)+n)},ElasticEaseOut:function(t,n,e,r,o,i){var a=0;return 0===t?n:1==(t/=r)?n+e:(i||(i=.3*r),!o||o<Math.abs(e)?(o=e,a=i/4):a=i/(2*Math.PI)*Math.asin(e/o),o*Math.pow(2,-10*t)*Math.sin((t*r-a)*(2*Math.PI)/i)+e+n)},ElasticEaseInOut:function(t,n,e,r,o,i){var a=0;return 0===t?n:2==(t/=r/2)?n+e:(i||(i=r*(.3*1.5)),!o||o<Math.abs(e)?(o=e,a=i/4):a=i/(2*Math.PI)*Math.asin(e/o),t<1?o*Math.pow(2,10*(t-=1))*Math.sin((t*r-a)*(2*Math.PI)/i)*-.5+n:o*Math.pow(2,-10*(t-=1))*Math.sin((t*r-a)*(2*Math.PI)/i)*.5+e+n)},BounceEaseOut:function(t,n,e,r){return(t/=r)<1/2.75?e*(7.5625*t*t)+n:t<2/2.75?e*(7.5625*(t-=1.5/2.75)*t+.75)+n:t<2.5/2.75?e*(7.5625*(t-=2.25/2.75)*t+.9375)+n:e*(7.5625*(t-=2.625/2.75)*t+.984375)+n},BounceEaseIn:function(t,n,e,r){return e-Konva.Easings.BounceEaseOut(r-t,0,e,r)+n},BounceEaseInOut:function(t,n,e,r){return t<r/2?.5*Konva.Easings.BounceEaseIn(2*t,0,e,r)+n:.5*Konva.Easings.BounceEaseOut(2*t-r,0,e,r)+.5*e+n},EaseIn:function(t,n,e,r){return e*(t/=r)*t+n},EaseOut:function(t,n,e,r){return-e*(t/=r)*(t-2)+n},EaseInOut:function(t,n,e,r){return(t/=r/2)<1?e/2*t*t+n:-e/2*(--t*(t-2)-1)+n},StrongEaseIn:function(t,n,e,r){return e*(t/=r)*t*t*t*t+n},StrongEaseOut:function(t,n,e,r){return e*((t=t/r-1)*t*t*t*t+1)+n},StrongEaseInOut:function(t,n,e,r){return(t/=r/2)<1?e/2*t*t*t*t*t+n:e/2*((t-=2)*t*t*t*t+2)+n},Linear:function(t,n,e,r){return e*t/r+n}}}(),function(){"use strict";Konva.DD={anim:new Konva.Animation(function(){var t=this.dirty;return this.dirty=!1,t}),isDragging:!1,justDragged:!1,offset:{x:0,y:0},node:null,_drag:function(t){var n=Konva.DD,e=n.node;if(e){if(!n.isDragging){var r=e.getStage().getPointerPosition();r||(e.getStage()._setPointerPosition(t),r=e.getStage().getPointerPosition());var o=e.dragDistance();if(Math.max(Math.abs(r.x-n.startPointerPos.x),Math.abs(r.y-n.startPointerPos.y))<o)return}if(e.getStage()._setPointerPosition(t),!n.isDragging&&(n.isDragging=!0,e.fire("dragstart",{type:"dragstart",target:e,evt:t},!0),!e.isDragging()))return;e._setDragPosition(t),e.fire("dragmove",{type:"dragmove",target:e,evt:t},!0)}},_endDragBefore:function(t){var n,e=Konva.DD,r=e.node;r&&(n=r.getLayer(),e.anim.stop(),e.isDragging&&(e.isDragging=!1,e.justDragged=!0,Konva.listenClickTap=!1,t&&(t.dragEndNode=r)),delete e.node,(r.getLayer()||n||r instanceof Konva.Stage)&&(n||r).draw())},_endDragAfter:function(t){var n=(t=t||{}).dragEndNode;t&&n&&n.fire("dragend",{type:"dragend",target:n,evt:t},!0)}},Konva.Node.prototype.startDrag=function(){var t=Konva.DD,n=this.getStage(),e=this.getLayer(),r=n.getPointerPosition(),o=this.getAbsolutePosition();r&&(t.node&&t.node.stopDrag(),t.node=this,t.startPointerPos=r,t.offset.x=r.x-o.x,t.offset.y=r.y-o.y,t.anim.setLayers(e||this.getLayers()),t.anim.start(),this._setDragPosition())},Konva.Node.prototype._setDragPosition=function(t){var n=Konva.DD,e=this.getStage().getPointerPosition(),r=this.getDragBoundFunc();if(e){var o={x:e.x-n.offset.x,y:e.y-n.offset.y};void 0!==r&&(o=r.call(this,o,t)),this.setAbsolutePosition(o),this._lastPos&&this._lastPos.x===o.x&&this._lastPos.y===o.y||(n.anim.dirty=!0),this._lastPos=o}},Konva.Node.prototype.stopDrag=function(){var t=Konva.DD,n={};t._endDragBefore(n),t._endDragAfter(n)},Konva.Node.prototype.setDraggable=function(t){this._setAttr("draggable",t),this._dragChange()};var t=Konva.Node.prototype.remove;Konva.Node.prototype.__originalRemove=t,Konva.Node.prototype.remove=function(){var n=Konva.DD;n.node&&n.node._id===this._id&&this.stopDrag(),t.call(this)},Konva.Node.prototype.isDragging=function(){var t=Konva.DD;return!(!t.node||t.node._id!==this._id||!t.isDragging)},Konva.Node.prototype._listenDrag=function(){var t=this;this._dragCleanup(),"Stage"===this.getClassName()?this.on("contentMousedown.konva contentTouchstart.konva",function(n){Konva.DD.node||t.startDrag(n)}):this.on("mousedown.konva touchstart.konva",function(n){1!==n.evt.button&&2!==n.evt.button&&(Konva.DD.node||t.startDrag(n))})},Konva.Node.prototype._dragChange=function(){if(this.attrs.draggable)this._listenDrag();else{this._dragCleanup();var t=this.getStage(),n=Konva.DD;t&&n.node&&n.node._id===this._id&&n.node.stopDrag()}},Konva.Node.prototype._dragCleanup=function(){"Stage"===this.getClassName()?(this.off("contentMousedown.konva"),this.off("contentTouchstart.konva")):(this.off("mousedown.konva"),this.off("touchstart.konva"))},Konva.Factory.addGetterSetter(Konva.Node,"dragBoundFunc"),Konva.Factory.addGetter(Konva.Node,"draggable",!1),Konva.Factory.addOverloadedGetterSetter(Konva.Node,"draggable"),Konva.isBrowser&&(window.addEventListener("mouseup",Konva.DD._endDragBefore,!0),window.addEventListener("touchend",Konva.DD._endDragBefore,!0),window.addEventListener("mousemove",Konva.DD._drag),window.addEventListener("touchmove",Konva.DD._drag),window.addEventListener("mouseup",Konva.DD._endDragAfter,!1),window.addEventListener("touchend",Konva.DD._endDragAfter,!1))}(),function(){"use strict";Konva.Rect=function(t){this.___init(t)},Konva.Rect.prototype={___init:function(t){Konva.Shape.call(this,t),this.className="Rect",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var n=this.getCornerRadius(),e=this.getWidth(),r=this.getHeight();t.beginPath(),n?(n=Math.min(n,e/2,r/2),t.moveTo(n,0),t.lineTo(e-n,0),t.arc(e-n,n,n,3*Math.PI/2,0,!1),t.lineTo(e,r-n),t.arc(e-n,r-n,n,0,Math.PI/2,!1),t.lineTo(n,r),t.arc(n,r-n,n,Math.PI/2,Math.PI,!1),t.lineTo(0,n),t.arc(n,n,n,Math.PI,3*Math.PI/2,!1)):t.rect(0,0,e,r),t.closePath(),t.fillStrokeShape(this)}},Konva.Util.extend(Konva.Rect,Konva.Shape),Konva.Factory.addGetterSetter(Konva.Rect,"cornerRadius",0,Konva.Validators.getNumberValidator()),Konva.Collection.mapMethods(Konva.Rect)}(),function(t){"use strict";var n=2*Math.PI-1e-4;t.Circle=function(t){this.___init(t)},t.Circle.prototype={_centroid:!0,___init:function(n){t.Shape.call(this,n),this.className="Circle",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){t.beginPath(),t.arc(0,0,this.getRadius(),0,n,!1),t.closePath(),t.fillStrokeShape(this)},getWidth:function(){return 2*this.getRadius()},getHeight:function(){return 2*this.getRadius()},setWidth:function(n){t.Node.prototype.setWidth.call(this,n),this.radius()!==n/2&&this.setRadius(n/2)},setHeight:function(n){t.Node.prototype.setHeight.call(this,n),this.radius()!==n/2&&this.setRadius(n/2)}},t.Util.extend(t.Circle,t.Shape),t.Factory.addGetterSetter(t.Circle,"radius",0,t.Validators.getNumberValidator()),t.Factory.addOverloadedGetterSetter(t.Circle,"radius"),t.Collection.mapMethods(t.Circle)}(Konva),function(){"use strict";var t=2*Math.PI-1e-4;Konva.Ellipse=function(t){this.___init(t)},Konva.Ellipse.prototype={_centroid:!0,___init:function(t){Konva.Shape.call(this,t),this.className="Ellipse",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(n){var e=this.getRadiusX(),r=this.getRadiusY();n.beginPath(),n.save(),e!==r&&n.scale(1,r/e),n.arc(0,0,e,0,t,!1),n.restore(),n.closePath(),n.fillStrokeShape(this)},getWidth:function(){return 2*this.getRadiusX()},getHeight:function(){return 2*this.getRadiusY()},setWidth:function(t){Konva.Node.prototype.setWidth.call(this,t),this.setRadius({x:t/2})},setHeight:function(t){Konva.Node.prototype.setHeight.call(this,t),this.setRadius({y:t/2})}},Konva.Util.extend(Konva.Ellipse,Konva.Shape),Konva.Factory.addComponentsGetterSetter(Konva.Ellipse,"radius",["x","y"]),Konva.Factory.addGetterSetter(Konva.Ellipse,"radiusX",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Ellipse,"radiusY",0,Konva.Validators.getNumberValidator()),Konva.Collection.mapMethods(Konva.Ellipse)}(),function(){"use strict";var t=2*Math.PI-1e-4;Konva.Ring=function(t){this.___init(t)},Konva.Ring.prototype={_centroid:!0,___init:function(t){Konva.Shape.call(this,t),this.className="Ring",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(n){n.beginPath(),n.arc(0,0,this.getInnerRadius(),0,t,!1),n.moveTo(this.getOuterRadius(),0),n.arc(0,0,this.getOuterRadius(),t,0,!0),n.closePath(),n.fillStrokeShape(this)},getWidth:function(){return 2*this.getOuterRadius()},getHeight:function(){return 2*this.getOuterRadius()},setWidth:function(t){Konva.Node.prototype.setWidth.call(this,t),this.outerRadius()!==t/2&&this.setOuterRadius(t/2)},setHeight:function(t){Konva.Node.prototype.setHeight.call(this,t),this.outerRadius()!==t/2&&this.setOuterRadius(t/2)},setOuterRadius:function(t){this._setAttr("outerRadius",t),this.setWidth(2*t),this.setHeight(2*t)}},Konva.Util.extend(Konva.Ring,Konva.Shape),Konva.Factory.addGetterSetter(Konva.Ring,"innerRadius",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetter(Konva.Ring,"outerRadius",0,Konva.Validators.getNumberValidator()),Konva.Factory.addOverloadedGetterSetter(Konva.Ring,"outerRadius"),Konva.Collection.mapMethods(Konva.Ring)}(),function(){"use strict";Konva.Wedge=function(t){this.___init(t)},Konva.Wedge.prototype={_centroid:!0,___init:function(t){Konva.Shape.call(this,t),this.className="Wedge",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){t.beginPath(),t.arc(0,0,this.getRadius(),0,Konva.getAngle(this.getAngle()),this.getClockwise()),t.lineTo(0,0),t.closePath(),t.fillStrokeShape(this)},getWidth:function(){return 2*this.getRadius()},getHeight:function(){return 2*this.getRadius()},setWidth:function(t){Konva.Node.prototype.setWidth.call(this,t),this.radius()!==t/2&&this.setRadius(t/2)},setHeight:function(t){Konva.Node.prototype.setHeight.call(this,t),this.radius()!==t/2&&this.setRadius(t/2)}},Konva.Util.extend(Konva.Wedge,Konva.Shape),Konva.Factory.addGetterSetter(Konva.Wedge,"radius",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Wedge,"angle",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Wedge,"clockwise",!1),Konva.Factory.backCompat(Konva.Wedge,{angleDeg:"angle",getAngleDeg:"getAngle",setAngleDeg:"setAngle"}),Konva.Collection.mapMethods(Konva.Wedge)}(),function(t){"use strict";t.Arc=function(t){this.___init(t)},t.Arc.prototype={_centroid:!0,___init:function(n){t.Shape.call(this,n),this.className="Arc",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(n){var e=t.getAngle(this.angle()),r=this.clockwise();n.beginPath(),n.arc(0,0,this.getOuterRadius(),0,e,r),n.arc(0,0,this.getInnerRadius(),e,0,!r),n.closePath(),n.fillStrokeShape(this)},getWidth:function(){return 2*this.getOuterRadius()},getHeight:function(){return 2*this.getOuterRadius()},setWidth:function(n){t.Node.prototype.setWidth.call(this,n),this.getOuterRadius()!==n/2&&this.setOuterRadius(n/2)},setHeight:function(n){t.Node.prototype.setHeight.call(this,n),this.getOuterRadius()!==n/2&&this.setOuterRadius(n/2)}},t.Util.extend(t.Arc,t.Shape),t.Factory.addGetterSetter(t.Arc,"innerRadius",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Arc,"outerRadius",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Arc,"angle",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Arc,"clockwise",!1),t.Collection.mapMethods(t.Arc)}(Konva),function(){"use strict";Konva.Image=function(t){this.___init(t)},Konva.Image.prototype={___init:function(t){Konva.Shape.call(this,t),this.className="Image",this.sceneFunc(this._sceneFunc),this.hitFunc(this._hitFunc)},_useBufferCanvas:function(){return(this.hasShadow()||1!==this.getAbsoluteOpacity())&&this.hasStroke()&&this.getStage()},_sceneFunc:function(t){var n,e,r,o=this.getWidth(),i=this.getHeight(),a=this.getImage();a&&(n=this.getCropWidth(),e=this.getCropHeight(),r=n&&e?[a,this.getCropX(),this.getCropY(),n,e,0,0,o,i]:[a,0,0,o,i]),(this.hasFill()||this.hasStroke())&&(t.beginPath(),t.rect(0,0,o,i),t.closePath(),t.fillStrokeShape(this)),a&&t.drawImage.apply(t,r)},_hitFunc:function(t){var n=this.getWidth(),e=this.getHeight();t.beginPath(),t.rect(0,0,n,e),t.closePath(),t.fillStrokeShape(this)},getWidth:function(){var t=this.getImage();return this.attrs.width||(t?t.width:0)},getHeight:function(){var t=this.getImage();return this.attrs.height||(t?t.height:0)}},Konva.Util.extend(Konva.Image,Konva.Shape),Konva.Factory.addGetterSetter(Konva.Image,"image"),Konva.Factory.addComponentsGetterSetter(Konva.Image,"crop",["x","y","width","height"]),Konva.Factory.addGetterSetter(Konva.Image,"cropX",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Image,"cropY",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Image,"cropWidth",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Image,"cropHeight",0,Konva.Validators.getNumberValidator()),Konva.Collection.mapMethods(Konva.Image),Konva.Image.fromURL=function(t,n){var e=new Image;e.onload=function(){var t=new Konva.Image({image:e});n(t)},e.crossOrigin="Anonymous",e.src=t}}(),function(){"use strict";var t,n="2d",e=["fontFamily","fontSize","fontStyle","fontVariant","padding","align","verticalAlign","lineHeight","text","width","height","wrap","ellipsis","letterSpacing"],r=e.length;function o(){return t||(t=Konva.Util.createCanvasElement().getContext(n))}function i(t){t.fillText(this.partialText,0,0)}function a(t){t.strokeText(this.partialText,0,0)}Konva.Text=function(t){this.___init(t)},Konva.Text.prototype={___init:function(t){(t=t||{}).fillLinearGradientColorStops||t.fillRadialGradientColorStops||(t.fill=t.fill||"black"),Konva.Shape.call(this,t),this._fillFunc=i,this._strokeFunc=a,this.className="Text";for(var n=0;n<r;n++)this.on(e[n]+"Change.konva",this._setTextData);this._setTextData(),this.sceneFunc(this._sceneFunc),this.hitFunc(this._hitFunc)},_sceneFunc:function(t){var n,e=this.getPadding(),r=this.getTextHeight(),o=this.getLineHeight()*r,i=this.textArr,a=i.length,s=this.getVerticalAlign(),l=0,d=this.getAlign(),c=this.getWidth(),u=this.getLetterSpacing(),h=this.textDecoration(),f=this.fill(),p=this.fontSize();for(t.setAttr("font",this._getContextFont()),t.setAttr("textBaseline","middle"),t.setAttr("textAlign","left"),"middle"===s?l=(this.getHeight()-a*o-2*e)/2:"bottom"===s&&(l=this.getHeight()-a*o-2*e),e?(t.translate(e,0),t.translate(0,l+e+o/2)):t.translate(0,l+o/2),n=0;n<a;n++){var m,g,b,v=i[n],x=v.text,y=v.width,w=n!==a-1;if(t.save(),"right"===d?t.translate(c-y-2*e,0):"center"===d&&t.translate((c-y-2*e)/2,0),-1!==h.indexOf("underline")&&(t.save(),t.beginPath(),t.moveTo(0,Math.round(o/2)),g=0===(m=x.split(" ").length-1),b="justify"===d&&w&&!g?c-2*e:y,t.lineTo(Math.round(b),Math.round(o/2)),t.lineWidth=p/15,t.strokeStyle=f,t.stroke(),t.restore()),-1!==h.indexOf("line-through")&&(t.save(),t.beginPath(),t.moveTo(0,0),g=0===(m=x.split(" ").length-1),b="justify"===d&&w&&!g?c-2*e:y,t.lineTo(Math.round(b),0),t.lineWidth=p/15,t.strokeStyle=f,t.stroke(),t.restore()),0!==u||"justify"===d){m=x.split(" ").length-1;for(var _=0;_<x.length;_++){var k=x[_];" "===k&&n!==a-1&&"justify"===d&&t.translate(Math.floor((c-2*e-y)/m),0),this.partialText=k,t.fillStrokeShape(this),t.translate(Math.round(this._getTextSize(k).width)+u,0)}}else this.partialText=x,t.fillStrokeShape(this);t.restore(),a>1&&t.translate(0,o)}},_hitFunc:function(t){var n=this.getWidth(),e=this.getHeight();t.beginPath(),t.rect(0,0,n,e),t.closePath(),t.fillStrokeShape(this)},setText:function(t){var n=Konva.Util._isString(t)?t:(t||"").toString();return this._setAttr("text",n),this},getWidth:function(){return"auto"===this.attrs.width||void 0===this.attrs.width?this.getTextWidth()+2*this.getPadding():this.attrs.width},getHeight:function(){return"auto"===this.attrs.height||void 0===this.attrs.height?this.getTextHeight()*this.textArr.length*this.getLineHeight()+2*this.getPadding():this.attrs.height},getTextWidth:function(){return this.textWidth},getTextHeight:function(){return this.textHeight},_getTextSize:function(t){var n,e=o(),r=this.getFontSize();return e.save(),e.font=this._getContextFont(),n=e.measureText(t),e.restore(),{width:n.width,height:parseInt(r,10)}},_getContextFont:function(){return Konva.UA.isIE?this.getFontStyle()+" "+this.getFontSize()+"px "+this.getFontFamily():this.getFontStyle()+" "+this.getFontVariant()+" "+this.getFontSize()+"px "+this.getFontFamily()},_addTextLine:function(t){"justify"===this.align()&&(t=t.trim());var n=this._getTextWidth(t);return this.textArr.push({text:t,width:n})},_getTextWidth:function(t){var n=this.getLetterSpacing(),e=t.length;return o().measureText(t).width+(e?n*(e-1):0)},_setTextData:function(){var t=this.getText().split("\n"),n=+this.getFontSize(),e=0,r=this.getLineHeight()*n,i=this.attrs.width,a=this.attrs.height,s="auto"!==i,l="auto"!==a,d=this.getPadding(),c=i-2*d,u=a-2*d,h=0,f=this.getWrap(),p="none"!==f,m="char"!==f&&p,g=this.getEllipsis()&&!p;this.textArr=[],o().font=this._getContextFont();for(var b=0,v=t.length;b<v;++b){var x=t[b],y=g?this._getTextWidth("â¦"):0,w=this._getTextWidth(x);if(s&&w>c)for(;x.length>0;){for(var _=0,k=x.length,S="",C=0;_<k;){var T=_+k>>>1,E=x.slice(0,T+1),A=this._getTextWidth(E)+y;A<=c?(_=T+1,S=E+(g?"â¦":""),C=A):k=T}if(!S)break;if(m){var K,N=x[S.length];(K=(" "===N||"-"===N)&&C<=c?S.length:Math.max(S.lastIndexOf(" "),S.lastIndexOf("-"))+1)>0&&(_=K,S=S.slice(0,_),C=this._getTextWidth(S))}if(S=Konva.Util.trimRight(S),this._addTextLine(S),e=Math.max(e,C),h+=r,!p||l&&h+r>u)break;if(x=x.slice(_),(x=Konva.Util.trimLeft(x)).length>0&&(w=this._getTextWidth(x))<=c){this._addTextLine(x),h+=r,e=Math.max(e,w);break}}else this._addTextLine(x),h+=r,e=Math.max(e,w);if(l&&h+r>u)break}this.textHeight=n,this.textWidth=e}},Konva.Util.extend(Konva.Text,Konva.Shape),Konva.Factory.addSetter(Konva.Node,"width",Konva.Validators.getNumberOrAutoValidator()),Konva.Factory.addSetter(Konva.Node,"height",Konva.Validators.getNumberOrAutoValidator()),Konva.Factory.addGetterSetter(Konva.Text,"fontFamily","Arial"),Konva.Factory.addGetterSetter(Konva.Text,"fontSize",12,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Text,"fontStyle","normal"),Konva.Factory.addGetterSetter(Konva.Text,"fontVariant","normal"),Konva.Factory.addGetterSetter(Konva.Text,"padding",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Text,"align","left"),Konva.Factory.addGetterSetter(Konva.Text,"verticalAlign","top"),Konva.Factory.addGetterSetter(Konva.Text,"lineHeight",1,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Text,"wrap","word"),Konva.Factory.addGetterSetter(Konva.Text,"ellipsis",!1),Konva.Factory.addGetterSetter(Konva.Text,"letterSpacing",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetter(Konva.Text,"text",""),Konva.Factory.addOverloadedGetterSetter(Konva.Text,"text"),Konva.Factory.addGetterSetter(Konva.Text,"textDecoration",""),Konva.Collection.mapMethods(Konva.Text)}(),function(){"use strict";Konva.Line=function(t){this.___init(t)},Konva.Line.prototype={___init:function(t){Konva.Shape.call(this,t),this.className="Line",this.on("pointsChange.konva tensionChange.konva closedChange.konva bezierChange.konva",function(){this._clearCache("tensionPoints")}),this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var n,e,r,o=this.getPoints(),i=o.length,a=this.getTension(),s=this.getClosed(),l=this.getBezier();if(i){if(t.beginPath(),t.moveTo(o[0],o[1]),0!==a&&i>4){for(e=(n=this.getTensionPoints()).length,r=s?0:4,s||t.quadraticCurveTo(n[0],n[1],n[2],n[3]);r<e-2;)t.bezierCurveTo(n[r++],n[r++],n[r++],n[r++],n[r++],n[r++]);s||t.quadraticCurveTo(n[e-2],n[e-1],o[i-2],o[i-1])}else if(l)for(r=2;r<i;)t.bezierCurveTo(o[r++],o[r++],o[r++],o[r++],o[r++],o[r++]);else for(r=2;r<i;r+=2)t.lineTo(o[r],o[r+1]);s?(t.closePath(),t.fillStrokeShape(this)):t.strokeShape(this)}},getTensionPoints:function(){return this._getCache("tensionPoints",this._getTensionPoints)},_getTensionPoints:function(){return this.getClosed()?this._getTensionPointsClosed():Konva.Util._expandPoints(this.getPoints(),this.getTension())},_getTensionPointsClosed:function(){var t=this.getPoints(),n=t.length,e=this.getTension(),r=Konva.Util,o=r._getControlPoints(t[n-2],t[n-1],t[0],t[1],t[2],t[3],e),i=r._getControlPoints(t[n-4],t[n-3],t[n-2],t[n-1],t[0],t[1],e),a=Konva.Util._expandPoints(t,e);return[o[2],o[3]].concat(a).concat([i[0],i[1],t[n-2],t[n-1],i[2],i[3],o[0],o[1],t[0],t[1]])},getWidth:function(){return this.getSelfRect().width},getHeight:function(){return this.getSelfRect().height},getSelfRect:function(){for(var t,n,e,r=(t=0!==this.getTension()?this._getTensionPoints():this.getPoints())[0],o=t[0],i=t[1],a=t[1],s=0;s<t.length/2;s++)n=t[2*s],e=t[2*s+1],r=Math.min(r,n),o=Math.max(o,n),i=Math.min(i,e),a=Math.max(a,e);return{x:Math.round(r),y:Math.round(i),width:Math.round(o-r),height:Math.round(a-i)}}},Konva.Util.extend(Konva.Line,Konva.Shape),Konva.Factory.addGetterSetter(Konva.Line,"closed",!1),Konva.Factory.addGetterSetter(Konva.Line,"bezier",!1),Konva.Factory.addGetterSetter(Konva.Line,"tension",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Line,"points",[],Konva.Validators.getNumberArrayValidator()),Konva.Collection.mapMethods(Konva.Line)}(),function(){"use strict";Konva.Sprite=function(t){this.___init(t)},Konva.Sprite.prototype={___init:function(t){Konva.Shape.call(this,t),this.className="Sprite",this._updated=!0;var n=this;this.anim=new Konva.Animation(function(){var t=n._updated;return n._updated=!1,t}),this.on("animationChange.konva",function(){this.frameIndex(0)}),this.on("frameIndexChange.konva",function(){this._updated=!0}),this.on("frameRateChange.konva",function(){this.anim.isRunning()&&(clearInterval(this.interval),this._setInterval())}),this.sceneFunc(this._sceneFunc),this.hitFunc(this._hitFunc)},_sceneFunc:function(t){var n=this.getAnimation(),e=this.frameIndex(),r=4*e,o=this.getAnimations()[n],i=this.frameOffsets(),a=o[r+0],s=o[r+1],l=o[r+2],d=o[r+3],c=this.getImage();if((this.hasFill()||this.hasStroke())&&(t.beginPath(),t.rect(0,0,l,d),t.closePath(),t.fillStrokeShape(this)),c)if(i){var u=i[n],h=2*e;t.drawImage(c,a,s,l,d,u[h+0],u[h+1],l,d)}else t.drawImage(c,a,s,l,d,0,0,l,d)},_hitFunc:function(t){var n=this.getAnimation(),e=this.frameIndex(),r=4*e,o=this.getAnimations()[n],i=this.frameOffsets(),a=o[r+2],s=o[r+3];if(t.beginPath(),i){var l=i[n],d=2*e;t.rect(l[d+0],l[d+1],a,s)}else t.rect(0,0,a,s);t.closePath(),t.fillShape(this)},_useBufferCanvas:function(){return(this.hasShadow()||1!==this.getAbsoluteOpacity())&&this.hasStroke()},_setInterval:function(){var t=this;this.interval=setInterval(function(){t._updateIndex()},1e3/this.getFrameRate())},start:function(){if(!this.isRunning()){var t=this.getLayer();this.anim.setLayers(t),this._setInterval(),this.anim.start()}},stop:function(){this.anim.stop(),clearInterval(this.interval)},isRunning:function(){return this.anim.isRunning()},_updateIndex:function(){var t=this.frameIndex(),n=this.getAnimation();t<this.getAnimations()[n].length/4-1?this.frameIndex(t+1):this.frameIndex(0)}},Konva.Util.extend(Konva.Sprite,Konva.Shape),Konva.Factory.addGetterSetter(Konva.Sprite,"animation"),Konva.Factory.addGetterSetter(Konva.Sprite,"animations"),Konva.Factory.addGetterSetter(Konva.Sprite,"frameOffsets"),Konva.Factory.addGetterSetter(Konva.Sprite,"image"),Konva.Factory.addGetterSetter(Konva.Sprite,"frameIndex",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Sprite,"frameRate",17,Konva.Validators.getNumberValidator()),Konva.Factory.backCompat(Konva.Sprite,{index:"frameIndex",getIndex:"getFrameIndex",setIndex:"setFrameIndex"}),Konva.Collection.mapMethods(Konva.Sprite)}(),function(){"use strict";Konva.Path=function(t){this.___init(t)},Konva.Path.prototype={___init:function(t){this.dataArray=[];var n=this;Konva.Shape.call(this,t),this.className="Path",this.dataArray=Konva.Path.parsePathData(this.getData()),this.pathLength=0;for(var e=0;e<this.dataArray.length;++e)this.pathLength+=this.dataArray[e].pathLength;this.on("dataChange.konva",function(){n.dataArray=Konva.Path.parsePathData(this.getData()),this.pathLength=0;for(var t=0;t<this.dataArray.length;++t)this.pathLength+=this.dataArray[t].pathLength}),this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var n=this.dataArray;t.beginPath();for(var e=0;e<n.length;e++){var r=n[e].command,o=n[e].points;switch(r){case"L":t.lineTo(o[0],o[1]);break;case"M":t.moveTo(o[0],o[1]);break;case"C":t.bezierCurveTo(o[0],o[1],o[2],o[3],o[4],o[5]);break;case"Q":t.quadraticCurveTo(o[0],o[1],o[2],o[3]);break;case"A":var i=o[0],a=o[1],s=o[2],l=o[3],d=o[4],c=o[5],u=o[6],h=o[7],f=s>l?s:l,p=s>l?1:s/l,m=s>l?l/s:1;t.translate(i,a),t.rotate(u),t.scale(p,m),t.arc(0,0,f,d,d+c,1-h),t.scale(1/p,1/m),t.rotate(-u),t.translate(-i,-a);break;case"z":t.closePath()}}t.fillStrokeShape(this)},getSelfRect:function(){var t=[];this.dataArray.forEach(function(n){t=t.concat(n.points)});for(var n,e,r=t[0],o=t[0],i=t[1],a=t[1],s=0;s<t.length/2;s++)n=t[2*s],e=t[2*s+1],isNaN(n)||(r=Math.min(r,n),o=Math.max(o,n)),isNaN(e)||(i=Math.min(i,e),a=Math.max(a,e));return{x:Math.round(r),y:Math.round(i),width:Math.round(o-r),height:Math.round(a-i)}},getLength:function(){return this.pathLength},getPointAtLength:function(t){var n,e=0,r=this.dataArray.length;if(!r)return null;for(;e<r&&t>this.dataArray[e].pathLength;)t-=this.dataArray[e].pathLength,++e;if(e===r)return{x:(n=this.dataArray[e-1].points.slice(-2))[0],y:n[1]};if(t<.01)return{x:(n=this.dataArray[e].points.slice(0,2))[0],y:n[1]};var o=this.dataArray[e],i=o.points;switch(o.command){case"L":return Konva.Path.getPointOnLine(t,o.start.x,o.start.y,i[0],i[1]);case"C":return Konva.Path.getPointOnCubicBezier(t/o.pathLength,o.start.x,o.start.y,i[0],i[1],i[2],i[3],i[4],i[5]);case"Q":return Konva.Path.getPointOnQuadraticBezier(t/o.pathLength,o.start.x,o.start.y,i[0],i[1],i[2],i[3]);case"A":var a=i[0],s=i[1],l=i[2],d=i[3],c=i[4],u=i[5],h=i[6];return c+=u*t/o.pathLength,Konva.Path.getPointOnEllipticalArc(a,s,l,d,c,h)}return null}},Konva.Util.extend(Konva.Path,Konva.Shape),Konva.Path.getLineLength=function(t,n,e,r){return Math.sqrt((e-t)*(e-t)+(r-n)*(r-n))},Konva.Path.getPointOnLine=function(t,n,e,r,o,i,a){void 0===i&&(i=n),void 0===a&&(a=e);var s=(o-e)/(r-n+1e-8),l=Math.sqrt(t*t/(1+s*s));r<n&&(l*=-1);var d,c=s*l;if(r===n)d={x:i,y:a+c};else if((a-e)/(i-n+1e-8)===s)d={x:i+l,y:a+c};else{var u,h,f=this.getLineLength(n,e,r,o);if(f<1e-8)return;var p=(i-n)*(r-n)+(a-e)*(o-e);u=n+(p/=f*f)*(r-n),h=e+p*(o-e);var m=this.getLineLength(i,a,u,h),g=Math.sqrt(t*t-m*m);l=Math.sqrt(g*g/(1+s*s)),r<n&&(l*=-1),d={x:u+l,y:h+(c=s*l)}}return d},Konva.Path.getPointOnCubicBezier=function(t,n,e,r,o,i,a,s,l){function d(t){return t*t*t}function c(t){return 3*t*t*(1-t)}function u(t){return 3*t*(1-t)*(1-t)}function h(t){return(1-t)*(1-t)*(1-t)}return{x:s*d(t)+i*c(t)+r*u(t)+n*h(t),y:l*d(t)+a*c(t)+o*u(t)+e*h(t)}},Konva.Path.getPointOnQuadraticBezier=function(t,n,e,r,o,i,a){function s(t){return t*t}function l(t){return 2*t*(1-t)}function d(t){return(1-t)*(1-t)}return{x:i*s(t)+r*l(t)+n*d(t),y:a*s(t)+o*l(t)+e*d(t)}},Konva.Path.getPointOnEllipticalArc=function(t,n,e,r,o,i){var a=Math.cos(i),s=Math.sin(i),l=e*Math.cos(o),d=r*Math.sin(o);return{x:t+(l*a-d*s),y:n+(l*s+d*a)}},Konva.Path.parsePathData=function(t){if(!t)return[];var n=t,e=["m","M","l","L","v","V","h","H","z","Z","c","C","q","Q","t","T","s","S","a","A"];n=n.replace(new RegExp(" ","g"),",");for(var r=0;r<e.length;r++)n=n.replace(new RegExp(e[r],"g"),"|"+e[r]);var o,i=n.split("|"),a=[],s=[],l=0,d=0,c=/([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:e[-+]?\d+)?)/gi;for(r=1;r<i.length;r++){var u=i[r],h=u.charAt(0);for(u=u.slice(1),s.length=0;o=c.exec(u);)s.push(o[0]);for(var f=[],p=0,m=s.length;p<m;p++){var g=parseFloat(s[p]);isNaN(g)?f.push(0):f.push(g)}for(;f.length>0&&!isNaN(f[0]);){var b,v,x,y,w,_,k,S,C,T,E=null,A=[],K=l,N=d;switch(h){case"l":l+=f.shift(),d+=f.shift(),E="L",A.push(l,d);break;case"L":l=f.shift(),d=f.shift(),A.push(l,d);break;case"m":var D=f.shift(),O=f.shift();if(l+=D,d+=O,E="M",a.length>2&&"z"===a[a.length-1].command)for(var P=a.length-2;P>=0;P--)if("M"===a[P].command){l=a[P].points[0]+D,d=a[P].points[1]+O;break}A.push(l,d),h="l";break;case"M":l=f.shift(),d=f.shift(),E="M",A.push(l,d),h="L";break;case"h":l+=f.shift(),E="L",A.push(l,d);break;case"H":l=f.shift(),E="L",A.push(l,d);break;case"v":d+=f.shift(),E="L",A.push(l,d);break;case"V":d=f.shift(),E="L",A.push(l,d);break;case"C":A.push(f.shift(),f.shift(),f.shift(),f.shift()),l=f.shift(),d=f.shift(),A.push(l,d);break;case"c":A.push(l+f.shift(),d+f.shift(),l+f.shift(),d+f.shift()),l+=f.shift(),d+=f.shift(),E="C",A.push(l,d);break;case"S":v=l,x=d,"C"===(b=a[a.length-1]).command&&(v=l+(l-b.points[2]),x=d+(d-b.points[3])),A.push(v,x,f.shift(),f.shift()),l=f.shift(),d=f.shift(),E="C",A.push(l,d);break;case"s":v=l,x=d,"C"===(b=a[a.length-1]).command&&(v=l+(l-b.points[2]),x=d+(d-b.points[3])),A.push(v,x,l+f.shift(),d+f.shift()),l+=f.shift(),d+=f.shift(),E="C",A.push(l,d);break;case"Q":A.push(f.shift(),f.shift()),l=f.shift(),d=f.shift(),A.push(l,d);break;case"q":A.push(l+f.shift(),d+f.shift()),l+=f.shift(),d+=f.shift(),E="Q",A.push(l,d);break;case"T":v=l,x=d,"Q"===(b=a[a.length-1]).command&&(v=l+(l-b.points[0]),x=d+(d-b.points[1])),l=f.shift(),d=f.shift(),E="Q",A.push(v,x,l,d);break;case"t":v=l,x=d,"Q"===(b=a[a.length-1]).command&&(v=l+(l-b.points[0]),x=d+(d-b.points[1])),l+=f.shift(),d+=f.shift(),E="Q",A.push(v,x,l,d);break;case"A":y=f.shift(),w=f.shift(),_=f.shift(),k=f.shift(),S=f.shift(),C=l,T=d,l=f.shift(),d=f.shift(),E="A",A=this.convertEndpointToCenterParameterization(C,T,l,d,k,S,y,w,_);break;case"a":y=f.shift(),w=f.shift(),_=f.shift(),k=f.shift(),S=f.shift(),C=l,T=d,l+=f.shift(),d+=f.shift(),E="A",A=this.convertEndpointToCenterParameterization(C,T,l,d,k,S,y,w,_)}a.push({command:E||h,points:A,start:{x:K,y:N},pathLength:this.calcLength(K,N,E||h,A)})}"z"!==h&&"Z"!==h||a.push({command:"z",points:[],start:void 0,pathLength:0})}return a},Konva.Path.calcLength=function(t,n,e,r){var o,i,a,s,l=Konva.Path;switch(e){case"L":return l.getLineLength(t,n,r[0],r[1]);case"C":for(o=0,i=l.getPointOnCubicBezier(0,t,n,r[0],r[1],r[2],r[3],r[4],r[5]),s=.01;s<=1;s+=.01)a=l.getPointOnCubicBezier(s,t,n,r[0],r[1],r[2],r[3],r[4],r[5]),o+=l.getLineLength(i.x,i.y,a.x,a.y),i=a;return o;case"Q":for(o=0,i=l.getPointOnQuadraticBezier(0,t,n,r[0],r[1],r[2],r[3]),s=.01;s<=1;s+=.01)a=l.getPointOnQuadraticBezier(s,t,n,r[0],r[1],r[2],r[3]),o+=l.getLineLength(i.x,i.y,a.x,a.y),i=a;return o;case"A":o=0;var d=r[4],c=r[5],u=r[4]+c,h=Math.PI/180;if(Math.abs(d-u)<h&&(h=Math.abs(d-u)),i=l.getPointOnEllipticalArc(r[0],r[1],r[2],r[3],d,0),c<0)for(s=d-h;s>u;s-=h)a=l.getPointOnEllipticalArc(r[0],r[1],r[2],r[3],s,0),o+=l.getLineLength(i.x,i.y,a.x,a.y),i=a;else for(s=d+h;s<u;s+=h)a=l.getPointOnEllipticalArc(r[0],r[1],r[2],r[3],s,0),o+=l.getLineLength(i.x,i.y,a.x,a.y),i=a;return a=l.getPointOnEllipticalArc(r[0],r[1],r[2],r[3],u,0),o+=l.getLineLength(i.x,i.y,a.x,a.y)}return 0},Konva.Path.convertEndpointToCenterParameterization=function(t,n,e,r,o,i,a,s,l){var d=l*(Math.PI/180),c=Math.cos(d)*(t-e)/2+Math.sin(d)*(n-r)/2,u=-1*Math.sin(d)*(t-e)/2+Math.cos(d)*(n-r)/2,h=c*c/(a*a)+u*u/(s*s);h>1&&(a*=Math.sqrt(h),s*=Math.sqrt(h));var f=Math.sqrt((a*a*(s*s)-a*a*(u*u)-s*s*(c*c))/(a*a*(u*u)+s*s*(c*c)));o===i&&(f*=-1),isNaN(f)&&(f=0);var p=f*a*u/s,m=f*-s*c/a,g=(t+e)/2+Math.cos(d)*p-Math.sin(d)*m,b=(n+r)/2+Math.sin(d)*p+Math.cos(d)*m,v=function(t){return Math.sqrt(t[0]*t[0]+t[1]*t[1])},x=function(t,n){return(t[0]*n[0]+t[1]*n[1])/(v(t)*v(n))},y=function(t,n){return(t[0]*n[1]<t[1]*n[0]?-1:1)*Math.acos(x(t,n))},w=y([1,0],[(c-p)/a,(u-m)/s]),_=[(c-p)/a,(u-m)/s],k=[(-1*c-p)/a,(-1*u-m)/s],S=y(_,k);return x(_,k)<=-1&&(S=Math.PI),x(_,k)>=1&&(S=0),0===i&&S>0&&(S-=2*Math.PI),1===i&&S<0&&(S+=2*Math.PI),[g,b,a,s,w,S,d,i]},Konva.Factory.addGetterSetter(Konva.Path,"data"),Konva.Collection.mapMethods(Konva.Path)}(),function(){"use strict";function t(t){t.fillText(this.partialText,0,0)}function n(t){t.strokeText(this.partialText,0,0)}Konva.TextPath=function(t){this.___init(t)},Konva.TextPath.prototype={___init:function(e){var r=this;this.dummyCanvas=Konva.Util.createCanvasElement(),this.dataArray=[],Konva.Shape.call(this,e),this._fillFunc=t,this._strokeFunc=n,this._fillFuncHit=t,this._strokeFuncHit=n,this.className="TextPath",this.dataArray=Konva.Path.parsePathData(this.attrs.data),this.on("dataChange.konva",function(){r.dataArray=Konva.Path.parsePathData(this.attrs.data),r._setTextData()}),this.on("textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva",r._setTextData),e&&e.getKerning&&(Konva.Util.warn('getKerning TextPath API is deprecated. Please use "kerningFunc" instead.'),this.setKerningFunc(e.getKerning)),r._setTextData(),this.sceneFunc(this._sceneFunc),this.hitFunc(this._hitFunc)},_sceneFunc:function(t){t.setAttr("font",this._getContextFont()),t.setAttr("textBaseline",this.getTextBaseline()),t.setAttr("textAlign","left"),t.save();var n=this.textDecoration(),e=this.fill(),r=this.fontSize(),o=this.glyphInfo;"underline"===n&&t.beginPath();for(var i=0;i<o.length;i++){t.save();var a=o[i].p0;t.translate(a.x,a.y),t.rotate(o[i].rotation),this.partialText=o[i].text,t.fillStrokeShape(this),"underline"===n&&(0===i&&t.moveTo(0,r/2+1),t.lineTo(r,r/2+1)),t.restore()}"underline"===n&&(t.strokeStyle=e,t.lineWidth=r/20,t.stroke()),t.restore()},_hitFunc:function(t){t.beginPath();var n=this.glyphInfo;if(n.length>=1){var e=n[0].p0;t.moveTo(e.x,e.y)}for(var r=0;r<n.length;r++){var o=n[r].p1;t.lineTo(o.x,o.y)}t.setAttr("lineWidth",this.getFontSize()),t.setAttr("strokeStyle",this.colorKey),t.stroke()},getTextWidth:function(){return this.textWidth},getTextHeight:function(){return this.textHeight},setText:function(t){Konva.Text.prototype.setText.call(this,t)},_getTextSize:function(t){var n=this.dummyCanvas.getContext("2d");n.save(),n.font=this._getContextFont();var e=n.measureText(t);return n.restore(),{width:e.width,height:parseInt(this.attrs.fontSize,10)}},_setTextData:function(){var t=this,n=this._getTextSize(this.attrs.text),e=this.getLetterSpacing(),r=this.align(),o=this.getKerningFunc();this.textWidth=n.width,this.textHeight=n.height;var i=Math.max(this.textWidth+((this.attrs.text||"").length-1)*e,0);this.glyphInfo=[];for(var a=0,s=0;s<t.dataArray.length;s++)t.dataArray[s].pathLength>0&&(a+=t.dataArray[s].pathLength);var l=0;"center"===r&&(l=Math.max(0,a/2-i/2)),"right"===r&&(l=Math.max(0,a-i));for(var d,c,u,h=this.getText().split(""),f=this.getText().split(" ").length-1,p=-1,m=0,g=function(){m=0;for(var n=t.dataArray,e=p+1;e<n.length;e++){if(n[e].pathLength>0)return p=e,n[e];"M"===n[e].command&&(d={x:n[e].points[0],y:n[e].points[1]})}return{}},b=function(n){var o=t._getTextSize(n).width+e;" "===n&&"justify"===r&&(o+=(a-i)/f);var s=0,l=0;for(c=void 0;Math.abs(o-s)/o>.01&&l<25;){l++;for(var h=s;void 0===u;)(u=g())&&h+u.pathLength<o&&(h+=u.pathLength,u=void 0);if(u==={}||void 0===d)return;var p=!1;switch(u.command){case"L":Konva.Path.getLineLength(d.x,d.y,u.points[0],u.points[1])>o?c=Konva.Path.getPointOnLine(o,d.x,d.y,u.points[0],u.points[1],d.x,d.y):u=void 0;break;case"A":var b=u.points[4],v=u.points[5],x=u.points[4]+v;0===m?m=b+1e-8:o>s?m+=Math.PI/180*v/Math.abs(v):m-=Math.PI/360*v/Math.abs(v),(v<0&&m<x||v>=0&&m>x)&&(m=x,p=!0),c=Konva.Path.getPointOnEllipticalArc(u.points[0],u.points[1],u.points[2],u.points[3],m,u.points[6]);break;case"C":0===m?m=o>u.pathLength?1e-8:o/u.pathLength:o>s?m+=(o-s)/u.pathLength:m-=(s-o)/u.pathLength,m>1&&(m=1,p=!0),c=Konva.Path.getPointOnCubicBezier(m,u.start.x,u.start.y,u.points[0],u.points[1],u.points[2],u.points[3],u.points[4],u.points[5]);break;case"Q":0===m?m=o/u.pathLength:o>s?m+=(o-s)/u.pathLength:m-=(s-o)/u.pathLength,m>1&&(m=1,p=!0),c=Konva.Path.getPointOnQuadraticBezier(m,u.start.x,u.start.y,u.points[0],u.points[1],u.points[2],u.points[3])}void 0!==c&&(s=Konva.Path.getLineLength(d.x,d.y,c.x,c.y)),p&&(p=!1,u=void 0)}},v=t._getTextSize("C").width+e,x=0;x<l/v&&(b("C"),void 0!==d&&void 0!==c);x++)d=c;for(var y=0;y<h.length&&(b(h[y]),void 0!==d&&void 0!==c);y++){var w=Konva.Path.getLineLength(d.x,d.y,c.x,c.y),_=0;if(o)try{_=o(h[y-1],h[y])*this.fontSize()}catch(t){_=0}d.x+=_,c.x+=_,this.textWidth+=_;var k=Konva.Path.getPointOnLine(_+w/2,d.x,d.y,c.x,c.y),S=Math.atan2(c.y-d.y,c.x-d.x);this.glyphInfo.push({transposeX:k.x,transposeY:k.y,text:h[y],rotation:S,p0:d,p1:c}),d=c}},getSelfRect:function(){var t=[];this.glyphInfo.forEach(function(n){t.push(n.p0.x),t.push(n.p0.y),t.push(n.p1.x),t.push(n.p1.y)});for(var n,e,r=t[0],o=t[0],i=t[0],a=t[0],s=0;s<t.length/2;s++)n=t[2*s],e=t[2*s+1],r=Math.min(r,n),o=Math.max(o,n),i=Math.min(i,e),a=Math.max(a,e);var l=this.fontSize();return{x:Math.round(r)-l/2,y:Math.round(i)-l/2,width:Math.round(o-r)+l,height:Math.round(a-i)+l}}},Konva.TextPath.prototype._getContextFont=Konva.Text.prototype._getContextFont,Konva.Util.extend(Konva.TextPath,Konva.Shape),Konva.Factory.addGetterSetter(Konva.TextPath,"data"),Konva.Factory.addGetterSetter(Konva.TextPath,"fontFamily","Arial"),Konva.Factory.addGetterSetter(Konva.TextPath,"fontSize",12,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.TextPath,"fontStyle","normal"),Konva.Factory.addGetterSetter(Konva.TextPath,"align","left"),Konva.Factory.addGetterSetter(Konva.TextPath,"letterSpacing",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.TextPath,"textBaseline","middle"),Konva.Factory.addGetterSetter(Konva.TextPath,"fontVariant","normal"),Konva.Factory.addGetter(Konva.TextPath,"text",""),Konva.Factory.addGetterSetter(Konva.TextPath,"textDecoration",null),Konva.Factory.addGetterSetter(Konva.TextPath,"kerningFunc",null),Konva.Collection.mapMethods(Konva.TextPath)}(),function(){"use strict";Konva.RegularPolygon=function(t){this.___init(t)},Konva.RegularPolygon.prototype={_centroid:!0,___init:function(t){Konva.Shape.call(this,t),this.className="RegularPolygon",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var n,e,r,o=this.attrs.sides,i=this.attrs.radius;for(t.beginPath(),t.moveTo(0,0-i),n=1;n<o;n++)e=i*Math.sin(2*n*Math.PI/o),r=-1*i*Math.cos(2*n*Math.PI/o),t.lineTo(e,r);t.closePath(),t.fillStrokeShape(this)},getWidth:function(){return 2*this.getRadius()},getHeight:function(){return 2*this.getRadius()},setWidth:function(t){Konva.Node.prototype.setWidth.call(this,t),this.radius()!==t/2&&this.setRadius(t/2)},setHeight:function(t){Konva.Node.prototype.setHeight.call(this,t),this.radius()!==t/2&&this.setRadius(t/2)}},Konva.Util.extend(Konva.RegularPolygon,Konva.Shape),Konva.Factory.addGetterSetter(Konva.RegularPolygon,"radius",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.RegularPolygon,"sides",0,Konva.Validators.getNumberValidator()),Konva.Collection.mapMethods(Konva.RegularPolygon)}(),function(){"use strict";Konva.Star=function(t){this.___init(t)},Konva.Star.prototype={_centroid:!0,___init:function(t){Konva.Shape.call(this,t),this.className="Star",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var n=this.innerRadius(),e=this.outerRadius(),r=this.numPoints();t.beginPath(),t.moveTo(0,0-e);for(var o=1;o<2*r;o++){var i=o%2==0?e:n,a=i*Math.sin(o*Math.PI/r),s=-1*i*Math.cos(o*Math.PI/r);t.lineTo(a,s)}t.closePath(),t.fillStrokeShape(this)},getWidth:function(){return 2*this.getOuterRadius()},getHeight:function(){return 2*this.getOuterRadius()},setWidth:function(t){Konva.Node.prototype.setWidth.call(this,t),this.outerRadius()!==t/2&&this.setOuterRadius(t/2)},setHeight:function(t){Konva.Node.prototype.setHeight.call(this,t),this.outerRadius()!==t/2&&this.setOuterRadius(t/2)}},Konva.Util.extend(Konva.Star,Konva.Shape),Konva.Factory.addGetterSetter(Konva.Star,"numPoints",5,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Star,"innerRadius",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Star,"outerRadius",0,Konva.Validators.getNumberValidator()),Konva.Collection.mapMethods(Konva.Star)}(),function(){"use strict";var t=["fontFamily","fontSize","fontStyle","padding","lineHeight","text","width"],n=t.length;Konva.Label=function(t){this.____init(t)},Konva.Label.prototype={____init:function(t){var n=this;Konva.Group.call(this,t),this.className="Label",this.on("add.konva",function(t){n._addListeners(t.child),n._sync()})},getText:function(){return this.find("Text")[0]},getTag:function(){return this.find("Tag")[0]},_addListeners:function(e){var r,o=this,i=function(){o._sync()};for(r=0;r<n;r++)e.on(t[r]+"Change.konva",i)},getWidth:function(){return this.getText().getWidth()},getHeight:function(){return this.getText().getHeight()},_sync:function(){var t,n,e,r,o,i,a,s=this.getText(),l=this.getTag();if(s&&l){switch(t=s.getWidth(),n=s.getHeight(),e=l.getPointerDirection(),r=l.getPointerWidth(),a=l.getPointerHeight(),o=0,i=0,e){case"up":o=t/2,i=-1*a;break;case"right":o=t+r,i=n/2;break;case"down":o=t/2,i=n+a;break;case"left":o=-1*r,i=n/2}l.setAttrs({x:-1*o,y:-1*i,width:t,height:n}),s.setAttrs({x:-1*o,y:-1*i})}}},Konva.Util.extend(Konva.Label,Konva.Group),Konva.Collection.mapMethods(Konva.Label),Konva.Tag=function(t){this.___init(t)},Konva.Tag.prototype={___init:function(t){Konva.Shape.call(this,t),this.className="Tag",this.sceneFunc(this._sceneFunc)},_sceneFunc:function(t){var n=this.getWidth(),e=this.getHeight(),r=this.getPointerDirection(),o=this.getPointerWidth(),i=this.getPointerHeight(),a=Math.min(this.getCornerRadius(),n/2,e/2);t.beginPath(),a?t.moveTo(a,0):t.moveTo(0,0),"up"===r&&(t.lineTo((n-o)/2,0),t.lineTo(n/2,-1*i),t.lineTo((n+o)/2,0)),a?(t.lineTo(n-a,0),t.arc(n-a,a,a,3*Math.PI/2,0,!1)):t.lineTo(n,0),"right"===r&&(t.lineTo(n,(e-i)/2),t.lineTo(n+o,e/2),t.lineTo(n,(e+i)/2)),a?(t.lineTo(n,e-a),t.arc(n-a,e-a,a,0,Math.PI/2,!1)):t.lineTo(n,e),"down"===r&&(t.lineTo((n+o)/2,e),t.lineTo(n/2,e+i),t.lineTo((n-o)/2,e)),a?(t.lineTo(a,e),t.arc(a,e-a,a,Math.PI/2,Math.PI,!1)):t.lineTo(0,e),"left"===r&&(t.lineTo(0,(e+i)/2),t.lineTo(-1*o,e/2),t.lineTo(0,(e-i)/2)),a&&(t.lineTo(0,a),t.arc(a,a,a,Math.PI,3*Math.PI/2,!1)),t.closePath(),t.fillStrokeShape(this)},getSelfRect:function(){var t=0,n=0,e=this.getPointerWidth(),r=this.getPointerHeight(),o=this.pointerDirection(),i=this.getWidth(),a=this.getHeight();return"up"===o?(n-=r,a+=r):"down"===o?a+=r:"left"===o?(t-=1.5*e,i+=e):"right"===o&&(i+=1.5*e),{x:t,y:n,width:i,height:a}}},Konva.Util.extend(Konva.Tag,Konva.Shape),Konva.Factory.addGetterSetter(Konva.Tag,"pointerDirection","none"),Konva.Factory.addGetterSetter(Konva.Tag,"pointerWidth",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Tag,"pointerHeight",0,Konva.Validators.getNumberValidator()),Konva.Factory.addGetterSetter(Konva.Tag,"cornerRadius",0,Konva.Validators.getNumberValidator()),Konva.Collection.mapMethods(Konva.Tag)}(),function(t){"use strict";t.Arrow=function(t){this.____init(t)},t.Arrow.prototype={____init:function(n){t.Line.call(this,n),this.className="Arrow"},_sceneFunc:function(n){t.Line.prototype._sceneFunc.apply(this,arguments);var e=2*Math.PI,r=this.points(),o=r,i=0!==this.getTension()&&r.length>4;i&&(o=this.getTensionPoints());var a,s,l=r.length;i?(a=r[l-2]-o[l-2],s=r[l-1]-o[l-1]):(a=r[l-2]-r[l-4],s=r[l-1]-r[l-3]);var d=(Math.atan2(s,a)+e)%e,c=this.pointerLength(),u=this.pointerWidth();n.save(),n.beginPath(),n.translate(r[l-2],r[l-1]),n.rotate(d),n.moveTo(0,0),n.lineTo(-c,u/2),n.lineTo(-c,-u/2),n.closePath(),n.restore(),this.pointerAtBeginning()&&(n.save(),n.translate(r[0],r[1]),i?(a=o[0]-r[0],s=o[1]-r[1]):(a=r[2]-r[0],s=r[3]-r[1]),n.rotate((Math.atan2(-s,-a)+e)%e),n.moveTo(0,0),n.lineTo(-c,u/2),n.lineTo(-c,-u/2),n.closePath(),n.restore());var h=this.dashEnabled();h&&(this.attrs.dashEnabled=!1,n.setLineDash([])),n.fillStrokeShape(this),h&&(this.attrs.dashEnabled=!0)}},t.Util.extend(t.Arrow,t.Line),t.Factory.addGetterSetter(t.Arrow,"pointerLength",10,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Arrow,"pointerWidth",10,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Arrow,"pointerAtBeginning",!1),t.Collection.mapMethods(t.Arrow)}(Konva),function(t){"use strict";var n=["resizeEnabledChange","rotateAnchorOffsetChange","rotateEnabledChange","enabledAnchorsChange","anchorSizeChange","borderEnabledChange","borderStrokeChange","borderStrokeWidthChange","borderDashChange","anchorStrokeChange","anchorStrokeWidthChange","anchorFillChange","anchorCornerRadiusChange","ignoreStrokeChange"].join(" "),e=["xChange.resizer","yChange.resizer","widthChange.resizer","heightChange.resizer","scaleXChange.resizer","scaleYChange.resizer","skewXChange.resizer","skewYChange.resizer","rotationChange.resizer","offsetXChange.resizer","offsetYChange.resizer","transformsEnabledChange.resizer"].join(" "),r=["widthChange.resizer","heightChange.resizer","scaleXChange.resizer","scaleYChange.resizer","skewXChange.resizer","skewYChange.resizer","rotationChange.resizer","offsetXChange.resizer","offsetYChange.resizer"].join(" "),o={"top-left":-45,"top-center":0,"top-right":45,"middle-right":-90,"middle-left":90,"bottom-left":-135,"bottom-center":180,"bottom-right":135};t.Transformer=function(t){this.____init(t)};var i=["top-left","top-center","top-right","middle-right","middle-left","bottom-left","bottom-center","bottom-right"];t.Transformer.prototype={_centroid:!1,____init:function(e){t.Group.call(this,e),this.className="Transformer",this._createElements(),this._handleMouseMove=this._handleMouseMove.bind(this),this._handleMouseUp=this._handleMouseUp.bind(this),this.update=this.update.bind(this),this.on(n,this.update),this.getNode()&&this.update()},attachTo:function(t){this.setNode(t)},setNode:function(t){return this._node&&this.detach(),this._node=t,this._resetTransformCache(),t.on(e,this._resetTransformCache.bind(this)),t.on(r,function(){this._transforming||this.update()}.bind(this)),!!this.findOne(".top-left")&&this.update(),this},getNode:function(){return this._node},detach:function(){this.getNode()&&(this.getNode().off(".resizer"),this._node=void 0),this._resetTransformCache()},_resetTransformCache:function(){this._clearCache("nodeRect"),this._clearCache("transform"),this._clearSelfAndDescendantCache("absoluteTransform")},_getNodeRect:function(){return this._getCache("nodeRect",this.__getNodeRect)},__getNodeRect:function(){var n=this.getNode();if(!n)return{x:-Number.MAX_SAFE_INTEGER,y:-Number.MAX_SAFE_INTEGER,width:0,height:0,rotation:0};var e=n.getClientRect({skipTransform:!0,skipShadow:!0,skipStroke:this.ignoreStroke()}),r=t.getAngle(n.rotation()),o=e.x*n.scaleX()-n.offsetX()*n.scaleX(),i=e.y*n.scaleY()-n.offsetY()*n.scaleY();return{x:n.x()+o*Math.cos(r)+i*Math.sin(-r),y:n.y()+i*Math.cos(r)+o*Math.sin(r),width:e.width*n.scaleX(),height:e.height*n.scaleY(),rotation:n.rotation()}},getX:function(){return this._getNodeRect().x},getY:function(){return this._getNodeRect().y},getRotation:function(){return this._getNodeRect().rotation},getWidth:function(){return this._getNodeRect().width},getHeight:function(){return this._getNodeRect().height},_createElements:function(){this._createBack(),i.forEach(function(t){this._createAnchor(t)}.bind(this)),this._createAnchor("rotater")},_createAnchor:function(n){var e=new t.Rect({stroke:"rgb(0, 161, 255)",fill:"white",strokeWidth:1,name:n+" _anchor",dragDistance:0,draggable:!0}),r=this;e.on("mousedown touchstart",function(t){r._handleMouseDown(t)}),e.on("dragstart",function(t){t.cancelBubble=!0}),e.on("dragmove",function(t){t.cancelBubble=!0}),e.on("dragend",function(t){t.cancelBubble=!0}),e.on("mouseenter",function(){var r=this.getParent(),i=t.getAngle(r.rotation()),a=r.getNode().getAbsoluteScale(),s=a.y*a.x<0,l=function(n,e,r){if("rotater"===n)return"crosshair";e+=t.Util._degToRad(o[n]||0),r&&(e*=-1);var i=(t.Util._radToDeg(e)%360+360)%360;return t.Util._inRange(i,337.5,360)||t.Util._inRange(i,0,22.5)?"ns-resize":t.Util._inRange(i,22.5,67.5)?"nesw-resize":t.Util._inRange(i,67.5,112.5)?"ew-resize":t.Util._inRange(i,112.5,157.5)?"nwse-resize":t.Util._inRange(i,157.5,202.5)?"ns-resize":t.Util._inRange(i,202.5,247.5)?"nesw-resize":t.Util._inRange(i,247.5,292.5)?"ew-resize":t.Util._inRange(i,292.5,337.5)?"nwse-resize":(t.Util.error("Transformer has unknown angle for cursor detection: "+i),"pointer")}(n,i,s);e.getStage().content.style.cursor=l,r._cursorChange=!0}),e.on("mouseout",function(){e.getStage()&&this.getParent()&&(e.getStage().content.style.cursor="",this.getParent()._cursorChange=!1)}),this.add(e)},_createBack:function(){var n=new t.Shape({name:"back",width:0,height:0,listening:!1,sceneFunc:function(n){var e=this.getParent(),r=e.getPadding();n.beginPath(),n.rect(-r,-r,this.width()+2*r,this.height()+2*r),n.moveTo(this.width()/2,-r),e.rotateEnabled()&&n.lineTo(this.width()/2,-e.rotateAnchorOffset()*t.Util._sign(this.height())),n.fillStrokeShape(this)}});this.add(n)},_handleMouseDown:function(t){this.movingResizer=t.target.name().split(" ")[0];var n=this._getNodeRect(),e=n.width,r=n.height,o=Math.sqrt(Math.pow(e,2)+Math.pow(r,2));this.sin=r/o,this.cos=e/o,window.addEventListener("mousemove",this._handleMouseMove),window.addEventListener("touchmove",this._handleMouseMove),window.addEventListener("mouseup",this._handleMouseUp,!0),window.addEventListener("touchend",this._handleMouseUp,!0),this._transforming=!0,this._fire("transformstart",{evt:t}),this.getNode()._fire("transformstart",{evt:t})},_handleMouseMove:function(n){var e,r,o,i=this.findOne("."+this.movingResizer),a=i.getStage().getContent().getBoundingClientRect(),s=a.left,l=a.top,d={x:(void 0!==n.clientX?n.clientX:n.touches[0].clientX)-s,y:(void 0!==n.clientX?n.clientY:n.touches[0].clientY)-l};i.setAbsolutePosition(d);var c=this.keepRatio()||n.shiftKey;if("top-left"===this.movingResizer)c&&(e=(o=Math.sqrt(Math.pow(this.findOne(".bottom-right").x()-i.x(),2)+Math.pow(this.findOne(".bottom-right").y()-i.y(),2)))*this.cos,r=o*this.sin,this.findOne(".top-left").x(this.findOne(".bottom-right").x()-e),this.findOne(".top-left").y(this.findOne(".bottom-right").y()-r));else if("top-center"===this.movingResizer)this.findOne(".top-left").y(i.y());else if("top-right"===this.movingResizer){c&&(e=(o=Math.sqrt(Math.pow(this.findOne(".bottom-left").x()-i.x(),2)+Math.pow(this.findOne(".bottom-left").y()-i.y(),2)))*this.cos,r=o*this.sin,this.findOne(".top-right").x(e),this.findOne(".top-right").y(this.findOne(".bottom-left").y()-r));var u=i.position();this.findOne(".top-left").y(u.y),this.findOne(".bottom-right").x(u.x)}else if("middle-left"===this.movingResizer)this.findOne(".top-left").x(i.x());else if("middle-right"===this.movingResizer)this.findOne(".bottom-right").x(i.x());else if("bottom-left"===this.movingResizer)c&&(e=(o=Math.sqrt(Math.pow(this.findOne(".top-right").x()-i.x(),2)+Math.pow(this.findOne(".top-right").y()-i.y(),2)))*this.cos,r=o*this.sin,this.findOne(".bottom-left").x(this.findOne(".top-right").x()-e),this.findOne(".bottom-left").y(r)),u=i.position(),this.findOne(".top-left").x(u.x),this.findOne(".bottom-right").y(u.y);else if("bottom-center"===this.movingResizer)this.findOne(".bottom-right").y(i.y());else if("bottom-right"===this.movingResizer)c&&(e=(o=Math.sqrt(Math.pow(this.findOne(".bottom-right").x(),2)+Math.pow(this.findOne(".bottom-right").y(),2)))*this.cos,r=o*this.sin,this.findOne(".bottom-right").x(e),this.findOne(".bottom-right").y(r));else if("rotater"===this.movingResizer){var h=this.getPadding(),f=this._getNodeRect();e=i.x()-f.width/2,r=-i.y()+f.height/2;var p=Math.atan2(-r,e)+Math.PI/2;f.height<0&&(p-=Math.PI);for(var m=t.getAngle(this.rotation()),g=t.Util._radToDeg(m)+t.Util._radToDeg(p),b=t.getAngle(this.getNode().rotation()),v=t.Util._degToRad(g),x=this.rotationSnaps(),y=0;y<x.length;y++){var w=t.getAngle(x[y]);Math.abs(w-t.Util._degToRad(g))%(2*Math.PI)<.1&&(g=t.Util._radToDeg(w),v=t.Util._degToRad(g))}var _=h,k=h;this._fitNodeInto({rotation:t.angleDeg?g:t.Util._degToRad(g),x:f.x+(f.width/2+h)*(Math.cos(b)-Math.cos(v))+(f.height/2+h)*(Math.sin(-b)-Math.sin(-v))-(_*Math.cos(m)+k*Math.sin(-m)),y:f.y+(f.height/2+h)*(Math.cos(b)-Math.cos(v))+(f.width/2+h)*(Math.sin(b)-Math.sin(v))-(k*Math.cos(m)+_*Math.sin(m)),width:f.width+2*h,height:f.height+2*h},n)}else console.error(new Error("Wrong position argument of selection resizer: ",this.movingResizer));if("rotater"!==this.movingResizer){var S=this.findOne(".top-left").getAbsolutePosition(this.getParent());if(this.getCenteredScaling()||n.altKey){var C=this.findOne(".top-left"),T=this.findOne(".bottom-right"),E=C.x(),A=C.y(),K=this.getWidth()-T.x(),N=this.getHeight()-T.y();T.move({x:-E,y:-A}),C.move({x:K,y:N}),S=C.getAbsolutePosition(this.getParent())}e=S.x,r=S.y;var D=this.findOne(".bottom-right").x()-this.findOne(".top-left").x(),O=this.findOne(".bottom-right").y()-this.findOne(".top-left").y();this._fitNodeInto({x:e+this.offsetX(),y:r+this.offsetY(),width:D,height:O},n)}},_handleMouseUp:function(t){this._removeEvents(t)},_removeEvents:function(t){if(this._transforming){this._transforming=!1,window.removeEventListener("mousemove",this._handleMouseMove),window.removeEventListener("touchmove",this._handleMouseMove),window.removeEventListener("mouseup",this._handleMouseUp,!0),window.removeEventListener("touchend",this._handleMouseUp,!0),this._fire("transformend",{evt:t});var n=this.getNode();n&&n.fire("transformend",{evt:t})}},_fitNodeInto:function(n,e){var r=this.getBoundBoxFunc();if(r){var o=this._getNodeRect();n=r.call(this,o,n)}this._settings=!0;var i=this.getNode();void 0!==n.rotation&&this.getNode().rotation(n.rotation);var a=i.getClientRect({skipTransform:!0,skipShadow:!0,skipStroke:this.ignoreStroke()}),s=this.getPadding(),l=(n.width-2*s)/a.width,d=(n.height-2*s)/a.height,c=t.getAngle(i.getRotation()),u=a.x*l-s-i.offsetX()*l,h=a.y*d-s-i.offsetY()*d;this.getNode().setAttrs({scaleX:l,scaleY:d,x:n.x-(u*Math.cos(c)+h*Math.sin(-c)),y:n.y-(h*Math.cos(c)+u*Math.sin(c))}),this._settings=!1,this._fire("transform",{evt:e}),this.getNode()._fire("transform",{evt:e}),this.update(),this.getLayer().batchDraw()},forceUpdate:function(){this._resetTransformCache(),this.update()},update:function(){var n=this._getNodeRect(),e=this.getNode(),r={x:1,y:1};e&&e.getParent()&&(r=e.getParent().getAbsoluteScale());var o={x:1/r.x,y:1/r.y},i=n.width,a=n.height,s=this.enabledAnchors(),l=this.resizeEnabled(),d=this.getPadding(),c=this.getAnchorSize();this.find("._anchor").setAttrs({width:c,height:c,offsetX:c/2,offsetY:c/2,stroke:this.getAnchorStroke(),strokeWidth:this.getAnchorStrokeWidth(),fill:this.getAnchorFill(),cornerRadius:this.getAnchorCornerRadius()}),this.findOne(".top-left").setAttrs({x:-d,y:-d,scale:o,visible:l&&s.indexOf("top-left")>=0}),this.findOne(".top-center").setAttrs({x:i/2,y:-d,scale:o,visible:l&&s.indexOf("top-center")>=0}),this.findOne(".top-right").setAttrs({x:i+d,y:-d,scale:o,visible:l&&s.indexOf("top-right")>=0}),this.findOne(".middle-left").setAttrs({x:-d,y:a/2,scale:o,visible:l&&s.indexOf("middle-left")>=0}),this.findOne(".middle-right").setAttrs({x:i+d,y:a/2,scale:o,visible:l&&s.indexOf("middle-right")>=0}),this.findOne(".bottom-left").setAttrs({x:-d,y:a+d,scale:o,visible:l&&s.indexOf("bottom-left")>=0}),this.findOne(".bottom-center").setAttrs({x:i/2,y:a+d,scale:o,visible:l&&s.indexOf("bottom-center")>=0}),this.findOne(".bottom-right").setAttrs({x:i+d,y:a+d,scale:o,visible:l&&s.indexOf("bottom-right")>=0});var u=-this.rotateAnchorOffset()*Math.abs(o.y);this.findOne(".rotater").setAttrs({x:i/2,y:u*t.Util._sign(a),scale:o,visible:this.rotateEnabled()}),this.findOne(".back").setAttrs({width:i*r.x,height:a*r.y,scale:o,visible:this.borderEnabled(),stroke:this.getBorderStroke(),strokeWidth:this.getBorderStrokeWidth(),dash:this.getBorderDash()})},isTransforming:function(){return this._transforming},stopTransform:function(){if(this._transforming){this._removeEvents();var t=this.findOne("."+this.movingResizer);t&&t.stopDrag()}},destroy:function(){this.getStage()&&this._cursorChange&&(this.getStage().content.style.cursor=""),t.Group.prototype.destroy.call(this),this.detach(),this._removeEvents()},toObject:function(){return t.Node.prototype.toObject.call(this)}},t.Util.extend(t.Transformer,t.Group),t.Factory.addGetterSetter(t.Transformer,"enabledAnchors",i,function(n){return n instanceof Array||t.Util.warn("enabledAnchors value should be an array"),n instanceof Array&&n.forEach(function(n){-1===i.indexOf(n)&&t.Util.warn("Unknown anchor name: "+n+". Available names are: "+i.join(", "))}),n||[]}),t.Factory.addGetterSetter(t.Transformer,"resizeEnabled",!0),t.Factory.addGetterSetter(t.Transformer,"anchorSize",10,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Transformer,"rotateEnabled",!0),t.Factory.addGetterSetter(t.Transformer,"rotationSnaps",[]),t.Factory.addGetterSetter(t.Transformer,"rotateAnchorOffset",50,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Transformer,"borderEnabled",!0),t.Factory.addGetterSetter(t.Transformer,"anchorStroke","rgb(0, 161, 255)"),t.Factory.addGetterSetter(t.Transformer,"anchorStrokeWidth",1,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Transformer,"anchorFill","white"),t.Factory.addGetterSetter(t.Transformer,"anchorCornerRadius",0,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Transformer,"borderStroke","rgb(0, 161, 255)"),t.Factory.addGetterSetter(t.Transformer,"borderStrokeWidth",1,t.Validators.getNumberValidator()),t.Factory.addGetterSetter(t.Transformer,"borderDash"),t.Factory.addGetterSetter(t.Transformer,"keepRatio",!0),t.Factory.addGetterSetter(t.Transformer,"centeredScaling",!1),t.Factory.addGetterSetter(t.Transformer,"ignoreStroke",!1),t.Factory.addGetterSetter(t.Transformer,"padding",0,t.Validators.getNumberValidator()),t.Factory.addOverloadedGetterSetter(t.Transformer,"node"),t.Factory.addGetterSetter(t.Transformer,"boundBoxFunc"),t.Factory.backCompat(t.Transformer,{lineEnabled:"borderEnabled",rotateHandlerOffset:"rotateAnchorOffset",enabledHandlers:"enabledAnchors"}),t.Collection.mapMethods(t.Transformer)}(Konva)}).call(this,e(7))},function(t){t.exports=[{fire:["Ð¿Ð¾Ð¶Ð°Ñ","Ð¿Ð¾Ð¶Ð°ÑÐ¸ÑÐµ","Ð¾Ð³Ð¾Ð½Ñ","ÑÐ²Ð¾Ð»ÑÐ½ÑÑÑ"],catch:["Ð»Ð¾Ð²Ð¸ÑÑ","ÑÐ»Ð¾Ð²Ð¸ÑÑ"],southern:["ÑÐ¶Ð½Ð°Ñ","ÑÐ¶Ð½ÑÐ¹","ÑÐ¶Ð½Ð¾Ðµ"],space:["Ð¿ÑÐ¾ÑÑÑÐ°Ð½ÑÑÐ²Ð¾","ÐºÐ¾ÑÐ¼Ð¾Ñ"],fifty:["Ð¿ÑÑÑÐ´ÐµÑÑÑ","Ð¿Ð¾Ð»ÑÐ¸Ð½Ð½Ð¸Ðº","Ð¿Ð¾Ð»ÑÐ¾Ñ"],pencil:["ÐºÐ°ÑÐ°Ð½Ð´Ð°Ñ","ÐºÐ°ÑÐ°Ð½Ð´Ð°ÑÐ¸Ðº"],detail:["Ð´ÐµÑÐ°Ð»Ñ"],great:["Ð¾ÑÐ»Ð¸ÑÐ½ÑÐ¹","Ð·Ð°Ð¼ÐµÑÐ°ÑÐµÐ»ÑÐ½ÑÐ¹","Ð¿ÑÐµÐºÑÐ°ÑÐ½ÑÐ¹"],jungle:["Ð´Ð¶ÑÐ½Ð³Ð»Ð¸","Ð´ÐµÐ±ÑÐ¸","Ð·Ð°ÑÐ¾ÑÐ»Ð¸"],headed:["Ð²Ð¾ Ð³Ð»Ð°Ð²Ðµ"],farmer:["ÑÐµÑÐ¼ÐµÑ","ÐºÐ¾Ð»ÑÐ¾Ð·Ð½Ð¸Ðº"],crew:["ÑÐºÐ¸Ð¿Ð°Ð¶","Ð±Ð°Ð½Ð´Ð°","Ð±ÑÐ¸Ð³Ð°Ð´Ð°","ÑÐ°Ð¹ÐºÐ°"],dark:["ÑÐµÐ¼Ð½Ð¾","ÑÐµÐ¼Ð½Ð¾ÑÐ°","ÑÑÐ¼Ð°"],first:["Ð¿ÐµÑÐ²ÑÐ¹","Ð¿ÐµÑÐ²Ð°Ñ","Ð¿ÐµÑÐ²Ð¾Ðµ"],drink:["Ð½Ð°Ð¿Ð¸ÑÐ¾Ðº","Ð±ÑÑÐ»Ð¾","Ð¿Ð¸ÑÑ"],fish:["ÑÑÐ±Ð°","ÑÑÐ±ÐºÐ°","ÑÑÐ±Ð¾Ð½ÑÐºÐ°"],final:["Ð¾ÐºÐ¾Ð½ÑÐ°ÑÐµÐ»ÑÐ½ÑÐ¹","ÑÐ¸Ð½Ð°Ð»"],number:["ÑÐ¸ÑÑÐ°","ÑÐ¸ÑÐ»Ð¾"],rising:["ÑÐ¾ÑÑ","Ð²Ð¾Ð·ÑÐ°ÑÑÐ°ÑÑ"],say:["ÑÐºÐ°Ð·Ð°ÑÑ","Ð³Ð¾Ð²Ð¾ÑÐ¸ÑÑ"],travel:["Ð¿ÑÑÐµÑÐµÑÑÐ²Ð¾Ð²Ð°ÑÑ","Ð¿ÑÑÐµÑÐµÑÑÐ²Ð¸Ðµ"],flies:["Ð¼ÑÑÐ¸","Ð¼Ð¾ÑÐºÐ¸","Ð¼Ð¾ÑÐºÐ°ÑÐ°"],round:["ÐºÑÑÐ³Ð»ÑÐ¹","ÐºÑÑÐ³Ð»Ð°Ñ","ÐºÑÑÐ³Ð»Ð¾Ðµ"],born:["ÑÐ¾Ð´Ð¸Ð²ÑÐ¸Ð¹ÑÑ","ÑÐ¾Ð´Ð¸Ð²ÑÐ°ÑÑÑ","ÑÐ¾Ð´Ð¸ÑÑ","ÑÐ¾Ð¶Ð´ÐµÐ½Ð¸Ðµ"],year:["Ð³Ð¾Ð´"],piano:["ÑÐ¾ÑÑÐµÐ¿Ð¸Ð°Ð½Ð¾","Ð¿Ð¸Ð°Ð½Ð¸Ð½Ð¾"],as:["ÐºÐ°Ðº"],writer:["Ð¿Ð¸ÑÐ°ÑÐµÐ»Ñ","Ð¿Ð¸ÑÐ°ÑÐµÐ»ÑÐ½Ð¸ÑÐ°"],know:["Ð·Ð½Ð°ÑÑ"],pan:["ÐºÐ°ÑÑÑÑÐ»Ñ"],act:["Ð´ÐµÐ¹ÑÑÐ²Ð¾Ð²Ð°ÑÑ","Ð´ÐµÐ»Ð°ÑÑ"],card:["ÐºÐ°ÑÑÐ°","ÐºÐ°ÑÑÐ¾ÑÐºÐ°"],wind:["Ð²ÐµÑÐµÑ","Ð²ÐµÑÐµÑÐ¾Ðº"],ancient:["Ð´ÑÐµÐ²Ð½Ð¸Ð¹","Ð´ÑÐµÐ²Ð½ÑÑ","Ð´ÑÐµÐ²Ð½ÐµÐµ"],kind:["Ð´Ð¾Ð±ÑÑÐ¹","Ð´Ð¾Ð±ÑÐ°Ñ","Ð´Ð¾Ð±ÑÐ¾Ðµ"],nice:["Ð¾ÑÐ»Ð¸ÑÐ½Ð¾","ÑÑÐ¿ÐµÑ","ÐºÐ»Ð°ÑÑ","ÑÐµÑÐºÐ¾"],degree:["ÑÑÐµÐ¿ÐµÐ½Ñ","Ð³ÑÐ°Ð´ÑÑ"],volume:["ÑÑÐ¾Ð²ÐµÐ½Ñ","Ð¾Ð±ÑÐµÐ¼","Ð³ÑÐ¾Ð¼ÐºÐ¾ÑÑÑ"],said:["ÑÐºÐ°Ð·Ð°Ð»","ÑÐºÐ°Ð·Ð°Ð»Ð°"],roll:["ÑÑÐ»Ð¾Ð½","Ð²Ð°Ð»Ð¸Ðº"],specific:["ÐºÐ¾Ð½ÐºÑÐµÑÐ½ÑÐ¹","ÑÐ¿ÐµÑÐ¸ÑÐ¸ÑÐµÑÐºÐ¸Ð¹","Ð¾ÑÐ¾Ð±ÑÐ¹"],handle:["ÑÐ¿ÑÐ°Ð²Ð¸ÑÑÑÑ","ÑÑÑÐºÐ°","ÑÐ±Ð¾Ñ"],grass:["ÑÑÐ°Ð²Ð°","ÑÑÐ°Ð²ÐºÐ°","Ð·ÐµÐ»ÐµÐ½Ñ"]}]},function(t){t.exports=[{stand:[0,0,512,512,512,0,512,512,1024,0,512,512,1536,0,512,512,2048,0,512,512,2560,0,512,512,3072,0,512,512,3584,0,512,512,4096,0,512,512,4608,0,512,512],shot:[0,512,512,512,512,512,512,512,1024,512,512,512,1536,512,512,512,2048,512,512,512,2560,512,512,512,3072,512,512,512,3584,512,512,512,4096,512,512,512,4608,512,512,512],run:[0,1024,512,512,512,1024,512,512,1024,1024,512,512,1536,1024,512,512,2048,1024,512,512,2560,1024,512,512,3072,1024,512,512,3584,1024,512,512,4096,1024,512,512,4608,1024,512,512],walk:[0,1536,512,512,512,1536,512,512,1024,1536,512,512,1536,1536,512,512,2048,1536,512,512,2560,1536,512,512,3072,1536,512,512,3584,1536,512,512,4096,1536,512,512,4608,1536,512,512],jump:[0,2048,512,512,512,2048,512,512,1024,2048,512,512,1536,2048,512,512,2048,2048,512,512,2560,2048,512,512,3072,2048,512,512,3584,2048,512,512,4096,2048,512,512,4608,2048,512,512],hit:[0,2560,512,512,512,2560,512,512,1024,2560,512,512,1536,2560,512,512,2048,2560,512,512,2560,2560,512,512,3072,2560,512,512,3584,2560,512,512,4096,2560,512,512,4608,2560,512,512],die:[0,3072,512,512,512,3072,512,512,1024,3072,512,512,1536,3072,512,512,2048,3072,512,512,2560,3072,512,512,3072,3072,512,512,3584,3072,512,512,4096,3072,512,512,4608,3072,512,512],heal:[0,0,192,192,192,0,192,192,384,0,192,192,576,0,192,192,768,0,192,192,960,0,192,192,1152,0,192,192,1344,0,192,192,1536,0,192,192,1728,0,192,192,1920,0,192,192,2112,0,192,192,2304,0,192,192,2496,0,192,192,2688,0,192,192,2880,0,192,192,3072,0,192,192,3264,0,192,192,3456,0,192,192,3648,0,192,192,3840,0,192,192,4032,0,192,192,4224,0,192,192,4416,0,192,192,4608,0,192,192]}]},function(t,n){t.exports=function(t){var n=[];return n.toString=function(){return this.map(function(n){var e=function(t,n){var e=t[1]||"",r=t[3];if(!r)return e;if(n&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(t){return"/*# sourceURL="+r.sourceRoot+t+" */"});return[e].concat(i).concat([o]).join("\n")}var a;return[e].join("\n")}(n,t);return n[2]?"@media "+n[2]+"{"+e+"}":e}).join("")},n.i=function(t,e){"string"==typeof t&&(t=[[null,t,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<t.length;o++){var a=t[o];"number"==typeof a[0]&&r[a[0]]||(e&&!a[2]?a[2]=e:e&&(a[2]="("+a[2]+") and ("+e+")"),n.push(a))}},n}},function(t,n,e){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),s=function(t){var n={};return function(t,e){if("function"==typeof t)return t();if(void 0===n[t]){var r=function(t,n){return n?n.querySelector(t):document.querySelector(t)}.call(this,t,e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}n[t]=r}return n[t]}}(),l=null,d=0,c=[],u=e(14);function h(t,n){for(var e=0;e<t.length;e++){var r=t[e],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(v(r.parts[a],n))}else{var s=[];for(a=0;a<r.parts.length;a++)s.push(v(r.parts[a],n));i[r.id]={id:r.id,refs:1,parts:s}}}}function f(t,n){for(var e=[],r={},o=0;o<t.length;o++){var i=t[o],a=n.base?i[0]+n.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(s):e.push(r[a]={id:a,parts:[s]})}return e}function p(t,n){var e=s(t.insertInto);if(!e)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===t.insertAt)r?r.nextSibling?e.insertBefore(n,r.nextSibling):e.appendChild(n):e.insertBefore(n,e.firstChild),c.push(n);else if("bottom"===t.insertAt)e.appendChild(n);else{if("object"!=typeof t.insertAt||!t.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=s(t.insertAt.before,e);e.insertBefore(n,o)}}function m(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var n=c.indexOf(t);n>=0&&c.splice(n,1)}function g(t){var n=document.createElement("style");if(void 0===t.attrs.type&&(t.attrs.type="text/css"),void 0===t.attrs.nonce){var r=function(){0;return e.nc}();r&&(t.attrs.nonce=r)}return b(n,t.attrs),p(t,n),n}function b(t,n){Object.keys(n).forEach(function(e){t.setAttribute(e,n[e])})}function v(t,n){var e,r,o,i;if(n.transform&&t.css){if(!(i="function"==typeof n.transform?n.transform(t.css):n.transform.default(t.css)))return function(){};t.css=i}if(n.singleton){var a=d++;e=l||(l=g(n)),r=w.bind(null,e,a,!1),o=w.bind(null,e,a,!0)}else t.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(e=function(t){var n=document.createElement("link");return void 0===t.attrs.type&&(t.attrs.type="text/css"),t.attrs.rel="stylesheet",b(n,t.attrs),p(t,n),n}(n),r=function(t,n,e){var r=e.css,o=e.sourceMap,i=void 0===n.convertToAbsoluteUrls&&o;(n.convertToAbsoluteUrls||i)&&(r=u(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),s=t.href;t.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,e,n),o=function(){m(e),e.href&&URL.revokeObjectURL(e.href)}):(e=g(n),r=function(t,n){var e=n.css,r=n.media;r&&t.setAttribute("media",r);if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}.bind(null,e),o=function(){m(e)});return r(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;r(t=n)}else o()}}t.exports=function(t,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=a()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var e=f(t,n);return h(e,n),function(t){for(var r=[],o=0;o<e.length;o++){var a=e[o];(s=i[a.id]).refs--,r.push(s)}t&&h(f(t,n),n);for(o=0;o<r.length;o++){var s;if(0===(s=r[o]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete i[s.id]}}}};var x,y=(x=[],function(t,n){return x[t]=n,x.filter(Boolean).join("\n")});function w(t,n,e,r){var o=e?"":r.css;if(t.styleSheet)t.styleSheet.cssText=y(n,o);else{var i=document.createTextNode(o),a=t.childNodes;a[n]&&t.removeChild(a[n]),a.length?t.insertBefore(i,a[n]):t.appendChild(i)}}},function(t){t.exports=[{adj:["Ð¡ÑÑÐµÐ¼Ð½ÑÐ¹","ÐÐ¾Ð½ÑÑÐ¸Ð¹","Ð¡Ð»Ð¸Ð·ÐºÐ¸Ð¹","Ð¢ÑÐ¿Ð¾Ð¹","Ð¡Ð²Ð¸ÑÐµÐ¿ÑÐ¹","ÐÐ»Ð¾Ð²Ð¾Ð½Ð½ÑÐ¹","ÐÐ¸ÑÐ°ÑÐ¸Ð¹"],race:["ÐÐ½Ð¾Ð¼Ð¸Ðº","ÐÑÐº","Ð­Ð»ÑÑ"],name:["ÐÑÐµÐ°Ð»","Ð¡Ð°Ð½Ð´ÐµÑ","ÐÑÑÐ¼ÑÐ½Ð³Ð°Ð²Ñ"]}]},function(t,n){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n){!function(n){"use strict";var e,r=Object.prototype,o=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",s=i.asyncIterator||"@@asyncIterator",l=i.toStringTag||"@@toStringTag",d="object"==typeof t,c=n.regeneratorRuntime;if(c)d&&(t.exports=c);else{(c=n.regeneratorRuntime=d?t.exports:{}).wrap=y;var u="suspendedStart",h="suspendedYield",f="executing",p="completed",m={},g={};g[a]=function(){return this};var b=Object.getPrototypeOf,v=b&&b(b(D([])));v&&v!==r&&o.call(v,a)&&(g=v);var x=S.prototype=_.prototype=Object.create(g);k.prototype=x.constructor=S,S.constructor=k,S[l]=k.displayName="GeneratorFunction",c.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===k||"GeneratorFunction"===(n.displayName||n.name))},c.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,S):(t.__proto__=S,l in t||(t[l]="GeneratorFunction")),t.prototype=Object.create(x),t},c.awrap=function(t){return{__await:t}},C(T.prototype),T.prototype[s]=function(){return this},c.AsyncIterator=T,c.async=function(t,n,e,r){var o=new T(y(t,n,e,r));return c.isGeneratorFunction(n)?o:o.next().then(function(t){return t.done?t.value:o.next()})},C(x),x[l]="Generator",x[a]=function(){return this},x.toString=function(){return"[object Generator]"},c.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},c.values=D,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(K),!t)for(var n in this)"t"===n.charAt(0)&&o.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function r(r,o){return s.type="throw",s.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],s=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var l=o.call(a,"catchLoc"),d=o.call(a,"finallyLoc");if(l&&d){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!d)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,m):this.complete(a)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),m},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),K(e),m}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var o=r.arg;K(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:D(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),m}}}function y(t,n,e,r){var o=n&&n.prototype instanceof _?n:_,i=Object.create(o.prototype),a=new N(r||[]);return i._invoke=function(t,n,e){var r=u;return function(o,i){if(r===f)throw new Error("Generator is already running");if(r===p){if("throw"===o)throw i;return O()}for(e.method=o,e.arg=i;;){var a=e.delegate;if(a){var s=E(a,e);if(s){if(s===m)continue;return s}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(r===u)throw r=p,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r=f;var l=w(t,n,e);if("normal"===l.type){if(r=e.done?p:h,l.arg===m)continue;return{value:l.arg,done:e.done}}"throw"===l.type&&(r=p,e.method="throw",e.arg=l.arg)}}}(t,e,a),i}function w(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}function _(){}function k(){}function S(){}function C(t){["next","throw","return"].forEach(function(n){t[n]=function(t){return this._invoke(n,t)}})}function T(t){var n;this._invoke=function(e,r){function i(){return new Promise(function(n,i){!function n(e,r,i,a){var s=w(t[e],t,r);if("throw"!==s.type){var l=s.arg,d=l.value;return d&&"object"==typeof d&&o.call(d,"__await")?Promise.resolve(d.__await).then(function(t){n("next",t,i,a)},function(t){n("throw",t,i,a)}):Promise.resolve(d).then(function(t){l.value=t,i(l)},a)}a(s.arg)}(e,r,n,i)})}return n=n?n.then(i,i):i()}}function E(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,E(t,n),"throw"===n.method))return m;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return m}var o=w(r,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,m;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,m):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function A(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function K(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function N(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function D(t){if(t){var n=t[a];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function n(){for(;++r<t.length;)if(o.call(t,r))return n.value=t[r],n.done=!1,n;return n.value=e,n.done=!0,n};return i.next=i}}return{next:O}}function O(){return{value:e,done:!0}}}(function(){return this}()||Function("return this")())},function(t,n,e){
/*!
  * Bootstrap v4.1.3 (https://getbootstrap.com/)
  * Copyright 2011-2018 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
!function(t,n,e){"use strict";function r(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function o(t,n,e){return n&&r(t.prototype,n),e&&r(t,e),t}function i(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function a(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{},r=Object.keys(e);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(e).filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.forEach(function(n){i(t,n,e[n])})}return t}n=n&&n.hasOwnProperty("default")?n.default:n,e=e&&e.hasOwnProperty("default")?e.default:e;var s=function(t){var n="transitionend";function e(n){var e=this,o=!1;return t(this).one(r.TRANSITION_END,function(){o=!0}),setTimeout(function(){o||r.triggerTransitionEnd(e)},n),this}var r={TRANSITION_END:"bsTransitionEnd",getUID:function(t){do{t+=~~(1e6*Math.random())}while(document.getElementById(t));return t},getSelectorFromElement:function(t){var n=t.getAttribute("data-target");n&&"#"!==n||(n=t.getAttribute("href")||"");try{return document.querySelector(n)?n:null}catch(t){return null}},getTransitionDurationFromElement:function(n){if(!n)return 0;var e=t(n).css("transition-duration"),r=parseFloat(e);return r?(e=e.split(",")[0],1e3*parseFloat(e)):0},reflow:function(t){return t.offsetHeight},triggerTransitionEnd:function(e){t(e).trigger(n)},supportsTransitionEnd:function(){return Boolean(n)},isElement:function(t){return(t[0]||t).nodeType},typeCheckConfig:function(t,n,e){for(var o in e)if(Object.prototype.hasOwnProperty.call(e,o)){var i=e[o],a=n[o],s=a&&r.isElement(a)?"element":(l=a,{}.toString.call(l).match(/\s([a-z]+)/i)[1].toLowerCase());if(!new RegExp(i).test(s))throw new Error(t.toUpperCase()+': Option "'+o+'" provided type "'+s+'" but expected type "'+i+'".')}var l}};return t.fn.emulateTransitionEnd=e,t.event.special[r.TRANSITION_END]={bindType:n,delegateType:n,handle:function(n){if(t(n.target).is(this))return n.handleObj.handler.apply(this,arguments)}},r}(n),l=function(t){var n=t.fn.alert,e={CLOSE:"close.bs.alert",CLOSED:"closed.bs.alert",CLICK_DATA_API:"click.bs.alert.data-api"},r={ALERT:"alert",FADE:"fade",SHOW:"show"},i=function(){function n(t){this._element=t}var i=n.prototype;return i.close=function(t){var n=this._element;t&&(n=this._getRootElement(t));var e=this._triggerCloseEvent(n);e.isDefaultPrevented()||this._removeElement(n)},i.dispose=function(){t.removeData(this._element,"bs.alert"),this._element=null},i._getRootElement=function(n){var e=s.getSelectorFromElement(n),o=!1;return e&&(o=document.querySelector(e)),o||(o=t(n).closest("."+r.ALERT)[0]),o},i._triggerCloseEvent=function(n){var r=t.Event(e.CLOSE);return t(n).trigger(r),r},i._removeElement=function(n){var e=this;if(t(n).removeClass(r.SHOW),t(n).hasClass(r.FADE)){var o=s.getTransitionDurationFromElement(n);t(n).one(s.TRANSITION_END,function(t){return e._destroyElement(n,t)}).emulateTransitionEnd(o)}else this._destroyElement(n)},i._destroyElement=function(n){t(n).detach().trigger(e.CLOSED).remove()},n._jQueryInterface=function(e){return this.each(function(){var r=t(this),o=r.data("bs.alert");o||(o=new n(this),r.data("bs.alert",o)),"close"===e&&o[e](this)})},n._handleDismiss=function(t){return function(n){n&&n.preventDefault(),t.close(this)}},o(n,null,[{key:"VERSION",get:function(){return"4.1.3"}}]),n}();return t(document).on(e.CLICK_DATA_API,'[data-dismiss="alert"]',i._handleDismiss(new i)),t.fn.alert=i._jQueryInterface,t.fn.alert.Constructor=i,t.fn.alert.noConflict=function(){return t.fn.alert=n,i._jQueryInterface},i}(n),d=function(t){var n="button",e=t.fn[n],r={ACTIVE:"active",BUTTON:"btn",FOCUS:"focus"},i={DATA_TOGGLE_CARROT:'[data-toggle^="button"]',DATA_TOGGLE:'[data-toggle="buttons"]',INPUT:"input",ACTIVE:".active",BUTTON:".btn"},a={CLICK_DATA_API:"click.bs.button.data-api",FOCUS_BLUR_DATA_API:"focus.bs.button.data-api blur.bs.button.data-api"},s=function(){function n(t){this._element=t}var e=n.prototype;return e.toggle=function(){var n=!0,e=!0,o=t(this._element).closest(i.DATA_TOGGLE)[0];if(o){var a=this._element.querySelector(i.INPUT);if(a){if("radio"===a.type)if(a.checked&&this._element.classList.contains(r.ACTIVE))n=!1;else{var s=o.querySelector(i.ACTIVE);s&&t(s).removeClass(r.ACTIVE)}if(n){if(a.hasAttribute("disabled")||o.hasAttribute("disabled")||a.classList.contains("disabled")||o.classList.contains("disabled"))return;a.checked=!this._element.classList.contains(r.ACTIVE),t(a).trigger("change")}a.focus(),e=!1}}e&&this._element.setAttribute("aria-pressed",!this._element.classList.contains(r.ACTIVE)),n&&t(this._element).toggleClass(r.ACTIVE)},e.dispose=function(){t.removeData(this._element,"bs.button"),this._element=null},n._jQueryInterface=function(e){return this.each(function(){var r=t(this).data("bs.button");r||(r=new n(this),t(this).data("bs.button",r)),"toggle"===e&&r[e]()})},o(n,null,[{key:"VERSION",get:function(){return"4.1.3"}}]),n}();return t(document).on(a.CLICK_DATA_API,i.DATA_TOGGLE_CARROT,function(n){n.preventDefault();var e=n.target;t(e).hasClass(r.BUTTON)||(e=t(e).closest(i.BUTTON)),s._jQueryInterface.call(t(e),"toggle")}).on(a.FOCUS_BLUR_DATA_API,i.DATA_TOGGLE_CARROT,function(n){var e=t(n.target).closest(i.BUTTON)[0];t(e).toggleClass(r.FOCUS,/^focus(in)?$/.test(n.type))}),t.fn[n]=s._jQueryInterface,t.fn[n].Constructor=s,t.fn[n].noConflict=function(){return t.fn[n]=e,s._jQueryInterface},s}(n),c=function(t){var n="carousel",e="bs.carousel",r="."+e,i=t.fn[n],l={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0},d={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean"},c={NEXT:"next",PREV:"prev",LEFT:"left",RIGHT:"right"},u={SLIDE:"slide"+r,SLID:"slid"+r,KEYDOWN:"keydown"+r,MOUSEENTER:"mouseenter"+r,MOUSELEAVE:"mouseleave"+r,TOUCHEND:"touchend"+r,LOAD_DATA_API:"load.bs.carousel.data-api",CLICK_DATA_API:"click.bs.carousel.data-api"},h={CAROUSEL:"carousel",ACTIVE:"active",SLIDE:"slide",RIGHT:"carousel-item-right",LEFT:"carousel-item-left",NEXT:"carousel-item-next",PREV:"carousel-item-prev",ITEM:"carousel-item"},f={ACTIVE:".active",ACTIVE_ITEM:".active.carousel-item",ITEM:".carousel-item",NEXT_PREV:".carousel-item-next, .carousel-item-prev",INDICATORS:".carousel-indicators",DATA_SLIDE:"[data-slide], [data-slide-to]",DATA_RIDE:'[data-ride="carousel"]'},p=function(){function i(n,e){this._items=null,this._interval=null,this._activeElement=null,this._isPaused=!1,this._isSliding=!1,this.touchTimeout=null,this._config=this._getConfig(e),this._element=t(n)[0],this._indicatorsElement=this._element.querySelector(f.INDICATORS),this._addEventListeners()}var p=i.prototype;return p.next=function(){this._isSliding||this._slide(c.NEXT)},p.nextWhenVisible=function(){!document.hidden&&t(this._element).is(":visible")&&"hidden"!==t(this._element).css("visibility")&&this.next()},p.prev=function(){this._isSliding||this._slide(c.PREV)},p.pause=function(t){t||(this._isPaused=!0),this._element.querySelector(f.NEXT_PREV)&&(s.triggerTransitionEnd(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null},p.cycle=function(t){t||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config.interval&&!this._isPaused&&(this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))},p.to=function(n){var e=this;this._activeElement=this._element.querySelector(f.ACTIVE_ITEM);var r=this._getItemIndex(this._activeElement);if(!(n>this._items.length-1||n<0))if(this._isSliding)t(this._element).one(u.SLID,function(){return e.to(n)});else{if(r===n)return this.pause(),void this.cycle();var o=n>r?c.NEXT:c.PREV;this._slide(o,this._items[n])}},p.dispose=function(){t(this._element).off(r),t.removeData(this._element,e),this._items=null,this._config=null,this._element=null,this._interval=null,this._isPaused=null,this._isSliding=null,this._activeElement=null,this._indicatorsElement=null},p._getConfig=function(t){return t=a({},l,t),s.typeCheckConfig(n,t,d),t},p._addEventListeners=function(){var n=this;this._config.keyboard&&t(this._element).on(u.KEYDOWN,function(t){return n._keydown(t)}),"hover"===this._config.pause&&(t(this._element).on(u.MOUSEENTER,function(t){return n.pause(t)}).on(u.MOUSELEAVE,function(t){return n.cycle(t)}),"ontouchstart"in document.documentElement&&t(this._element).on(u.TOUCHEND,function(){n.pause(),n.touchTimeout&&clearTimeout(n.touchTimeout),n.touchTimeout=setTimeout(function(t){return n.cycle(t)},500+n._config.interval)}))},p._keydown=function(t){if(!/input|textarea/i.test(t.target.tagName))switch(t.which){case 37:t.preventDefault(),this.prev();break;case 39:t.preventDefault(),this.next()}},p._getItemIndex=function(t){return this._items=t&&t.parentNode?[].slice.call(t.parentNode.querySelectorAll(f.ITEM)):[],this._items.indexOf(t)},p._getItemByDirection=function(t,n){var e=t===c.NEXT,r=t===c.PREV,o=this._getItemIndex(n),i=this._items.length-1,a=r&&0===o||e&&o===i;if(a&&!this._config.wrap)return n;var s=t===c.PREV?-1:1,l=(o+s)%this._items.length;return-1===l?this._items[this._items.length-1]:this._items[l]},p._triggerSlideEvent=function(n,e){var r=this._getItemIndex(n),o=this._getItemIndex(this._element.querySelector(f.ACTIVE_ITEM)),i=t.Event(u.SLIDE,{relatedTarget:n,direction:e,from:o,to:r});return t(this._element).trigger(i),i},p._setActiveIndicatorElement=function(n){if(this._indicatorsElement){var e=[].slice.call(this._indicatorsElement.querySelectorAll(f.ACTIVE));t(e).removeClass(h.ACTIVE);var r=this._indicatorsElement.children[this._getItemIndex(n)];r&&t(r).addClass(h.ACTIVE)}},p._slide=function(n,e){var r,o,i,a=this,l=this._element.querySelector(f.ACTIVE_ITEM),d=this._getItemIndex(l),p=e||l&&this._getItemByDirection(n,l),m=this._getItemIndex(p),g=Boolean(this._interval);if(n===c.NEXT?(r=h.LEFT,o=h.NEXT,i=c.LEFT):(r=h.RIGHT,o=h.PREV,i=c.RIGHT),p&&t(p).hasClass(h.ACTIVE))this._isSliding=!1;else{var b=this._triggerSlideEvent(p,i);if(!b.isDefaultPrevented()&&l&&p){this._isSliding=!0,g&&this.pause(),this._setActiveIndicatorElement(p);var v=t.Event(u.SLID,{relatedTarget:p,direction:i,from:d,to:m});if(t(this._element).hasClass(h.SLIDE)){t(p).addClass(o),s.reflow(p),t(l).addClass(r),t(p).addClass(r);var x=s.getTransitionDurationFromElement(l);t(l).one(s.TRANSITION_END,function(){t(p).removeClass(r+" "+o).addClass(h.ACTIVE),t(l).removeClass(h.ACTIVE+" "+o+" "+r),a._isSliding=!1,setTimeout(function(){return t(a._element).trigger(v)},0)}).emulateTransitionEnd(x)}else t(l).removeClass(h.ACTIVE),t(p).addClass(h.ACTIVE),this._isSliding=!1,t(this._element).trigger(v);g&&this.cycle()}}},i._jQueryInterface=function(n){return this.each(function(){var r=t(this).data(e),o=a({},l,t(this).data());"object"==typeof n&&(o=a({},o,n));var s="string"==typeof n?n:o.slide;if(r||(r=new i(this,o),t(this).data(e,r)),"number"==typeof n)r.to(n);else if("string"==typeof s){if(void 0===r[s])throw new TypeError('No method named "'+s+'"');r[s]()}else o.interval&&(r.pause(),r.cycle())})},i._dataApiClickHandler=function(n){var r=s.getSelectorFromElement(this);if(r){var o=t(r)[0];if(o&&t(o).hasClass(h.CAROUSEL)){var l=a({},t(o).data(),t(this).data()),d=this.getAttribute("data-slide-to");d&&(l.interval=!1),i._jQueryInterface.call(t(o),l),d&&t(o).data(e).to(d),n.preventDefault()}}},o(i,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return l}}]),i}();return t(document).on(u.CLICK_DATA_API,f.DATA_SLIDE,p._dataApiClickHandler),t(window).on(u.LOAD_DATA_API,function(){for(var n=[].slice.call(document.querySelectorAll(f.DATA_RIDE)),e=0,r=n.length;e<r;e++){var o=t(n[e]);p._jQueryInterface.call(o,o.data())}}),t.fn[n]=p._jQueryInterface,t.fn[n].Constructor=p,t.fn[n].noConflict=function(){return t.fn[n]=i,p._jQueryInterface},p}(n),u=function(t){var n="collapse",e="bs.collapse",r=t.fn[n],i={toggle:!0,parent:""},l={toggle:"boolean",parent:"(string|element)"},d={SHOW:"show.bs.collapse",SHOWN:"shown.bs.collapse",HIDE:"hide.bs.collapse",HIDDEN:"hidden.bs.collapse",CLICK_DATA_API:"click.bs.collapse.data-api"},c={SHOW:"show",COLLAPSE:"collapse",COLLAPSING:"collapsing",COLLAPSED:"collapsed"},u={WIDTH:"width",HEIGHT:"height"},h={ACTIVES:".show, .collapsing",DATA_TOGGLE:'[data-toggle="collapse"]'},f=function(){function r(n,e){this._isTransitioning=!1,this._element=n,this._config=this._getConfig(e),this._triggerArray=t.makeArray(document.querySelectorAll('[data-toggle="collapse"][href="#'+n.id+'"],[data-toggle="collapse"][data-target="#'+n.id+'"]'));for(var r=[].slice.call(document.querySelectorAll(h.DATA_TOGGLE)),o=0,i=r.length;o<i;o++){var a=r[o],l=s.getSelectorFromElement(a),d=[].slice.call(document.querySelectorAll(l)).filter(function(t){return t===n});null!==l&&d.length>0&&(this._selector=l,this._triggerArray.push(a))}this._parent=this._config.parent?this._getParent():null,this._config.parent||this._addAriaAndCollapsedClass(this._element,this._triggerArray),this._config.toggle&&this.toggle()}var f=r.prototype;return f.toggle=function(){t(this._element).hasClass(c.SHOW)?this.hide():this.show()},f.show=function(){var n,o,i=this;if(!(this._isTransitioning||t(this._element).hasClass(c.SHOW)||(this._parent&&0===(n=[].slice.call(this._parent.querySelectorAll(h.ACTIVES)).filter(function(t){return t.getAttribute("data-parent")===i._config.parent})).length&&(n=null),n&&(o=t(n).not(this._selector).data(e))&&o._isTransitioning))){var a=t.Event(d.SHOW);if(t(this._element).trigger(a),!a.isDefaultPrevented()){n&&(r._jQueryInterface.call(t(n).not(this._selector),"hide"),o||t(n).data(e,null));var l=this._getDimension();t(this._element).removeClass(c.COLLAPSE).addClass(c.COLLAPSING),this._element.style[l]=0,this._triggerArray.length&&t(this._triggerArray).removeClass(c.COLLAPSED).attr("aria-expanded",!0),this.setTransitioning(!0);var u=l[0].toUpperCase()+l.slice(1),f="scroll"+u,p=s.getTransitionDurationFromElement(this._element);t(this._element).one(s.TRANSITION_END,function(){t(i._element).removeClass(c.COLLAPSING).addClass(c.COLLAPSE).addClass(c.SHOW),i._element.style[l]="",i.setTransitioning(!1),t(i._element).trigger(d.SHOWN)}).emulateTransitionEnd(p),this._element.style[l]=this._element[f]+"px"}}},f.hide=function(){var n=this;if(!this._isTransitioning&&t(this._element).hasClass(c.SHOW)){var e=t.Event(d.HIDE);if(t(this._element).trigger(e),!e.isDefaultPrevented()){var r=this._getDimension();this._element.style[r]=this._element.getBoundingClientRect()[r]+"px",s.reflow(this._element),t(this._element).addClass(c.COLLAPSING).removeClass(c.COLLAPSE).removeClass(c.SHOW);var o=this._triggerArray.length;if(o>0)for(var i=0;i<o;i++){var a=this._triggerArray[i],l=s.getSelectorFromElement(a);if(null!==l){var u=t([].slice.call(document.querySelectorAll(l)));u.hasClass(c.SHOW)||t(a).addClass(c.COLLAPSED).attr("aria-expanded",!1)}}this.setTransitioning(!0),this._element.style[r]="";var h=s.getTransitionDurationFromElement(this._element);t(this._element).one(s.TRANSITION_END,function(){n.setTransitioning(!1),t(n._element).removeClass(c.COLLAPSING).addClass(c.COLLAPSE).trigger(d.HIDDEN)}).emulateTransitionEnd(h)}}},f.setTransitioning=function(t){this._isTransitioning=t},f.dispose=function(){t.removeData(this._element,e),this._config=null,this._parent=null,this._element=null,this._triggerArray=null,this._isTransitioning=null},f._getConfig=function(t){return(t=a({},i,t)).toggle=Boolean(t.toggle),s.typeCheckConfig(n,t,l),t},f._getDimension=function(){var n=t(this._element).hasClass(u.WIDTH);return n?u.WIDTH:u.HEIGHT},f._getParent=function(){var n=this,e=null;s.isElement(this._config.parent)?(e=this._config.parent,void 0!==this._config.parent.jquery&&(e=this._config.parent[0])):e=document.querySelector(this._config.parent);var o='[data-toggle="collapse"][data-parent="'+this._config.parent+'"]',i=[].slice.call(e.querySelectorAll(o));return t(i).each(function(t,e){n._addAriaAndCollapsedClass(r._getTargetFromElement(e),[e])}),e},f._addAriaAndCollapsedClass=function(n,e){if(n){var r=t(n).hasClass(c.SHOW);e.length&&t(e).toggleClass(c.COLLAPSED,!r).attr("aria-expanded",r)}},r._getTargetFromElement=function(t){var n=s.getSelectorFromElement(t);return n?document.querySelector(n):null},r._jQueryInterface=function(n){return this.each(function(){var o=t(this),s=o.data(e),l=a({},i,o.data(),"object"==typeof n&&n?n:{});if(!s&&l.toggle&&/show|hide/.test(n)&&(l.toggle=!1),s||(s=new r(this,l),o.data(e,s)),"string"==typeof n){if(void 0===s[n])throw new TypeError('No method named "'+n+'"');s[n]()}})},o(r,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return i}}]),r}();return t(document).on(d.CLICK_DATA_API,h.DATA_TOGGLE,function(n){"A"===n.currentTarget.tagName&&n.preventDefault();var r=t(this),o=s.getSelectorFromElement(this),i=[].slice.call(document.querySelectorAll(o));t(i).each(function(){var n=t(this),o=n.data(e),i=o?"toggle":r.data();f._jQueryInterface.call(n,i)})}),t.fn[n]=f._jQueryInterface,t.fn[n].Constructor=f,t.fn[n].noConflict=function(){return t.fn[n]=r,f._jQueryInterface},f}(n),h=function(t){var n="dropdown",r="bs.dropdown",i="."+r,l=t.fn[n],d=new RegExp("38|40|27"),c={HIDE:"hide"+i,HIDDEN:"hidden"+i,SHOW:"show"+i,SHOWN:"shown"+i,CLICK:"click"+i,CLICK_DATA_API:"click.bs.dropdown.data-api",KEYDOWN_DATA_API:"keydown.bs.dropdown.data-api",KEYUP_DATA_API:"keyup.bs.dropdown.data-api"},u={DISABLED:"disabled",SHOW:"show",DROPUP:"dropup",DROPRIGHT:"dropright",DROPLEFT:"dropleft",MENURIGHT:"dropdown-menu-right",MENULEFT:"dropdown-menu-left",POSITION_STATIC:"position-static"},h={DATA_TOGGLE:'[data-toggle="dropdown"]',FORM_CHILD:".dropdown form",MENU:".dropdown-menu",NAVBAR_NAV:".navbar-nav",VISIBLE_ITEMS:".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)"},f={TOP:"top-start",TOPEND:"top-end",BOTTOM:"bottom-start",BOTTOMEND:"bottom-end",RIGHT:"right-start",RIGHTEND:"right-end",LEFT:"left-start",LEFTEND:"left-end"},p={offset:0,flip:!0,boundary:"scrollParent",reference:"toggle",display:"dynamic"},m={offset:"(number|string|function)",flip:"boolean",boundary:"(string|element)",reference:"(string|element)",display:"string"},g=function(){function l(t,n){this._element=t,this._popper=null,this._config=this._getConfig(n),this._menu=this._getMenuElement(),this._inNavbar=this._detectNavbar(),this._addEventListeners()}var g=l.prototype;return g.toggle=function(){if(!this._element.disabled&&!t(this._element).hasClass(u.DISABLED)){var n=l._getParentFromElement(this._element),r=t(this._menu).hasClass(u.SHOW);if(l._clearMenus(),!r){var o={relatedTarget:this._element},i=t.Event(c.SHOW,o);if(t(n).trigger(i),!i.isDefaultPrevented()){if(!this._inNavbar){if(void 0===e)throw new TypeError("Bootstrap dropdown require Popper.js (https://popper.js.org)");var a=this._element;"parent"===this._config.reference?a=n:s.isElement(this._config.reference)&&(a=this._config.reference,void 0!==this._config.reference.jquery&&(a=this._config.reference[0])),"scrollParent"!==this._config.boundary&&t(n).addClass(u.POSITION_STATIC),this._popper=new e(a,this._menu,this._getPopperConfig())}"ontouchstart"in document.documentElement&&0===t(n).closest(h.NAVBAR_NAV).length&&t(document.body).children().on("mouseover",null,t.noop),this._element.focus(),this._element.setAttribute("aria-expanded",!0),t(this._menu).toggleClass(u.SHOW),t(n).toggleClass(u.SHOW).trigger(t.Event(c.SHOWN,o))}}}},g.dispose=function(){t.removeData(this._element,r),t(this._element).off(i),this._element=null,this._menu=null,null!==this._popper&&(this._popper.destroy(),this._popper=null)},g.update=function(){this._inNavbar=this._detectNavbar(),null!==this._popper&&this._popper.scheduleUpdate()},g._addEventListeners=function(){var n=this;t(this._element).on(c.CLICK,function(t){t.preventDefault(),t.stopPropagation(),n.toggle()})},g._getConfig=function(e){return e=a({},this.constructor.Default,t(this._element).data(),e),s.typeCheckConfig(n,e,this.constructor.DefaultType),e},g._getMenuElement=function(){if(!this._menu){var t=l._getParentFromElement(this._element);t&&(this._menu=t.querySelector(h.MENU))}return this._menu},g._getPlacement=function(){var n=t(this._element.parentNode),e=f.BOTTOM;return n.hasClass(u.DROPUP)?(e=f.TOP,t(this._menu).hasClass(u.MENURIGHT)&&(e=f.TOPEND)):n.hasClass(u.DROPRIGHT)?e=f.RIGHT:n.hasClass(u.DROPLEFT)?e=f.LEFT:t(this._menu).hasClass(u.MENURIGHT)&&(e=f.BOTTOMEND),e},g._detectNavbar=function(){return t(this._element).closest(".navbar").length>0},g._getPopperConfig=function(){var t=this,n={};"function"==typeof this._config.offset?n.fn=function(n){return n.offsets=a({},n.offsets,t._config.offset(n.offsets)||{}),n}:n.offset=this._config.offset;var e={placement:this._getPlacement(),modifiers:{offset:n,flip:{enabled:this._config.flip},preventOverflow:{boundariesElement:this._config.boundary}}};return"static"===this._config.display&&(e.modifiers.applyStyle={enabled:!1}),e},l._jQueryInterface=function(n){return this.each(function(){var e=t(this).data(r),o="object"==typeof n?n:null;if(e||(e=new l(this,o),t(this).data(r,e)),"string"==typeof n){if(void 0===e[n])throw new TypeError('No method named "'+n+'"');e[n]()}})},l._clearMenus=function(n){if(!n||3!==n.which&&("keyup"!==n.type||9===n.which))for(var e=[].slice.call(document.querySelectorAll(h.DATA_TOGGLE)),o=0,i=e.length;o<i;o++){var a=l._getParentFromElement(e[o]),s=t(e[o]).data(r),d={relatedTarget:e[o]};if(n&&"click"===n.type&&(d.clickEvent=n),s){var f=s._menu;if(t(a).hasClass(u.SHOW)&&!(n&&("click"===n.type&&/input|textarea/i.test(n.target.tagName)||"keyup"===n.type&&9===n.which)&&t.contains(a,n.target))){var p=t.Event(c.HIDE,d);t(a).trigger(p),p.isDefaultPrevented()||("ontouchstart"in document.documentElement&&t(document.body).children().off("mouseover",null,t.noop),e[o].setAttribute("aria-expanded","false"),t(f).removeClass(u.SHOW),t(a).removeClass(u.SHOW).trigger(t.Event(c.HIDDEN,d)))}}}},l._getParentFromElement=function(t){var n,e=s.getSelectorFromElement(t);return e&&(n=document.querySelector(e)),n||t.parentNode},l._dataApiKeydownHandler=function(n){if((/input|textarea/i.test(n.target.tagName)?!(32===n.which||27!==n.which&&(40!==n.which&&38!==n.which||t(n.target).closest(h.MENU).length)):d.test(n.which))&&(n.preventDefault(),n.stopPropagation(),!this.disabled&&!t(this).hasClass(u.DISABLED))){var e=l._getParentFromElement(this),r=t(e).hasClass(u.SHOW);if((r||27===n.which&&32===n.which)&&(!r||27!==n.which&&32!==n.which)){var o=[].slice.call(e.querySelectorAll(h.VISIBLE_ITEMS));if(0!==o.length){var i=o.indexOf(n.target);38===n.which&&i>0&&i--,40===n.which&&i<o.length-1&&i++,i<0&&(i=0),o[i].focus()}}else{if(27===n.which){var a=e.querySelector(h.DATA_TOGGLE);t(a).trigger("focus")}t(this).trigger("click")}}},o(l,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return p}},{key:"DefaultType",get:function(){return m}}]),l}();return t(document).on(c.KEYDOWN_DATA_API,h.DATA_TOGGLE,g._dataApiKeydownHandler).on(c.KEYDOWN_DATA_API,h.MENU,g._dataApiKeydownHandler).on(c.CLICK_DATA_API+" "+c.KEYUP_DATA_API,g._clearMenus).on(c.CLICK_DATA_API,h.DATA_TOGGLE,function(n){n.preventDefault(),n.stopPropagation(),g._jQueryInterface.call(t(this),"toggle")}).on(c.CLICK_DATA_API,h.FORM_CHILD,function(t){t.stopPropagation()}),t.fn[n]=g._jQueryInterface,t.fn[n].Constructor=g,t.fn[n].noConflict=function(){return t.fn[n]=l,g._jQueryInterface},g}(n),f=function(t){var n="modal",e=".bs.modal",r=t.fn.modal,i={backdrop:!0,keyboard:!0,focus:!0,show:!0},l={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean",show:"boolean"},d={HIDE:"hide.bs.modal",HIDDEN:"hidden.bs.modal",SHOW:"show.bs.modal",SHOWN:"shown.bs.modal",FOCUSIN:"focusin.bs.modal",RESIZE:"resize.bs.modal",CLICK_DISMISS:"click.dismiss.bs.modal",KEYDOWN_DISMISS:"keydown.dismiss.bs.modal",MOUSEUP_DISMISS:"mouseup.dismiss.bs.modal",MOUSEDOWN_DISMISS:"mousedown.dismiss.bs.modal",CLICK_DATA_API:"click.bs.modal.data-api"},c={SCROLLBAR_MEASURER:"modal-scrollbar-measure",BACKDROP:"modal-backdrop",OPEN:"modal-open",FADE:"fade",SHOW:"show"},u={DIALOG:".modal-dialog",DATA_TOGGLE:'[data-toggle="modal"]',DATA_DISMISS:'[data-dismiss="modal"]',FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top"},h=function(){function r(t,n){this._config=this._getConfig(n),this._element=t,this._dialog=t.querySelector(u.DIALOG),this._backdrop=null,this._isShown=!1,this._isBodyOverflowing=!1,this._ignoreBackdropClick=!1,this._scrollbarWidth=0}var h=r.prototype;return h.toggle=function(t){return this._isShown?this.hide():this.show(t)},h.show=function(n){var e=this;if(!this._isTransitioning&&!this._isShown){t(this._element).hasClass(c.FADE)&&(this._isTransitioning=!0);var r=t.Event(d.SHOW,{relatedTarget:n});t(this._element).trigger(r),this._isShown||r.isDefaultPrevented()||(this._isShown=!0,this._checkScrollbar(),this._setScrollbar(),this._adjustDialog(),t(document.body).addClass(c.OPEN),this._setEscapeEvent(),this._setResizeEvent(),t(this._element).on(d.CLICK_DISMISS,u.DATA_DISMISS,function(t){return e.hide(t)}),t(this._dialog).on(d.MOUSEDOWN_DISMISS,function(){t(e._element).one(d.MOUSEUP_DISMISS,function(n){t(n.target).is(e._element)&&(e._ignoreBackdropClick=!0)})}),this._showBackdrop(function(){return e._showElement(n)}))}},h.hide=function(n){var e=this;if(n&&n.preventDefault(),!this._isTransitioning&&this._isShown){var r=t.Event(d.HIDE);if(t(this._element).trigger(r),this._isShown&&!r.isDefaultPrevented()){this._isShown=!1;var o=t(this._element).hasClass(c.FADE);if(o&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),t(document).off(d.FOCUSIN),t(this._element).removeClass(c.SHOW),t(this._element).off(d.CLICK_DISMISS),t(this._dialog).off(d.MOUSEDOWN_DISMISS),o){var i=s.getTransitionDurationFromElement(this._element);t(this._element).one(s.TRANSITION_END,function(t){return e._hideModal(t)}).emulateTransitionEnd(i)}else this._hideModal()}}},h.dispose=function(){t.removeData(this._element,"bs.modal"),t(window,document,this._element,this._backdrop).off(e),this._config=null,this._element=null,this._dialog=null,this._backdrop=null,this._isShown=null,this._isBodyOverflowing=null,this._ignoreBackdropClick=null,this._scrollbarWidth=null},h.handleUpdate=function(){this._adjustDialog()},h._getConfig=function(t){return t=a({},i,t),s.typeCheckConfig(n,t,l),t},h._showElement=function(n){var e=this,r=t(this._element).hasClass(c.FADE);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.scrollTop=0,r&&s.reflow(this._element),t(this._element).addClass(c.SHOW),this._config.focus&&this._enforceFocus();var o=t.Event(d.SHOWN,{relatedTarget:n}),i=function(){e._config.focus&&e._element.focus(),e._isTransitioning=!1,t(e._element).trigger(o)};if(r){var a=s.getTransitionDurationFromElement(this._element);t(this._dialog).one(s.TRANSITION_END,i).emulateTransitionEnd(a)}else i()},h._enforceFocus=function(){var n=this;t(document).off(d.FOCUSIN).on(d.FOCUSIN,function(e){document!==e.target&&n._element!==e.target&&0===t(n._element).has(e.target).length&&n._element.focus()})},h._setEscapeEvent=function(){var n=this;this._isShown&&this._config.keyboard?t(this._element).on(d.KEYDOWN_DISMISS,function(t){27===t.which&&(t.preventDefault(),n.hide())}):this._isShown||t(this._element).off(d.KEYDOWN_DISMISS)},h._setResizeEvent=function(){var n=this;this._isShown?t(window).on(d.RESIZE,function(t){return n.handleUpdate(t)}):t(window).off(d.RESIZE)},h._hideModal=function(){var n=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._isTransitioning=!1,this._showBackdrop(function(){t(document.body).removeClass(c.OPEN),n._resetAdjustments(),n._resetScrollbar(),t(n._element).trigger(d.HIDDEN)})},h._removeBackdrop=function(){this._backdrop&&(t(this._backdrop).remove(),this._backdrop=null)},h._showBackdrop=function(n){var e=this,r=t(this._element).hasClass(c.FADE)?c.FADE:"";if(this._isShown&&this._config.backdrop){if(this._backdrop=document.createElement("div"),this._backdrop.className=c.BACKDROP,r&&this._backdrop.classList.add(r),t(this._backdrop).appendTo(document.body),t(this._element).on(d.CLICK_DISMISS,function(t){e._ignoreBackdropClick?e._ignoreBackdropClick=!1:t.target===t.currentTarget&&("static"===e._config.backdrop?e._element.focus():e.hide())}),r&&s.reflow(this._backdrop),t(this._backdrop).addClass(c.SHOW),!n)return;if(!r)return void n();var o=s.getTransitionDurationFromElement(this._backdrop);t(this._backdrop).one(s.TRANSITION_END,n).emulateTransitionEnd(o)}else if(!this._isShown&&this._backdrop){t(this._backdrop).removeClass(c.SHOW);var i=function(){e._removeBackdrop(),n&&n()};if(t(this._element).hasClass(c.FADE)){var a=s.getTransitionDurationFromElement(this._backdrop);t(this._backdrop).one(s.TRANSITION_END,i).emulateTransitionEnd(a)}else i()}else n&&n()},h._adjustDialog=function(){var t=this._element.scrollHeight>document.documentElement.clientHeight;!this._isBodyOverflowing&&t&&(this._element.style.paddingLeft=this._scrollbarWidth+"px"),this._isBodyOverflowing&&!t&&(this._element.style.paddingRight=this._scrollbarWidth+"px")},h._resetAdjustments=function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""},h._checkScrollbar=function(){var t=document.body.getBoundingClientRect();this._isBodyOverflowing=t.left+t.right<window.innerWidth,this._scrollbarWidth=this._getScrollbarWidth()},h._setScrollbar=function(){var n=this;if(this._isBodyOverflowing){var e=[].slice.call(document.querySelectorAll(u.FIXED_CONTENT)),r=[].slice.call(document.querySelectorAll(u.STICKY_CONTENT));t(e).each(function(e,r){var o=r.style.paddingRight,i=t(r).css("padding-right");t(r).data("padding-right",o).css("padding-right",parseFloat(i)+n._scrollbarWidth+"px")}),t(r).each(function(e,r){var o=r.style.marginRight,i=t(r).css("margin-right");t(r).data("margin-right",o).css("margin-right",parseFloat(i)-n._scrollbarWidth+"px")});var o=document.body.style.paddingRight,i=t(document.body).css("padding-right");t(document.body).data("padding-right",o).css("padding-right",parseFloat(i)+this._scrollbarWidth+"px")}},h._resetScrollbar=function(){var n=[].slice.call(document.querySelectorAll(u.FIXED_CONTENT));t(n).each(function(n,e){var r=t(e).data("padding-right");t(e).removeData("padding-right"),e.style.paddingRight=r||""});var e=[].slice.call(document.querySelectorAll(""+u.STICKY_CONTENT));t(e).each(function(n,e){var r=t(e).data("margin-right");void 0!==r&&t(e).css("margin-right",r).removeData("margin-right")});var r=t(document.body).data("padding-right");t(document.body).removeData("padding-right"),document.body.style.paddingRight=r||""},h._getScrollbarWidth=function(){var t=document.createElement("div");t.className=c.SCROLLBAR_MEASURER,document.body.appendChild(t);var n=t.getBoundingClientRect().width-t.clientWidth;return document.body.removeChild(t),n},r._jQueryInterface=function(n,e){return this.each(function(){var o=t(this).data("bs.modal"),s=a({},i,t(this).data(),"object"==typeof n&&n?n:{});if(o||(o=new r(this,s),t(this).data("bs.modal",o)),"string"==typeof n){if(void 0===o[n])throw new TypeError('No method named "'+n+'"');o[n](e)}else s.show&&o.show(e)})},o(r,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return i}}]),r}();return t(document).on(d.CLICK_DATA_API,u.DATA_TOGGLE,function(n){var e,r=this,o=s.getSelectorFromElement(this);o&&(e=document.querySelector(o));var i=t(e).data("bs.modal")?"toggle":a({},t(e).data(),t(this).data());"A"!==this.tagName&&"AREA"!==this.tagName||n.preventDefault();var l=t(e).one(d.SHOW,function(n){n.isDefaultPrevented()||l.one(d.HIDDEN,function(){t(r).is(":visible")&&r.focus()})});h._jQueryInterface.call(t(e),i,this)}),t.fn.modal=h._jQueryInterface,t.fn.modal.Constructor=h,t.fn.modal.noConflict=function(){return t.fn.modal=r,h._jQueryInterface},h}(n),p=function(t){var n="tooltip",r=".bs.tooltip",i=t.fn[n],l=new RegExp("(^|\\s)bs-tooltip\\S+","g"),d={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(number|string)",container:"(string|element|boolean)",fallbackPlacement:"(string|array)",boundary:"(string|element)"},c={AUTO:"auto",TOP:"top",RIGHT:"right",BOTTOM:"bottom",LEFT:"left"},u={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:0,container:!1,fallbackPlacement:"flip",boundary:"scrollParent"},h={SHOW:"show",OUT:"out"},f={HIDE:"hide"+r,HIDDEN:"hidden"+r,SHOW:"show"+r,SHOWN:"shown"+r,INSERTED:"inserted"+r,CLICK:"click"+r,FOCUSIN:"focusin"+r,FOCUSOUT:"focusout"+r,MOUSEENTER:"mouseenter"+r,MOUSELEAVE:"mouseleave"+r},p={FADE:"fade",SHOW:"show"},m={TOOLTIP:".tooltip",TOOLTIP_INNER:".tooltip-inner",ARROW:".arrow"},g={HOVER:"hover",FOCUS:"focus",CLICK:"click",MANUAL:"manual"},b=function(){function i(t,n){if(void 0===e)throw new TypeError("Bootstrap tooltips require Popper.js (https://popper.js.org)");this._isEnabled=!0,this._timeout=0,this._hoverState="",this._activeTrigger={},this._popper=null,this.element=t,this.config=this._getConfig(n),this.tip=null,this._setListeners()}var b=i.prototype;return b.enable=function(){this._isEnabled=!0},b.disable=function(){this._isEnabled=!1},b.toggleEnabled=function(){this._isEnabled=!this._isEnabled},b.toggle=function(n){if(this._isEnabled)if(n){var e=this.constructor.DATA_KEY,r=t(n.currentTarget).data(e);r||(r=new this.constructor(n.currentTarget,this._getDelegateConfig()),t(n.currentTarget).data(e,r)),r._activeTrigger.click=!r._activeTrigger.click,r._isWithActiveTrigger()?r._enter(null,r):r._leave(null,r)}else{if(t(this.getTipElement()).hasClass(p.SHOW))return void this._leave(null,this);this._enter(null,this)}},b.dispose=function(){clearTimeout(this._timeout),t.removeData(this.element,this.constructor.DATA_KEY),t(this.element).off(this.constructor.EVENT_KEY),t(this.element).closest(".modal").off("hide.bs.modal"),this.tip&&t(this.tip).remove(),this._isEnabled=null,this._timeout=null,this._hoverState=null,this._activeTrigger=null,null!==this._popper&&this._popper.destroy(),this._popper=null,this.element=null,this.config=null,this.tip=null},b.show=function(){var n=this;if("none"===t(this.element).css("display"))throw new Error("Please use show on visible elements");var r=t.Event(this.constructor.Event.SHOW);if(this.isWithContent()&&this._isEnabled){t(this.element).trigger(r);var o=t.contains(this.element.ownerDocument.documentElement,this.element);if(r.isDefaultPrevented()||!o)return;var i=this.getTipElement(),a=s.getUID(this.constructor.NAME);i.setAttribute("id",a),this.element.setAttribute("aria-describedby",a),this.setContent(),this.config.animation&&t(i).addClass(p.FADE);var l="function"==typeof this.config.placement?this.config.placement.call(this,i,this.element):this.config.placement,d=this._getAttachment(l);this.addAttachmentClass(d);var c=!1===this.config.container?document.body:t(document).find(this.config.container);t(i).data(this.constructor.DATA_KEY,this),t.contains(this.element.ownerDocument.documentElement,this.tip)||t(i).appendTo(c),t(this.element).trigger(this.constructor.Event.INSERTED),this._popper=new e(this.element,i,{placement:d,modifiers:{offset:{offset:this.config.offset},flip:{behavior:this.config.fallbackPlacement},arrow:{element:m.ARROW},preventOverflow:{boundariesElement:this.config.boundary}},onCreate:function(t){t.originalPlacement!==t.placement&&n._handlePopperPlacementChange(t)},onUpdate:function(t){n._handlePopperPlacementChange(t)}}),t(i).addClass(p.SHOW),"ontouchstart"in document.documentElement&&t(document.body).children().on("mouseover",null,t.noop);var u=function(){n.config.animation&&n._fixTransition();var e=n._hoverState;n._hoverState=null,t(n.element).trigger(n.constructor.Event.SHOWN),e===h.OUT&&n._leave(null,n)};if(t(this.tip).hasClass(p.FADE)){var f=s.getTransitionDurationFromElement(this.tip);t(this.tip).one(s.TRANSITION_END,u).emulateTransitionEnd(f)}else u()}},b.hide=function(n){var e=this,r=this.getTipElement(),o=t.Event(this.constructor.Event.HIDE),i=function(){e._hoverState!==h.SHOW&&r.parentNode&&r.parentNode.removeChild(r),e._cleanTipClass(),e.element.removeAttribute("aria-describedby"),t(e.element).trigger(e.constructor.Event.HIDDEN),null!==e._popper&&e._popper.destroy(),n&&n()};if(t(this.element).trigger(o),!o.isDefaultPrevented()){if(t(r).removeClass(p.SHOW),"ontouchstart"in document.documentElement&&t(document.body).children().off("mouseover",null,t.noop),this._activeTrigger[g.CLICK]=!1,this._activeTrigger[g.FOCUS]=!1,this._activeTrigger[g.HOVER]=!1,t(this.tip).hasClass(p.FADE)){var a=s.getTransitionDurationFromElement(r);t(r).one(s.TRANSITION_END,i).emulateTransitionEnd(a)}else i();this._hoverState=""}},b.update=function(){null!==this._popper&&this._popper.scheduleUpdate()},b.isWithContent=function(){return Boolean(this.getTitle())},b.addAttachmentClass=function(n){t(this.getTipElement()).addClass("bs-tooltip-"+n)},b.getTipElement=function(){return this.tip=this.tip||t(this.config.template)[0],this.tip},b.setContent=function(){var n=this.getTipElement();this.setElementContent(t(n.querySelectorAll(m.TOOLTIP_INNER)),this.getTitle()),t(n).removeClass(p.FADE+" "+p.SHOW)},b.setElementContent=function(n,e){var r=this.config.html;"object"==typeof e&&(e.nodeType||e.jquery)?r?t(e).parent().is(n)||n.empty().append(e):n.text(t(e).text()):n[r?"html":"text"](e)},b.getTitle=function(){var t=this.element.getAttribute("data-original-title");return t||(t="function"==typeof this.config.title?this.config.title.call(this.element):this.config.title),t},b._getAttachment=function(t){return c[t.toUpperCase()]},b._setListeners=function(){var n=this,e=this.config.trigger.split(" ");e.forEach(function(e){if("click"===e)t(n.element).on(n.constructor.Event.CLICK,n.config.selector,function(t){return n.toggle(t)});else if(e!==g.MANUAL){var r=e===g.HOVER?n.constructor.Event.MOUSEENTER:n.constructor.Event.FOCUSIN,o=e===g.HOVER?n.constructor.Event.MOUSELEAVE:n.constructor.Event.FOCUSOUT;t(n.element).on(r,n.config.selector,function(t){return n._enter(t)}).on(o,n.config.selector,function(t){return n._leave(t)})}t(n.element).closest(".modal").on("hide.bs.modal",function(){return n.hide()})}),this.config.selector?this.config=a({},this.config,{trigger:"manual",selector:""}):this._fixTitle()},b._fixTitle=function(){var t=typeof this.element.getAttribute("data-original-title");(this.element.getAttribute("title")||"string"!==t)&&(this.element.setAttribute("data-original-title",this.element.getAttribute("title")||""),this.element.setAttribute("title",""))},b._enter=function(n,e){var r=this.constructor.DATA_KEY;(e=e||t(n.currentTarget).data(r))||(e=new this.constructor(n.currentTarget,this._getDelegateConfig()),t(n.currentTarget).data(r,e)),n&&(e._activeTrigger["focusin"===n.type?g.FOCUS:g.HOVER]=!0),t(e.getTipElement()).hasClass(p.SHOW)||e._hoverState===h.SHOW?e._hoverState=h.SHOW:(clearTimeout(e._timeout),e._hoverState=h.SHOW,e.config.delay&&e.config.delay.show?e._timeout=setTimeout(function(){e._hoverState===h.SHOW&&e.show()},e.config.delay.show):e.show())},b._leave=function(n,e){var r=this.constructor.DATA_KEY;(e=e||t(n.currentTarget).data(r))||(e=new this.constructor(n.currentTarget,this._getDelegateConfig()),t(n.currentTarget).data(r,e)),n&&(e._activeTrigger["focusout"===n.type?g.FOCUS:g.HOVER]=!1),e._isWithActiveTrigger()||(clearTimeout(e._timeout),e._hoverState=h.OUT,e.config.delay&&e.config.delay.hide?e._timeout=setTimeout(function(){e._hoverState===h.OUT&&e.hide()},e.config.delay.hide):e.hide())},b._isWithActiveTrigger=function(){for(var t in this._activeTrigger)if(this._activeTrigger[t])return!0;return!1},b._getConfig=function(e){return"number"==typeof(e=a({},this.constructor.Default,t(this.element).data(),"object"==typeof e&&e?e:{})).delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),s.typeCheckConfig(n,e,this.constructor.DefaultType),e},b._getDelegateConfig=function(){var t={};if(this.config)for(var n in this.config)this.constructor.Default[n]!==this.config[n]&&(t[n]=this.config[n]);return t},b._cleanTipClass=function(){var n=t(this.getTipElement()),e=n.attr("class").match(l);null!==e&&e.length&&n.removeClass(e.join(""))},b._handlePopperPlacementChange=function(t){var n=t.instance;this.tip=n.popper,this._cleanTipClass(),this.addAttachmentClass(this._getAttachment(t.placement))},b._fixTransition=function(){var n=this.getTipElement(),e=this.config.animation;null===n.getAttribute("x-placement")&&(t(n).removeClass(p.FADE),this.config.animation=!1,this.hide(),this.show(),this.config.animation=e)},i._jQueryInterface=function(n){return this.each(function(){var e=t(this).data("bs.tooltip"),r="object"==typeof n&&n;if((e||!/dispose|hide/.test(n))&&(e||(e=new i(this,r),t(this).data("bs.tooltip",e)),"string"==typeof n)){if(void 0===e[n])throw new TypeError('No method named "'+n+'"');e[n]()}})},o(i,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return u}},{key:"NAME",get:function(){return n}},{key:"DATA_KEY",get:function(){return"bs.tooltip"}},{key:"Event",get:function(){return f}},{key:"EVENT_KEY",get:function(){return r}},{key:"DefaultType",get:function(){return d}}]),i}();return t.fn[n]=b._jQueryInterface,t.fn[n].Constructor=b,t.fn[n].noConflict=function(){return t.fn[n]=i,b._jQueryInterface},b}(n),m=function(t){var n="popover",e=".bs.popover",r=t.fn[n],i=new RegExp("(^|\\s)bs-popover\\S+","g"),s=a({},p.Default,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),l=a({},p.DefaultType,{content:"(string|element|function)"}),d={FADE:"fade",SHOW:"show"},c={TITLE:".popover-header",CONTENT:".popover-body"},u={HIDE:"hide"+e,HIDDEN:"hidden"+e,SHOW:"show"+e,SHOWN:"shown"+e,INSERTED:"inserted"+e,CLICK:"click"+e,FOCUSIN:"focusin"+e,FOCUSOUT:"focusout"+e,MOUSEENTER:"mouseenter"+e,MOUSELEAVE:"mouseleave"+e},h=function(r){var a,h;function f(){return r.apply(this,arguments)||this}h=r,(a=f).prototype=Object.create(h.prototype),a.prototype.constructor=a,a.__proto__=h;var p=f.prototype;return p.isWithContent=function(){return this.getTitle()||this._getContent()},p.addAttachmentClass=function(n){t(this.getTipElement()).addClass("bs-popover-"+n)},p.getTipElement=function(){return this.tip=this.tip||t(this.config.template)[0],this.tip},p.setContent=function(){var n=t(this.getTipElement());this.setElementContent(n.find(c.TITLE),this.getTitle());var e=this._getContent();"function"==typeof e&&(e=e.call(this.element)),this.setElementContent(n.find(c.CONTENT),e),n.removeClass(d.FADE+" "+d.SHOW)},p._getContent=function(){return this.element.getAttribute("data-content")||this.config.content},p._cleanTipClass=function(){var n=t(this.getTipElement()),e=n.attr("class").match(i);null!==e&&e.length>0&&n.removeClass(e.join(""))},f._jQueryInterface=function(n){return this.each(function(){var e=t(this).data("bs.popover"),r="object"==typeof n?n:null;if((e||!/destroy|hide/.test(n))&&(e||(e=new f(this,r),t(this).data("bs.popover",e)),"string"==typeof n)){if(void 0===e[n])throw new TypeError('No method named "'+n+'"');e[n]()}})},o(f,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return s}},{key:"NAME",get:function(){return n}},{key:"DATA_KEY",get:function(){return"bs.popover"}},{key:"Event",get:function(){return u}},{key:"EVENT_KEY",get:function(){return e}},{key:"DefaultType",get:function(){return l}}]),f}(p);return t.fn[n]=h._jQueryInterface,t.fn[n].Constructor=h,t.fn[n].noConflict=function(){return t.fn[n]=r,h._jQueryInterface},h}(n),g=function(t){var n="scrollspy",e=t.fn[n],r={offset:10,method:"auto",target:""},i={offset:"number",method:"string",target:"(string|element)"},l={ACTIVATE:"activate.bs.scrollspy",SCROLL:"scroll.bs.scrollspy",LOAD_DATA_API:"load.bs.scrollspy.data-api"},d={DROPDOWN_ITEM:"dropdown-item",DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active"},c={DATA_SPY:'[data-spy="scroll"]',ACTIVE:".active",NAV_LIST_GROUP:".nav, .list-group",NAV_LINKS:".nav-link",NAV_ITEMS:".nav-item",LIST_ITEMS:".list-group-item",DROPDOWN:".dropdown",DROPDOWN_ITEMS:".dropdown-item",DROPDOWN_TOGGLE:".dropdown-toggle"},u={OFFSET:"offset",POSITION:"position"},h=function(){function e(n,e){var r=this;this._element=n,this._scrollElement="BODY"===n.tagName?window:n,this._config=this._getConfig(e),this._selector=this._config.target+" "+c.NAV_LINKS+","+this._config.target+" "+c.LIST_ITEMS+","+this._config.target+" "+c.DROPDOWN_ITEMS,this._offsets=[],this._targets=[],this._activeTarget=null,this._scrollHeight=0,t(this._scrollElement).on(l.SCROLL,function(t){return r._process(t)}),this.refresh(),this._process()}var h=e.prototype;return h.refresh=function(){var n=this,e=this._scrollElement===this._scrollElement.window?u.OFFSET:u.POSITION,r="auto"===this._config.method?e:this._config.method,o=r===u.POSITION?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight();var i=[].slice.call(document.querySelectorAll(this._selector));i.map(function(n){var e,i=s.getSelectorFromElement(n);if(i&&(e=document.querySelector(i)),e){var a=e.getBoundingClientRect();if(a.width||a.height)return[t(e)[r]().top+o,i]}return null}).filter(function(t){return t}).sort(function(t,n){return t[0]-n[0]}).forEach(function(t){n._offsets.push(t[0]),n._targets.push(t[1])})},h.dispose=function(){t.removeData(this._element,"bs.scrollspy"),t(this._scrollElement).off(".bs.scrollspy"),this._element=null,this._scrollElement=null,this._config=null,this._selector=null,this._offsets=null,this._targets=null,this._activeTarget=null,this._scrollHeight=null},h._getConfig=function(e){if("string"!=typeof(e=a({},r,"object"==typeof e&&e?e:{})).target){var o=t(e.target).attr("id");o||(o=s.getUID(n),t(e.target).attr("id",o)),e.target="#"+o}return s.typeCheckConfig(n,e,i),e},h._getScrollTop=function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop},h._getScrollHeight=function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)},h._getOffsetHeight=function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height},h._process=function(){var t=this._getScrollTop()+this._config.offset,n=this._getScrollHeight(),e=this._config.offset+n-this._getOffsetHeight();if(this._scrollHeight!==n&&this.refresh(),t>=e){var r=this._targets[this._targets.length-1];this._activeTarget!==r&&this._activate(r)}else{if(this._activeTarget&&t<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var o=this._offsets.length,i=o;i--;){var a=this._activeTarget!==this._targets[i]&&t>=this._offsets[i]&&(void 0===this._offsets[i+1]||t<this._offsets[i+1]);a&&this._activate(this._targets[i])}}},h._activate=function(n){this._activeTarget=n,this._clear();var e=this._selector.split(",");e=e.map(function(t){return t+'[data-target="'+n+'"],'+t+'[href="'+n+'"]'});var r=t([].slice.call(document.querySelectorAll(e.join(","))));r.hasClass(d.DROPDOWN_ITEM)?(r.closest(c.DROPDOWN).find(c.DROPDOWN_TOGGLE).addClass(d.ACTIVE),r.addClass(d.ACTIVE)):(r.addClass(d.ACTIVE),r.parents(c.NAV_LIST_GROUP).prev(c.NAV_LINKS+", "+c.LIST_ITEMS).addClass(d.ACTIVE),r.parents(c.NAV_LIST_GROUP).prev(c.NAV_ITEMS).children(c.NAV_LINKS).addClass(d.ACTIVE)),t(this._scrollElement).trigger(l.ACTIVATE,{relatedTarget:n})},h._clear=function(){var n=[].slice.call(document.querySelectorAll(this._selector));t(n).filter(c.ACTIVE).removeClass(d.ACTIVE)},e._jQueryInterface=function(n){return this.each(function(){var r=t(this).data("bs.scrollspy"),o="object"==typeof n&&n;if(r||(r=new e(this,o),t(this).data("bs.scrollspy",r)),"string"==typeof n){if(void 0===r[n])throw new TypeError('No method named "'+n+'"');r[n]()}})},o(e,null,[{key:"VERSION",get:function(){return"4.1.3"}},{key:"Default",get:function(){return r}}]),e}();return t(window).on(l.LOAD_DATA_API,function(){for(var n=[].slice.call(document.querySelectorAll(c.DATA_SPY)),e=n.length,r=e;r--;){var o=t(n[r]);h._jQueryInterface.call(o,o.data())}}),t.fn[n]=h._jQueryInterface,t.fn[n].Constructor=h,t.fn[n].noConflict=function(){return t.fn[n]=e,h._jQueryInterface},h}(n),b=function(t){var n=t.fn.tab,e={HIDE:"hide.bs.tab",HIDDEN:"hidden.bs.tab",SHOW:"show.bs.tab",SHOWN:"shown.bs.tab",CLICK_DATA_API:"click.bs.tab.data-api"},r={DROPDOWN_MENU:"dropdown-menu",ACTIVE:"active",DISABLED:"disabled",FADE:"fade",SHOW:"show"},i={DROPDOWN:".dropdown",NAV_LIST_GROUP:".nav, .list-group",ACTIVE:".active",ACTIVE_UL:"> li > .active",DATA_TOGGLE:'[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',DROPDOWN_TOGGLE:".dropdown-toggle",DROPDOWN_ACTIVE_CHILD:"> .dropdown-menu .active"},a=function(){function n(t){this._element=t}var a=n.prototype;return a.show=function(){var n=this;if(!(this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE&&t(this._element).hasClass(r.ACTIVE)||t(this._element).hasClass(r.DISABLED))){var o,a,l=t(this._element).closest(i.NAV_LIST_GROUP)[0],d=s.getSelectorFromElement(this._element);if(l){var c="UL"===l.nodeName?i.ACTIVE_UL:i.ACTIVE;a=(a=t.makeArray(t(l).find(c)))[a.length-1]}var u=t.Event(e.HIDE,{relatedTarget:this._element}),h=t.Event(e.SHOW,{relatedTarget:a});if(a&&t(a).trigger(u),t(this._element).trigger(h),!h.isDefaultPrevented()&&!u.isDefaultPrevented()){d&&(o=document.querySelector(d)),this._activate(this._element,l);var f=function(){var r=t.Event(e.HIDDEN,{relatedTarget:n._element}),o=t.Event(e.SHOWN,{relatedTarget:a});t(a).trigger(r),t(n._element).trigger(o)};o?this._activate(o,o.parentNode,f):f()}}},a.dispose=function(){t.removeData(this._element,"bs.tab"),this._element=null},a._activate=function(n,e,o){var a=this,l=("UL"===e.nodeName?t(e).find(i.ACTIVE_UL):t(e).children(i.ACTIVE))[0],d=o&&l&&t(l).hasClass(r.FADE),c=function(){return a._transitionComplete(n,l,o)};if(l&&d){var u=s.getTransitionDurationFromElement(l);t(l).one(s.TRANSITION_END,c).emulateTransitionEnd(u)}else c()},a._transitionComplete=function(n,e,o){if(e){t(e).removeClass(r.SHOW+" "+r.ACTIVE);var a=t(e.parentNode).find(i.DROPDOWN_ACTIVE_CHILD)[0];a&&t(a).removeClass(r.ACTIVE),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!1)}if(t(n).addClass(r.ACTIVE),"tab"===n.getAttribute("role")&&n.setAttribute("aria-selected",!0),s.reflow(n),t(n).addClass(r.SHOW),n.parentNode&&t(n.parentNode).hasClass(r.DROPDOWN_MENU)){var l=t(n).closest(i.DROPDOWN)[0];if(l){var d=[].slice.call(l.querySelectorAll(i.DROPDOWN_TOGGLE));t(d).addClass(r.ACTIVE)}n.setAttribute("aria-expanded",!0)}o&&o()},n._jQueryInterface=function(e){return this.each(function(){var r=t(this),o=r.data("bs.tab");if(o||(o=new n(this),r.data("bs.tab",o)),"string"==typeof e){if(void 0===o[e])throw new TypeError('No method named "'+e+'"');o[e]()}})},o(n,null,[{key:"VERSION",get:function(){return"4.1.3"}}]),n}();return t(document).on(e.CLICK_DATA_API,i.DATA_TOGGLE,function(n){n.preventDefault(),a._jQueryInterface.call(t(this),"show")}),t.fn.tab=a._jQueryInterface,t.fn.tab.Constructor=a,t.fn.tab.noConflict=function(){return t.fn.tab=n,a._jQueryInterface},a}(n);(function(t){if(void 0===t)throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var n=t.fn.jquery.split(" ")[0].split(".");if(n[0]<2&&n[1]<9||1===n[0]&&9===n[1]&&n[2]<1||n[0]>=4)throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")})(n),t.Util=s,t.Alert=l,t.Button=d,t.Carousel=c,t.Collapse=u,t.Dropdown=h,t.Modal=f,t.Popover=m,t.Scrollspy=g,t.Tab=b,t.Tooltip=p,Object.defineProperty(t,"__esModule",{value:!0})}(n,e(0),e(10))},function(t,n,e){"use strict";e.r(n),function(t){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.6
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var e="undefined"!=typeof window&&"undefined"!=typeof document,r=["Edge","Trident","Firefox"],o=0,i=0;i<r.length;i+=1)if(e&&navigator.userAgent.indexOf(r[i])>=0){o=1;break}var a=e&&window.Promise?function(t){var n=!1;return function(){n||(n=!0,window.Promise.resolve().then(function(){n=!1,t()}))}}:function(t){var n=!1;return function(){n||(n=!0,setTimeout(function(){n=!1,t()},o))}};function s(t){return t&&"[object Function]"==={}.toString.call(t)}function l(t,n){if(1!==t.nodeType)return[];var e=t.ownerDocument.defaultView.getComputedStyle(t,null);return n?e[n]:e}function d(t){return"HTML"===t.nodeName?t:t.parentNode||t.host}function c(t){if(!t)return document.body;switch(t.nodeName){case"HTML":case"BODY":return t.ownerDocument.body;case"#document":return t.body}var n=l(t),e=n.overflow,r=n.overflowX,o=n.overflowY;return/(auto|scroll|overlay)/.test(e+o+r)?t:c(d(t))}var u=e&&!(!window.MSInputMethodContext||!document.documentMode),h=e&&/MSIE 10/.test(navigator.userAgent);function f(t){return 11===t?u:10===t?h:u||h}function p(t){if(!t)return document.documentElement;for(var n=f(10)?document.body:null,e=t.offsetParent||null;e===n&&t.nextElementSibling;)e=(t=t.nextElementSibling).offsetParent;var r=e&&e.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TH","TD","TABLE"].indexOf(e.nodeName)&&"static"===l(e,"position")?p(e):e:t?t.ownerDocument.documentElement:document.documentElement}function m(t){return null!==t.parentNode?m(t.parentNode):t}function g(t,n){if(!(t&&t.nodeType&&n&&n.nodeType))return document.documentElement;var e=t.compareDocumentPosition(n)&Node.DOCUMENT_POSITION_FOLLOWING,r=e?t:n,o=e?n:t,i=document.createRange();i.setStart(r,0),i.setEnd(o,0);var a,s,l=i.commonAncestorContainer;if(t!==l&&n!==l||r.contains(o))return"BODY"===(s=(a=l).nodeName)||"HTML"!==s&&p(a.firstElementChild)!==a?p(l):l;var d=m(t);return d.host?g(d.host,n):g(t,m(n).host)}function b(t){var n="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",e=t.nodeName;if("BODY"===e||"HTML"===e){var r=t.ownerDocument.documentElement;return(t.ownerDocument.scrollingElement||r)[n]}return t[n]}function v(t,n){var e="x"===n?"Left":"Top",r="Left"===e?"Right":"Bottom";return parseFloat(t["border"+e+"Width"],10)+parseFloat(t["border"+r+"Width"],10)}function x(t,n,e,r){return Math.max(n["offset"+t],n["scroll"+t],e["client"+t],e["offset"+t],e["scroll"+t],f(10)?parseInt(e["offset"+t])+parseInt(r["margin"+("Height"===t?"Top":"Left")])+parseInt(r["margin"+("Height"===t?"Bottom":"Right")]):0)}function y(t){var n=t.body,e=t.documentElement,r=f(10)&&getComputedStyle(e);return{height:x("Height",n,e,r),width:x("Width",n,e,r)}}var w=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")},_=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),k=function(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t},S=Object.assign||function(t){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])}return t};function C(t){return S({},t,{right:t.left+t.width,bottom:t.top+t.height})}function T(t){var n={};try{if(f(10)){n=t.getBoundingClientRect();var e=b(t,"top"),r=b(t,"left");n.top+=e,n.left+=r,n.bottom+=e,n.right+=r}else n=t.getBoundingClientRect()}catch(t){}var o={left:n.left,top:n.top,width:n.right-n.left,height:n.bottom-n.top},i="HTML"===t.nodeName?y(t.ownerDocument):{},a=i.width||t.clientWidth||o.right-o.left,s=i.height||t.clientHeight||o.bottom-o.top,d=t.offsetWidth-a,c=t.offsetHeight-s;if(d||c){var u=l(t);d-=v(u,"x"),c-=v(u,"y"),o.width-=d,o.height-=c}return C(o)}function E(t,n){var e=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=f(10),o="HTML"===n.nodeName,i=T(t),a=T(n),s=c(t),d=l(n),u=parseFloat(d.borderTopWidth,10),h=parseFloat(d.borderLeftWidth,10);e&&o&&(a.top=Math.max(a.top,0),a.left=Math.max(a.left,0));var p=C({top:i.top-a.top-u,left:i.left-a.left-h,width:i.width,height:i.height});if(p.marginTop=0,p.marginLeft=0,!r&&o){var m=parseFloat(d.marginTop,10),g=parseFloat(d.marginLeft,10);p.top-=u-m,p.bottom-=u-m,p.left-=h-g,p.right-=h-g,p.marginTop=m,p.marginLeft=g}return(r&&!e?n.contains(s):n===s&&"BODY"!==s.nodeName)&&(p=function(t,n){var e=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=b(n,"top"),o=b(n,"left"),i=e?-1:1;return t.top+=r*i,t.bottom+=r*i,t.left+=o*i,t.right+=o*i,t}(p,n)),p}function A(t){if(!t||!t.parentElement||f())return document.documentElement;for(var n=t.parentElement;n&&"none"===l(n,"transform");)n=n.parentElement;return n||document.documentElement}function K(t,n,e,r){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],i={top:0,left:0},a=o?A(t):g(t,n);if("viewport"===r)i=function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],e=t.ownerDocument.documentElement,r=E(t,e),o=Math.max(e.clientWidth,window.innerWidth||0),i=Math.max(e.clientHeight,window.innerHeight||0),a=n?0:b(e),s=n?0:b(e,"left");return C({top:a-r.top+r.marginTop,left:s-r.left+r.marginLeft,width:o,height:i})}(a,o);else{var s=void 0;"scrollParent"===r?"BODY"===(s=c(d(n))).nodeName&&(s=t.ownerDocument.documentElement):s="window"===r?t.ownerDocument.documentElement:r;var u=E(s,a,o);if("HTML"!==s.nodeName||function t(n){var e=n.nodeName;return"BODY"!==e&&"HTML"!==e&&("fixed"===l(n,"position")||t(d(n)))}(a))i=u;else{var h=y(t.ownerDocument),f=h.height,p=h.width;i.top+=u.top-u.marginTop,i.bottom=f+u.top,i.left+=u.left-u.marginLeft,i.right=p+u.left}}var m="number"==typeof(e=e||0);return i.left+=m?e:e.left||0,i.top+=m?e:e.top||0,i.right-=m?e:e.right||0,i.bottom-=m?e:e.bottom||0,i}function N(t,n,e,r,o){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===t.indexOf("auto"))return t;var a=K(e,r,i,o),s={top:{width:a.width,height:n.top-a.top},right:{width:a.right-n.right,height:a.height},bottom:{width:a.width,height:a.bottom-n.bottom},left:{width:n.left-a.left,height:a.height}},l=Object.keys(s).map(function(t){return S({key:t},s[t],{area:(n=s[t],n.width*n.height)});var n}).sort(function(t,n){return n.area-t.area}),d=l.filter(function(t){var n=t.width,r=t.height;return n>=e.clientWidth&&r>=e.clientHeight}),c=d.length>0?d[0].key:l[0].key,u=t.split("-")[1];return c+(u?"-"+u:"")}function D(t,n,e){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return E(e,r?A(n):g(n,e),r)}function O(t){var n=t.ownerDocument.defaultView.getComputedStyle(t),e=parseFloat(n.marginTop||0)+parseFloat(n.marginBottom||0),r=parseFloat(n.marginLeft||0)+parseFloat(n.marginRight||0);return{width:t.offsetWidth+r,height:t.offsetHeight+e}}function P(t){var n={left:"right",right:"left",bottom:"top",top:"bottom"};return t.replace(/left|right|bottom|top/g,function(t){return n[t]})}function I(t,n,e){e=e.split("-")[0];var r=O(t),o={width:r.width,height:r.height},i=-1!==["right","left"].indexOf(e),a=i?"top":"left",s=i?"left":"top",l=i?"height":"width",d=i?"width":"height";return o[a]=n[a]+n[l]/2-r[l]/2,o[s]=e===s?n[s]-r[d]:n[P(s)],o}function L(t,n){return Array.prototype.find?t.find(n):t.filter(n)[0]}function F(t,n,e){return(void 0===e?t:t.slice(0,function(t,n,e){if(Array.prototype.findIndex)return t.findIndex(function(t){return t[n]===e});var r=L(t,function(t){return t[n]===e});return t.indexOf(r)}(t,"name",e))).forEach(function(t){t.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var e=t.function||t.fn;t.enabled&&s(e)&&(n.offsets.popper=C(n.offsets.popper),n.offsets.reference=C(n.offsets.reference),n=e(n,t))}),n}function M(t,n){return t.some(function(t){var e=t.name;return t.enabled&&e===n})}function R(t){for(var n=[!1,"ms","Webkit","Moz","O"],e=t.charAt(0).toUpperCase()+t.slice(1),r=0;r<n.length;r++){var o=n[r],i=o?""+o+e:t;if(void 0!==document.body.style[i])return i}return null}function j(t){var n=t.ownerDocument;return n?n.defaultView:window}function G(t,n,e,r){e.updateBound=r,j(t).addEventListener("resize",e.updateBound,{passive:!0});var o=c(t);return function t(n,e,r,o){var i="BODY"===n.nodeName,a=i?n.ownerDocument.defaultView:n;a.addEventListener(e,r,{passive:!0}),i||t(c(a.parentNode),e,r,o),o.push(a)}(o,"scroll",e.updateBound,e.scrollParents),e.scrollElement=o,e.eventsEnabled=!0,e}function H(){var t,n;this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=(t=this.reference,n=this.state,j(t).removeEventListener("resize",n.updateBound),n.scrollParents.forEach(function(t){t.removeEventListener("scroll",n.updateBound)}),n.updateBound=null,n.scrollParents=[],n.scrollElement=null,n.eventsEnabled=!1,n))}function U(t){return""!==t&&!isNaN(parseFloat(t))&&isFinite(t)}function V(t,n){Object.keys(n).forEach(function(e){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(e)&&U(n[e])&&(r="px"),t.style[e]=n[e]+r})}var B=e&&/Firefox/i.test(navigator.userAgent);function W(t,n,e){var r=L(t,function(t){return t.name===n}),o=!!r&&t.some(function(t){return t.name===e&&t.enabled&&t.order<r.order});if(!o){var i="`"+n+"`",a="`"+e+"`";console.warn(a+" modifier is required by "+i+" modifier in order to work, be sure to include it before "+i+"!")}return o}var z=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],q=z.slice(3);function Y(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],e=q.indexOf(t),r=q.slice(e+1).concat(q.slice(0,e));return n?r.reverse():r}var X={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function Q(t,n,e,r){var o=[0,0],i=-1!==["right","left"].indexOf(r),a=t.split(/(\+|\-)/).map(function(t){return t.trim()}),s=a.indexOf(L(a,function(t){return-1!==t.search(/,|\s/)}));a[s]&&-1===a[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var l=/\s*,\s*|\s+/,d=-1!==s?[a.slice(0,s).concat([a[s].split(l)[0]]),[a[s].split(l)[1]].concat(a.slice(s+1))]:[a];return(d=d.map(function(t,r){var o=(1===r?!i:i)?"height":"width",a=!1;return t.reduce(function(t,n){return""===t[t.length-1]&&-1!==["+","-"].indexOf(n)?(t[t.length-1]=n,a=!0,t):a?(t[t.length-1]+=n,a=!1,t):t.concat(n)},[]).map(function(t){return function(t,n,e,r){var o=t.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),i=+o[1],a=o[2];if(!i)return t;if(0===a.indexOf("%")){var s=void 0;switch(a){case"%p":s=e;break;case"%":case"%r":default:s=r}return C(s)[n]/100*i}if("vh"===a||"vw"===a)return("vh"===a?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*i;return i}(t,o,n,e)})})).forEach(function(t,n){t.forEach(function(e,r){U(e)&&(o[n]+=e*("-"===t[r-1]?-1:1))})}),o}var $={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(t){var n=t.placement,e=n.split("-")[0],r=n.split("-")[1];if(r){var o=t.offsets,i=o.reference,a=o.popper,s=-1!==["bottom","top"].indexOf(e),l=s?"left":"top",d=s?"width":"height",c={start:k({},l,i[l]),end:k({},l,i[l]+i[d]-a[d])};t.offsets.popper=S({},a,c[r])}return t}},offset:{order:200,enabled:!0,fn:function(t,n){var e=n.offset,r=t.placement,o=t.offsets,i=o.popper,a=o.reference,s=r.split("-")[0],l=void 0;return l=U(+e)?[+e,0]:Q(e,i,a,s),"left"===s?(i.top+=l[0],i.left-=l[1]):"right"===s?(i.top+=l[0],i.left+=l[1]):"top"===s?(i.left+=l[0],i.top-=l[1]):"bottom"===s&&(i.left+=l[0],i.top+=l[1]),t.popper=i,t},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(t,n){var e=n.boundariesElement||p(t.instance.popper);t.instance.reference===e&&(e=p(e));var r=R("transform"),o=t.instance.popper.style,i=o.top,a=o.left,s=o[r];o.top="",o.left="",o[r]="";var l=K(t.instance.popper,t.instance.reference,n.padding,e,t.positionFixed);o.top=i,o.left=a,o[r]=s,n.boundaries=l;var d=n.priority,c=t.offsets.popper,u={primary:function(t){var e=c[t];return c[t]<l[t]&&!n.escapeWithReference&&(e=Math.max(c[t],l[t])),k({},t,e)},secondary:function(t){var e="right"===t?"left":"top",r=c[e];return c[t]>l[t]&&!n.escapeWithReference&&(r=Math.min(c[e],l[t]-("right"===t?c.width:c.height))),k({},e,r)}};return d.forEach(function(t){var n=-1!==["left","top"].indexOf(t)?"primary":"secondary";c=S({},c,u[n](t))}),t.offsets.popper=c,t},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(t){var n=t.offsets,e=n.popper,r=n.reference,o=t.placement.split("-")[0],i=Math.floor,a=-1!==["top","bottom"].indexOf(o),s=a?"right":"bottom",l=a?"left":"top",d=a?"width":"height";return e[s]<i(r[l])&&(t.offsets.popper[l]=i(r[l])-e[d]),e[l]>i(r[s])&&(t.offsets.popper[l]=i(r[s])),t}},arrow:{order:500,enabled:!0,fn:function(t,n){var e;if(!W(t.instance.modifiers,"arrow","keepTogether"))return t;var r=n.element;if("string"==typeof r){if(!(r=t.instance.popper.querySelector(r)))return t}else if(!t.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),t;var o=t.placement.split("-")[0],i=t.offsets,a=i.popper,s=i.reference,d=-1!==["left","right"].indexOf(o),c=d?"height":"width",u=d?"Top":"Left",h=u.toLowerCase(),f=d?"left":"top",p=d?"bottom":"right",m=O(r)[c];s[p]-m<a[h]&&(t.offsets.popper[h]-=a[h]-(s[p]-m)),s[h]+m>a[p]&&(t.offsets.popper[h]+=s[h]+m-a[p]),t.offsets.popper=C(t.offsets.popper);var g=s[h]+s[c]/2-m/2,b=l(t.instance.popper),v=parseFloat(b["margin"+u],10),x=parseFloat(b["border"+u+"Width"],10),y=g-t.offsets.popper[h]-v-x;return y=Math.max(Math.min(a[c]-m,y),0),t.arrowElement=r,t.offsets.arrow=(k(e={},h,Math.round(y)),k(e,f,""),e),t},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(t,n){if(M(t.instance.modifiers,"inner"))return t;if(t.flipped&&t.placement===t.originalPlacement)return t;var e=K(t.instance.popper,t.instance.reference,n.padding,n.boundariesElement,t.positionFixed),r=t.placement.split("-")[0],o=P(r),i=t.placement.split("-")[1]||"",a=[];switch(n.behavior){case X.FLIP:a=[r,o];break;case X.CLOCKWISE:a=Y(r);break;case X.COUNTERCLOCKWISE:a=Y(r,!0);break;default:a=n.behavior}return a.forEach(function(s,l){if(r!==s||a.length===l+1)return t;r=t.placement.split("-")[0],o=P(r);var d=t.offsets.popper,c=t.offsets.reference,u=Math.floor,h="left"===r&&u(d.right)>u(c.left)||"right"===r&&u(d.left)<u(c.right)||"top"===r&&u(d.bottom)>u(c.top)||"bottom"===r&&u(d.top)<u(c.bottom),f=u(d.left)<u(e.left),p=u(d.right)>u(e.right),m=u(d.top)<u(e.top),g=u(d.bottom)>u(e.bottom),b="left"===r&&f||"right"===r&&p||"top"===r&&m||"bottom"===r&&g,v=-1!==["top","bottom"].indexOf(r),x=!!n.flipVariations&&(v&&"start"===i&&f||v&&"end"===i&&p||!v&&"start"===i&&m||!v&&"end"===i&&g);(h||b||x)&&(t.flipped=!0,(h||b)&&(r=a[l+1]),x&&(i=function(t){return"end"===t?"start":"start"===t?"end":t}(i)),t.placement=r+(i?"-"+i:""),t.offsets.popper=S({},t.offsets.popper,I(t.instance.popper,t.offsets.reference,t.placement)),t=F(t.instance.modifiers,t,"flip"))}),t},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(t){var n=t.placement,e=n.split("-")[0],r=t.offsets,o=r.popper,i=r.reference,a=-1!==["left","right"].indexOf(e),s=-1===["top","left"].indexOf(e);return o[a?"left":"top"]=i[e]-(s?o[a?"width":"height"]:0),t.placement=P(n),t.offsets.popper=C(o),t}},hide:{order:800,enabled:!0,fn:function(t){if(!W(t.instance.modifiers,"hide","preventOverflow"))return t;var n=t.offsets.reference,e=L(t.instance.modifiers,function(t){return"preventOverflow"===t.name}).boundaries;if(n.bottom<e.top||n.left>e.right||n.top>e.bottom||n.right<e.left){if(!0===t.hide)return t;t.hide=!0,t.attributes["x-out-of-boundaries"]=""}else{if(!1===t.hide)return t;t.hide=!1,t.attributes["x-out-of-boundaries"]=!1}return t}},computeStyle:{order:850,enabled:!0,fn:function(t,n){var e=n.x,r=n.y,o=t.offsets.popper,i=L(t.instance.modifiers,function(t){return"applyStyle"===t.name}).gpuAcceleration;void 0!==i&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var a=void 0!==i?i:n.gpuAcceleration,s=p(t.instance.popper),l=T(s),d={position:o.position},c=function(t,n){var e=t.offsets,r=e.popper,o=e.reference,i=-1!==["left","right"].indexOf(t.placement),a=-1!==t.placement.indexOf("-"),s=o.width%2==r.width%2,l=o.width%2==1&&r.width%2==1,d=function(t){return t},c=n?i||a||s?Math.round:Math.floor:d,u=n?Math.round:d;return{left:c(l&&!a&&n?r.left-1:r.left),top:u(r.top),bottom:u(r.bottom),right:c(r.right)}}(t,window.devicePixelRatio<2||!B),u="bottom"===e?"top":"bottom",h="right"===r?"left":"right",f=R("transform"),m=void 0,g=void 0;if(g="bottom"===u?"HTML"===s.nodeName?-s.clientHeight+c.bottom:-l.height+c.bottom:c.top,m="right"===h?"HTML"===s.nodeName?-s.clientWidth+c.right:-l.width+c.right:c.left,a&&f)d[f]="translate3d("+m+"px, "+g+"px, 0)",d[u]=0,d[h]=0,d.willChange="transform";else{var b="bottom"===u?-1:1,v="right"===h?-1:1;d[u]=g*b,d[h]=m*v,d.willChange=u+", "+h}var x={"x-placement":t.placement};return t.attributes=S({},x,t.attributes),t.styles=S({},d,t.styles),t.arrowStyles=S({},t.offsets.arrow,t.arrowStyles),t},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(t){var n,e;return V(t.instance.popper,t.styles),n=t.instance.popper,e=t.attributes,Object.keys(e).forEach(function(t){!1!==e[t]?n.setAttribute(t,e[t]):n.removeAttribute(t)}),t.arrowElement&&Object.keys(t.arrowStyles).length&&V(t.arrowElement,t.arrowStyles),t},onLoad:function(t,n,e,r,o){var i=D(o,n,t,e.positionFixed),a=N(e.placement,i,n,t,e.modifiers.flip.boundariesElement,e.modifiers.flip.padding);return n.setAttribute("x-placement",a),V(n,{position:e.positionFixed?"fixed":"absolute"}),e},gpuAcceleration:void 0}}},J=function(){function t(n,e){var r=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};w(this,t),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=a(this.update.bind(this)),this.options=S({},t.Defaults,o),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=n&&n.jquery?n[0]:n,this.popper=e&&e.jquery?e[0]:e,this.options.modifiers={},Object.keys(S({},t.Defaults.modifiers,o.modifiers)).forEach(function(n){r.options.modifiers[n]=S({},t.Defaults.modifiers[n]||{},o.modifiers?o.modifiers[n]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(t){return S({name:t},r.options.modifiers[t])}).sort(function(t,n){return t.order-n.order}),this.modifiers.forEach(function(t){t.enabled&&s(t.onLoad)&&t.onLoad(r.reference,r.popper,r.options,t,r.state)}),this.update();var i=this.options.eventsEnabled;i&&this.enableEventListeners(),this.state.eventsEnabled=i}return _(t,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var t={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};t.offsets.reference=D(this.state,this.popper,this.reference,this.options.positionFixed),t.placement=N(this.options.placement,t.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),t.originalPlacement=t.placement,t.positionFixed=this.options.positionFixed,t.offsets.popper=I(this.popper,t.offsets.reference,t.placement),t.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",t=F(this.modifiers,t),this.state.isCreated?this.options.onUpdate(t):(this.state.isCreated=!0,this.options.onCreate(t))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,M(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[R("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=G(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return H.call(this)}}]),t}();J.Utils=("undefined"!=typeof window?window:t).PopperUtils,J.placements=z,J.Defaults=$,n.default=J}.call(this,e(7))},function(t,n,e){var r=e(12);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};e(5)(r,o);r.locals&&(t.exports=r.locals)},function(t,n,e){(n=t.exports=e(4)(!1)).i(e(13),""),n.push([t.i,'#content {\n    padding-top: 5rem;\n}\n\nbody {\n    font-family: \'Rubik\', sans-serif;\n    position: relative;\n}\n\na {\n    color: #ffffff;\n}\n\na:hover,\na:focus {\n    color: #43AD76;\n}\n\nh1 {\n    font-size: 60px;\n    font-weight: 300;\n    letter-spacing: -1px;\n    margin-bottom: 1.5rem;\n}\n\nh2 {\n    font-size: 45px;\n    font-weight: 300;\n    color: #43AD76;\n    letter-spacing: -1px;\n    margin-bottom: 1rem;\n}\n\nh3 {\n    color: #43AD76;\n    font-size: 33px;\n    font-weight: 500;\n}\n\nh4 {\n    font-size: 20px;\n    font-weight: 500;\n    color: #43AD76;\n}\n\nh5 {\n    font-size: 28px;\n    font-weight: 300;\n    color: #43AD76;\n    margin-bottom: 0.7rem;\n}\n\np {\n    color: #959094;\n}\n\np.lead {\n    color: #ffffff;\n    margin-bottom: 2rem;\n}\n\n.light-font {\n    font-weight: 300;\n}\n\n.btn {\n    font-size: 12px;\n    font-weight: 400;\n    text-transform: uppercase;\n    padding: 0.375rem 1.35rem;\n    transition: all 0.3s ease;\n}\n\n.btn-outline-light:hover {\n    color: rgb(67, 173, 118);\n}\n\n.btn-journey {\n    margin-top: 30px;\n}\n\n.btn-primary {\n    border-radius: 3px;\n    background-image: -moz-linear-gradient( 122deg, rgb(90, 158, 124) 0%, rgb(67, 173, 118) 100%);\n    background-image: -webkit-linear-gradient( 122deg, rgb(90, 158, 124) 0%, rgb(67, 173, 118) 100%);\n    background-image: -ms-linear-gradient( 122deg, rgb(90, 158, 124) 0%, rgb(67, 173, 118) 100%);\n    background-image: linear-gradient( 122deg, rgb(90, 158, 124) 0%, rgb(67, 173, 118) 100%);\n    box-shadow: 0px 9px 32px 0px rgba(0, 0, 0, 0.2);\n    font-weight: 500;\n    padding: 0.6rem 2rem;\n    border: 0;\n}\n\n.btn-primary:hover,\n.btn-primary:focus,\n.btn-primary:active,\n.btn-primary:not([disabled]):not(.disabled).active,\n.btn-primary:not([disabled]):not(.disabled):active,\n.show>.btn-primary.dropdown-toggle {\n    background-image: linear-gradient( 122deg, rgb(67, 173, 118) 0%, rgb(90, 158, 124) 100%);\n    box-shadow: 0px 9px 32px 0px rgba(0, 0, 0, 0.3);\n    color: #FFF;\n}\n\n.btn-light {\n    border-radius: 3px;\n    background: #FFF;\n    box-shadow: 0px 9px 32px 0px rgba(0, 0, 0, 0.26);\n    font-size: 14px;\n    font-weight: 500;\n    color: #43AD76;\n    margin: 0.5rem;\n    padding: 0.7rem 1.6rem;\n    line-height: 1.8;\n}\n\n.btn-group-lg>.btn,\n.btn-lg {\n    padding: 0.8rem 1rem;\n    font-size: 15px;\n}\n\n.light-bg {\n    background-color: #faf6fb;\n}\n\n.section {\n    padding: 80px 0;\n}\n\n.section-title {\n    text-align: center;\n    margin-bottom: 3rem;\n}\n\n.section-title small {\n    color: #998a9b;\n}\n\n@media (max-width:767px) {\n    h1 {\n        font-size: 40px;\n    }\n    h2 {\n        font-size: 30px;\n    }\n}\n\n.git {\n    color: #959094;\n}\n/* NAVBAR\n----------------------*/\n\n.nav-menu {\n    -webkit-box-shadow: 0px 5px 23px 0px rgba(0, 0, 0, 0.1);\n    -moz-box-shadow: 0px 5px 23px 0px rgba(0, 0, 0, 0.1);\n    box-shadow: 0px 5px 23px 0px rgba(0, 0, 0, 0.1);\n    transition: all 0.3s ease;\n}\n\n.nav-menu.is-scrolling {\n    padding: 0;\n}\n\n.navbar-nav .nav-link {\n    position: relative;\n}\n\n@media (min-width: 992px) {\n    .navbar-expand-lg .navbar-nav .nav-link {\n        padding-right: 1rem;\n        padding-left: 1rem;\n        font-size: 14px;\n    }\n    .navbar-nav>.nav-item>.nav-link.active:after {\n        content: "";\n        border-bottom: 2px solid rgb(255, 255, 255);\n        left: 1rem;\n        right: 1rem;\n        bottom: 5px;\n        height: 1px;\n        position: absolute;\n    }\n}\n\n@media (max-width:991px) {\n    .navbar-nav.is-scrolling {\n        padding-bottom: 1rem;\n    }\n    .navbar-nav .nav-item {\n        text-align: center;\n    }\n}\n\n\n/* HERO\n----------------------*/\n\nheader {\n    padding: 100px 0 0;\n    text-align: center;\n    color: #FFF;\n}\n\n.bg-gradient {\n    background-image: -moz-linear-gradient( 135deg, rgba(60, 8, 118, 0.8) 0%, rgb(67, 173, 118) 100%);\n    background-image: -webkit-linear-gradient( 135deg, rgba(60, 8, 118, 0.8) 0%, rgb(67, 173, 118) 100%);\n    background-image: -ms-linear-gradient( 135deg, rgba(60, 8, 118, 0.8) 0%, rgb(67, 173, 118) 100%);\n    background-image: linear-gradient( 135deg, rgba(60, 8, 118, 0.8) 0%, rgb(67, 173, 118) 100%);\n}\n\n.tagline {\n    font-size: 23px;\n    font-weight: 300;\n    color: #fff;\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n.img-holder {\n    height: 0;\n    padding-bottom: 28%;\n    overflow: hidden;\n}\n\n@media (max-width:1200px) {\n    .img-holder {\n        padding-bottom: 50%;\n    }\n}\n\n@media (max-width:767px) {\n    .tagline {\n        font-size: 17px;\n    }\n    .img-holder {\n        padding-bottom: 100%;\n    }\n}\n\n\n/* FEATURES\n----------------------*/\n\n.gradient-fill:before {\n    color: #fc73b4;\n    background: -moz-linear-gradient(top, #49af5f 0%, #9477b4 100%);\n    background: -webkit-linear-gradient(top, #49af5f 0%, #9477b4 100%);\n    background: linear-gradient(to bottom, #49af5f 0%, #9477b4 100%);\n    -webkit-background-clip: text;\n    background-clip: text;\n    -webkit-text-fill-color: transparent;\n}\n\n.card.features {\n    border: 0;\n    border-radius: 3px;\n    box-shadow: 0px 5px 7px 0px rgba(0, 0, 0, 0.04);\n    transition: all 0.3s ease;\n}\n\n@media (max-width:991px) {\n    .card.features {\n        margin-bottom: 2rem;\n    }\n    [class^="col-"]:last-child .card.features {\n        margin-bottom: 0;\n    }\n}\n\n.card.features:before {\n    content: "";\n    position: absolute;\n    width: 3px;\n    color: #49af5f;\n    background: -moz-linear-gradient(top, #49af5f 0%, #9477b4 100%);\n    background: -webkit-linear-gradient(top, #49af5f 0%, #9477b4 100%);\n    background: linear-gradient(to bottom, #49af5f 0%, #9477b4 100%);\n    top: 0;\n    bottom: 0;\n    left: 0;\n}\n\n.card-text {\n    font-size: 14px;\n}\n\n.card.features:hover {\n    transform: translateY(-3px);\n    -moz-box-shadow: 0px 5px 30px 0px rgba(0, 0, 0, 0.08);\n    -webkit-box-shadow: 0px 5px 30px 0px rgba(0, 0, 0, 0.08);\n    box-shadow: 0px 5px 30px 0px rgba(0, 0, 0, 0.08);\n}\n\n.box-icon {\n    box-shadow: 0px 0px 43px 0px rgba(0, 0, 0, 0.14);\n    padding: 10px;\n    width: 70px;\n    border-radius: 3px;\n    margin-bottom: 1.5rem;\n    background-color: #FFF;\n}\n\n.perspective-bg {\n    position: relative;\n    z-index: -1;\n}\n\n@media (min-width:992px) {\n    .perspective-bg {\n        margin-top: -150px;\n    }\n}\n\n/*  CALL TO ACTION\n----------------------*/\n\n.call-to-action {\n    text-align: center;\n    color: #fff;\n    margin: 3rem 0;\n}\n\n.call-to-action h2 {\n    color: #fff;\n}\n\n.call-to-action .tagline {\n    font-size: 16px;\n    font-weight: 300;\n    color: #fff;\n    max-width: 650px;\n    margin: 0 auto;\n}\n\n.btn-light img {\n    margin-right: 0.4rem;\n    vertical-align: text-bottom;\n}\n',""])},function(t,n,e){(t.exports=e(4)(!1)).push([t.i,'/*!\n * Bootstrap v4.1.3 (https://getbootstrap.com/)\n * Copyright 2011-2018 The Bootstrap Authors\n * Copyright 2011-2018 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */\n:root {\n  --blue: #007bff;\n  --indigo: #6610f2;\n  --purple: #6f42c1;\n  --pink: #e83e8c;\n  --red: #dc3545;\n  --orange: #fd7e14;\n  --yellow: #ffc107;\n  --green: #28a745;\n  --teal: #20c997;\n  --cyan: #17a2b8;\n  --white: #fff;\n  --gray: #6c757d;\n  --gray-dark: #343a40;\n  --primary: #007bff;\n  --secondary: #6c757d;\n  --success: #28a745;\n  --info: #17a2b8;\n  --warning: #ffc107;\n  --danger: #dc3545;\n  --light: #f8f9fa;\n  --dark: #343a40;\n  --breakpoint-xs: 0;\n  --breakpoint-sm: 576px;\n  --breakpoint-md: 768px;\n  --breakpoint-lg: 992px;\n  --breakpoint-xl: 1200px;\n  --font-family-sans-serif: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";\n  --font-family-monospace: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;\n}\n\n*,\n*::before,\n*::after {\n  box-sizing: border-box;\n}\n\nhtml {\n  font-family: sans-serif;\n  line-height: 1.15;\n  -webkit-text-size-adjust: 100%;\n  -ms-text-size-adjust: 100%;\n  -ms-overflow-style: scrollbar;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\n\n@-ms-viewport {\n  width: device-width;\n}\n\narticle, aside, figcaption, figure, footer, header, hgroup, main, nav, section {\n  display: block;\n}\n\nbody {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #212529;\n  text-align: left;\n  background-color: #fff;\n}\n\n[tabindex="-1"]:focus {\n  outline: 0 !important;\n}\n\nhr {\n  box-sizing: content-box;\n  height: 0;\n  overflow: visible;\n}\n\nh1, h2, h3, h4, h5, h6 {\n  margin-top: 0;\n  margin-bottom: 0.5rem;\n}\n\np {\n  margin-top: 0;\n  margin-bottom: 1rem;\n}\n\nabbr[title],\nabbr[data-original-title] {\n  text-decoration: underline;\n  -webkit-text-decoration: underline dotted;\n  text-decoration: underline dotted;\n  cursor: help;\n  border-bottom: 0;\n}\n\naddress {\n  margin-bottom: 1rem;\n  font-style: normal;\n  line-height: inherit;\n}\n\nol,\nul,\ndl {\n  margin-top: 0;\n  margin-bottom: 1rem;\n}\n\nol ol,\nul ul,\nol ul,\nul ol {\n  margin-bottom: 0;\n}\n\ndt {\n  font-weight: 700;\n}\n\ndd {\n  margin-bottom: .5rem;\n  margin-left: 0;\n}\n\nblockquote {\n  margin: 0 0 1rem;\n}\n\ndfn {\n  font-style: italic;\n}\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\nsmall {\n  font-size: 80%;\n}\n\nsub,\nsup {\n  position: relative;\n  font-size: 75%;\n  line-height: 0;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -.25em;\n}\n\nsup {\n  top: -.5em;\n}\n\na {\n  color: #007bff;\n  text-decoration: none;\n  background-color: transparent;\n  -webkit-text-decoration-skip: objects;\n}\n\na:hover {\n  color: #0056b3;\n  text-decoration: underline;\n}\n\na:not([href]):not([tabindex]) {\n  color: inherit;\n  text-decoration: none;\n}\n\na:not([href]):not([tabindex]):hover, a:not([href]):not([tabindex]):focus {\n  color: inherit;\n  text-decoration: none;\n}\n\na:not([href]):not([tabindex]):focus {\n  outline: 0;\n}\n\npre,\ncode,\nkbd,\nsamp {\n  font-family: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;\n  font-size: 1em;\n}\n\npre {\n  margin-top: 0;\n  margin-bottom: 1rem;\n  overflow: auto;\n  -ms-overflow-style: scrollbar;\n}\n\nfigure {\n  margin: 0 0 1rem;\n}\n\nimg {\n  vertical-align: middle;\n  border-style: none;\n}\n\nsvg {\n  overflow: hidden;\n  vertical-align: middle;\n}\n\ntable {\n  border-collapse: collapse;\n}\n\ncaption {\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n  color: #6c757d;\n  text-align: left;\n  caption-side: bottom;\n}\n\nth {\n  text-align: inherit;\n}\n\nlabel {\n  display: inline-block;\n  margin-bottom: 0.5rem;\n}\n\nbutton {\n  border-radius: 0;\n}\n\nbutton:focus {\n  outline: 1px dotted;\n  outline: 5px auto -webkit-focus-ring-color;\n}\n\ninput,\nbutton,\nselect,\noptgroup,\ntextarea {\n  margin: 0;\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n\nbutton,\ninput {\n  overflow: visible;\n}\n\nbutton,\nselect {\n  text-transform: none;\n}\n\nbutton,\nhtml [type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  padding: 0;\n  border-style: none;\n}\n\ninput[type="radio"],\ninput[type="checkbox"] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\ninput[type="date"],\ninput[type="time"],\ninput[type="datetime-local"],\ninput[type="month"] {\n  -webkit-appearance: listbox;\n}\n\ntextarea {\n  overflow: auto;\n  resize: vertical;\n}\n\nfieldset {\n  min-width: 0;\n  padding: 0;\n  margin: 0;\n  border: 0;\n}\n\nlegend {\n  display: block;\n  width: 100%;\n  max-width: 100%;\n  padding: 0;\n  margin-bottom: .5rem;\n  font-size: 1.5rem;\n  line-height: inherit;\n  color: inherit;\n  white-space: normal;\n}\n\nprogress {\n  vertical-align: baseline;\n}\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n[type="search"] {\n  outline-offset: -2px;\n  -webkit-appearance: none;\n}\n\n[type="search"]::-webkit-search-cancel-button,\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n::-webkit-file-upload-button {\n  font: inherit;\n  -webkit-appearance: button;\n}\n\noutput {\n  display: inline-block;\n}\n\nsummary {\n  display: list-item;\n  cursor: pointer;\n}\n\ntemplate {\n  display: none;\n}\n\n[hidden] {\n  display: none !important;\n}\n\nh1, h2, h3, h4, h5, h6,\n.h1, .h2, .h3, .h4, .h5, .h6 {\n  margin-bottom: 0.5rem;\n  font-family: inherit;\n  font-weight: 500;\n  line-height: 1.2;\n  color: inherit;\n}\n\nh1, .h1 {\n  font-size: 2.5rem;\n}\n\nh2, .h2 {\n  font-size: 2rem;\n}\n\nh3, .h3 {\n  font-size: 1.75rem;\n}\n\nh4, .h4 {\n  font-size: 1.5rem;\n}\n\nh5, .h5 {\n  font-size: 1.25rem;\n}\n\nh6, .h6 {\n  font-size: 1rem;\n}\n\n.lead {\n  font-size: 1.25rem;\n  font-weight: 300;\n}\n\n.display-1 {\n  font-size: 6rem;\n  font-weight: 300;\n  line-height: 1.2;\n}\n\n.display-2 {\n  font-size: 5.5rem;\n  font-weight: 300;\n  line-height: 1.2;\n}\n\n.display-3 {\n  font-size: 4.5rem;\n  font-weight: 300;\n  line-height: 1.2;\n}\n\n.display-4 {\n  font-size: 3.5rem;\n  font-weight: 300;\n  line-height: 1.2;\n}\n\nhr {\n  margin-top: 1rem;\n  margin-bottom: 1rem;\n  border: 0;\n  border-top: 1px solid rgba(0, 0, 0, 0.1);\n}\n\nsmall,\n.small {\n  font-size: 80%;\n  font-weight: 400;\n}\n\nmark,\n.mark {\n  padding: 0.2em;\n  background-color: #fcf8e3;\n}\n\n.list-unstyled {\n  padding-left: 0;\n  list-style: none;\n}\n\n.list-inline {\n  padding-left: 0;\n  list-style: none;\n}\n\n.list-inline-item {\n  display: inline-block;\n}\n\n.list-inline-item:not(:last-child) {\n  margin-right: 0.5rem;\n}\n\n.initialism {\n  font-size: 90%;\n  text-transform: uppercase;\n}\n\n.blockquote {\n  margin-bottom: 1rem;\n  font-size: 1.25rem;\n}\n\n.blockquote-footer {\n  display: block;\n  font-size: 80%;\n  color: #6c757d;\n}\n\n.blockquote-footer::before {\n  content: "\\2014   \\A0";\n}\n\n.img-fluid {\n  max-width: 100%;\n  height: auto;\n}\n\n.img-thumbnail {\n  padding: 0.25rem;\n  background-color: #fff;\n  border: 1px solid #dee2e6;\n  border-radius: 0.25rem;\n  max-width: 100%;\n  height: auto;\n}\n\n.figure {\n  display: inline-block;\n}\n\n.figure-img {\n  margin-bottom: 0.5rem;\n  line-height: 1;\n}\n\n.figure-caption {\n  font-size: 90%;\n  color: #6c757d;\n}\n\ncode {\n  font-size: 87.5%;\n  color: #e83e8c;\n  word-break: break-word;\n}\n\na > code {\n  color: inherit;\n}\n\nkbd {\n  padding: 0.2rem 0.4rem;\n  font-size: 87.5%;\n  color: #fff;\n  background-color: #212529;\n  border-radius: 0.2rem;\n}\n\nkbd kbd {\n  padding: 0;\n  font-size: 100%;\n  font-weight: 700;\n}\n\npre {\n  display: block;\n  font-size: 87.5%;\n  color: #212529;\n}\n\npre code {\n  font-size: inherit;\n  color: inherit;\n  word-break: normal;\n}\n\n.pre-scrollable {\n  max-height: 340px;\n  overflow-y: scroll;\n}\n\n.container {\n  width: 100%;\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-right: auto;\n  margin-left: auto;\n}\n\n@media (min-width: 576px) {\n  .container {\n    max-width: 540px;\n  }\n}\n\n@media (min-width: 768px) {\n  .container {\n    max-width: 720px;\n  }\n}\n\n@media (min-width: 992px) {\n  .container {\n    max-width: 960px;\n  }\n}\n\n@media (min-width: 1200px) {\n  .container {\n    max-width: 1140px;\n  }\n}\n\n.container-fluid {\n  width: 100%;\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-right: auto;\n  margin-left: auto;\n}\n\n.row {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  margin-right: -15px;\n  margin-left: -15px;\n}\n\n.no-gutters {\n  margin-right: 0;\n  margin-left: 0;\n}\n\n.no-gutters > .col,\n.no-gutters > [class*="col-"] {\n  padding-right: 0;\n  padding-left: 0;\n}\n\n.col-1, .col-2, .col-3, .col-4, .col-5, .col-6, .col-7, .col-8, .col-9, .col-10, .col-11, .col-12, .col,\n.col-auto, .col-sm-1, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-sm-10, .col-sm-11, .col-sm-12, .col-sm,\n.col-sm-auto, .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12, .col-md,\n.col-md-auto, .col-lg-1, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-10, .col-lg-11, .col-lg-12, .col-lg,\n.col-lg-auto, .col-xl-1, .col-xl-2, .col-xl-3, .col-xl-4, .col-xl-5, .col-xl-6, .col-xl-7, .col-xl-8, .col-xl-9, .col-xl-10, .col-xl-11, .col-xl-12, .col-xl,\n.col-xl-auto {\n  position: relative;\n  width: 100%;\n  min-height: 1px;\n  padding-right: 15px;\n  padding-left: 15px;\n}\n\n.col {\n  -ms-flex-preferred-size: 0;\n  flex-basis: 0;\n  -ms-flex-positive: 1;\n  flex-grow: 1;\n  max-width: 100%;\n}\n\n.col-auto {\n  -ms-flex: 0 0 auto;\n  flex: 0 0 auto;\n  width: auto;\n  max-width: none;\n}\n\n.col-1 {\n  -ms-flex: 0 0 8.333333%;\n  flex: 0 0 8.333333%;\n  max-width: 8.333333%;\n}\n\n.col-2 {\n  -ms-flex: 0 0 16.666667%;\n  flex: 0 0 16.666667%;\n  max-width: 16.666667%;\n}\n\n.col-3 {\n  -ms-flex: 0 0 25%;\n  flex: 0 0 25%;\n  max-width: 25%;\n}\n\n.col-4 {\n  -ms-flex: 0 0 33.333333%;\n  flex: 0 0 33.333333%;\n  max-width: 33.333333%;\n}\n\n.col-5 {\n  -ms-flex: 0 0 41.666667%;\n  flex: 0 0 41.666667%;\n  max-width: 41.666667%;\n}\n\n.col-6 {\n  -ms-flex: 0 0 50%;\n  flex: 0 0 50%;\n  max-width: 50%;\n}\n\n.col-7 {\n  -ms-flex: 0 0 58.333333%;\n  flex: 0 0 58.333333%;\n  max-width: 58.333333%;\n}\n\n.col-8 {\n  -ms-flex: 0 0 66.666667%;\n  flex: 0 0 66.666667%;\n  max-width: 66.666667%;\n}\n\n.col-9 {\n  -ms-flex: 0 0 75%;\n  flex: 0 0 75%;\n  max-width: 75%;\n}\n\n.col-10 {\n  -ms-flex: 0 0 83.333333%;\n  flex: 0 0 83.333333%;\n  max-width: 83.333333%;\n}\n\n.col-11 {\n  -ms-flex: 0 0 91.666667%;\n  flex: 0 0 91.666667%;\n  max-width: 91.666667%;\n}\n\n.col-12 {\n  -ms-flex: 0 0 100%;\n  flex: 0 0 100%;\n  max-width: 100%;\n}\n\n.order-first {\n  -ms-flex-order: -1;\n  order: -1;\n}\n\n.order-last {\n  -ms-flex-order: 13;\n  order: 13;\n}\n\n.order-0 {\n  -ms-flex-order: 0;\n  order: 0;\n}\n\n.order-1 {\n  -ms-flex-order: 1;\n  order: 1;\n}\n\n.order-2 {\n  -ms-flex-order: 2;\n  order: 2;\n}\n\n.order-3 {\n  -ms-flex-order: 3;\n  order: 3;\n}\n\n.order-4 {\n  -ms-flex-order: 4;\n  order: 4;\n}\n\n.order-5 {\n  -ms-flex-order: 5;\n  order: 5;\n}\n\n.order-6 {\n  -ms-flex-order: 6;\n  order: 6;\n}\n\n.order-7 {\n  -ms-flex-order: 7;\n  order: 7;\n}\n\n.order-8 {\n  -ms-flex-order: 8;\n  order: 8;\n}\n\n.order-9 {\n  -ms-flex-order: 9;\n  order: 9;\n}\n\n.order-10 {\n  -ms-flex-order: 10;\n  order: 10;\n}\n\n.order-11 {\n  -ms-flex-order: 11;\n  order: 11;\n}\n\n.order-12 {\n  -ms-flex-order: 12;\n  order: 12;\n}\n\n.offset-1 {\n  margin-left: 8.333333%;\n}\n\n.offset-2 {\n  margin-left: 16.666667%;\n}\n\n.offset-3 {\n  margin-left: 25%;\n}\n\n.offset-4 {\n  margin-left: 33.333333%;\n}\n\n.offset-5 {\n  margin-left: 41.666667%;\n}\n\n.offset-6 {\n  margin-left: 50%;\n}\n\n.offset-7 {\n  margin-left: 58.333333%;\n}\n\n.offset-8 {\n  margin-left: 66.666667%;\n}\n\n.offset-9 {\n  margin-left: 75%;\n}\n\n.offset-10 {\n  margin-left: 83.333333%;\n}\n\n.offset-11 {\n  margin-left: 91.666667%;\n}\n\n@media (min-width: 576px) {\n  .col-sm {\n    -ms-flex-preferred-size: 0;\n    flex-basis: 0;\n    -ms-flex-positive: 1;\n    flex-grow: 1;\n    max-width: 100%;\n  }\n  .col-sm-auto {\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    width: auto;\n    max-width: none;\n  }\n  .col-sm-1 {\n    -ms-flex: 0 0 8.333333%;\n    flex: 0 0 8.333333%;\n    max-width: 8.333333%;\n  }\n  .col-sm-2 {\n    -ms-flex: 0 0 16.666667%;\n    flex: 0 0 16.666667%;\n    max-width: 16.666667%;\n  }\n  .col-sm-3 {\n    -ms-flex: 0 0 25%;\n    flex: 0 0 25%;\n    max-width: 25%;\n  }\n  .col-sm-4 {\n    -ms-flex: 0 0 33.333333%;\n    flex: 0 0 33.333333%;\n    max-width: 33.333333%;\n  }\n  .col-sm-5 {\n    -ms-flex: 0 0 41.666667%;\n    flex: 0 0 41.666667%;\n    max-width: 41.666667%;\n  }\n  .col-sm-6 {\n    -ms-flex: 0 0 50%;\n    flex: 0 0 50%;\n    max-width: 50%;\n  }\n  .col-sm-7 {\n    -ms-flex: 0 0 58.333333%;\n    flex: 0 0 58.333333%;\n    max-width: 58.333333%;\n  }\n  .col-sm-8 {\n    -ms-flex: 0 0 66.666667%;\n    flex: 0 0 66.666667%;\n    max-width: 66.666667%;\n  }\n  .col-sm-9 {\n    -ms-flex: 0 0 75%;\n    flex: 0 0 75%;\n    max-width: 75%;\n  }\n  .col-sm-10 {\n    -ms-flex: 0 0 83.333333%;\n    flex: 0 0 83.333333%;\n    max-width: 83.333333%;\n  }\n  .col-sm-11 {\n    -ms-flex: 0 0 91.666667%;\n    flex: 0 0 91.666667%;\n    max-width: 91.666667%;\n  }\n  .col-sm-12 {\n    -ms-flex: 0 0 100%;\n    flex: 0 0 100%;\n    max-width: 100%;\n  }\n  .order-sm-first {\n    -ms-flex-order: -1;\n    order: -1;\n  }\n  .order-sm-last {\n    -ms-flex-order: 13;\n    order: 13;\n  }\n  .order-sm-0 {\n    -ms-flex-order: 0;\n    order: 0;\n  }\n  .order-sm-1 {\n    -ms-flex-order: 1;\n    order: 1;\n  }\n  .order-sm-2 {\n    -ms-flex-order: 2;\n    order: 2;\n  }\n  .order-sm-3 {\n    -ms-flex-order: 3;\n    order: 3;\n  }\n  .order-sm-4 {\n    -ms-flex-order: 4;\n    order: 4;\n  }\n  .order-sm-5 {\n    -ms-flex-order: 5;\n    order: 5;\n  }\n  .order-sm-6 {\n    -ms-flex-order: 6;\n    order: 6;\n  }\n  .order-sm-7 {\n    -ms-flex-order: 7;\n    order: 7;\n  }\n  .order-sm-8 {\n    -ms-flex-order: 8;\n    order: 8;\n  }\n  .order-sm-9 {\n    -ms-flex-order: 9;\n    order: 9;\n  }\n  .order-sm-10 {\n    -ms-flex-order: 10;\n    order: 10;\n  }\n  .order-sm-11 {\n    -ms-flex-order: 11;\n    order: 11;\n  }\n  .order-sm-12 {\n    -ms-flex-order: 12;\n    order: 12;\n  }\n  .offset-sm-0 {\n    margin-left: 0;\n  }\n  .offset-sm-1 {\n    margin-left: 8.333333%;\n  }\n  .offset-sm-2 {\n    margin-left: 16.666667%;\n  }\n  .offset-sm-3 {\n    margin-left: 25%;\n  }\n  .offset-sm-4 {\n    margin-left: 33.333333%;\n  }\n  .offset-sm-5 {\n    margin-left: 41.666667%;\n  }\n  .offset-sm-6 {\n    margin-left: 50%;\n  }\n  .offset-sm-7 {\n    margin-left: 58.333333%;\n  }\n  .offset-sm-8 {\n    margin-left: 66.666667%;\n  }\n  .offset-sm-9 {\n    margin-left: 75%;\n  }\n  .offset-sm-10 {\n    margin-left: 83.333333%;\n  }\n  .offset-sm-11 {\n    margin-left: 91.666667%;\n  }\n}\n\n@media (min-width: 768px) {\n  .col-md {\n    -ms-flex-preferred-size: 0;\n    flex-basis: 0;\n    -ms-flex-positive: 1;\n    flex-grow: 1;\n    max-width: 100%;\n  }\n  .col-md-auto {\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    width: auto;\n    max-width: none;\n  }\n  .col-md-1 {\n    -ms-flex: 0 0 8.333333%;\n    flex: 0 0 8.333333%;\n    max-width: 8.333333%;\n  }\n  .col-md-2 {\n    -ms-flex: 0 0 16.666667%;\n    flex: 0 0 16.666667%;\n    max-width: 16.666667%;\n  }\n  .col-md-3 {\n    -ms-flex: 0 0 25%;\n    flex: 0 0 25%;\n    max-width: 25%;\n  }\n  .col-md-4 {\n    -ms-flex: 0 0 33.333333%;\n    flex: 0 0 33.333333%;\n    max-width: 33.333333%;\n  }\n  .col-md-5 {\n    -ms-flex: 0 0 41.666667%;\n    flex: 0 0 41.666667%;\n    max-width: 41.666667%;\n  }\n  .col-md-6 {\n    -ms-flex: 0 0 50%;\n    flex: 0 0 50%;\n    max-width: 50%;\n  }\n  .col-md-7 {\n    -ms-flex: 0 0 58.333333%;\n    flex: 0 0 58.333333%;\n    max-width: 58.333333%;\n  }\n  .col-md-8 {\n    -ms-flex: 0 0 66.666667%;\n    flex: 0 0 66.666667%;\n    max-width: 66.666667%;\n  }\n  .col-md-9 {\n    -ms-flex: 0 0 75%;\n    flex: 0 0 75%;\n    max-width: 75%;\n  }\n  .col-md-10 {\n    -ms-flex: 0 0 83.333333%;\n    flex: 0 0 83.333333%;\n    max-width: 83.333333%;\n  }\n  .col-md-11 {\n    -ms-flex: 0 0 91.666667%;\n    flex: 0 0 91.666667%;\n    max-width: 91.666667%;\n  }\n  .col-md-12 {\n    -ms-flex: 0 0 100%;\n    flex: 0 0 100%;\n    max-width: 100%;\n  }\n  .order-md-first {\n    -ms-flex-order: -1;\n    order: -1;\n  }\n  .order-md-last {\n    -ms-flex-order: 13;\n    order: 13;\n  }\n  .order-md-0 {\n    -ms-flex-order: 0;\n    order: 0;\n  }\n  .order-md-1 {\n    -ms-flex-order: 1;\n    order: 1;\n  }\n  .order-md-2 {\n    -ms-flex-order: 2;\n    order: 2;\n  }\n  .order-md-3 {\n    -ms-flex-order: 3;\n    order: 3;\n  }\n  .order-md-4 {\n    -ms-flex-order: 4;\n    order: 4;\n  }\n  .order-md-5 {\n    -ms-flex-order: 5;\n    order: 5;\n  }\n  .order-md-6 {\n    -ms-flex-order: 6;\n    order: 6;\n  }\n  .order-md-7 {\n    -ms-flex-order: 7;\n    order: 7;\n  }\n  .order-md-8 {\n    -ms-flex-order: 8;\n    order: 8;\n  }\n  .order-md-9 {\n    -ms-flex-order: 9;\n    order: 9;\n  }\n  .order-md-10 {\n    -ms-flex-order: 10;\n    order: 10;\n  }\n  .order-md-11 {\n    -ms-flex-order: 11;\n    order: 11;\n  }\n  .order-md-12 {\n    -ms-flex-order: 12;\n    order: 12;\n  }\n  .offset-md-0 {\n    margin-left: 0;\n  }\n  .offset-md-1 {\n    margin-left: 8.333333%;\n  }\n  .offset-md-2 {\n    margin-left: 16.666667%;\n  }\n  .offset-md-3 {\n    margin-left: 25%;\n  }\n  .offset-md-4 {\n    margin-left: 33.333333%;\n  }\n  .offset-md-5 {\n    margin-left: 41.666667%;\n  }\n  .offset-md-6 {\n    margin-left: 50%;\n  }\n  .offset-md-7 {\n    margin-left: 58.333333%;\n  }\n  .offset-md-8 {\n    margin-left: 66.666667%;\n  }\n  .offset-md-9 {\n    margin-left: 75%;\n  }\n  .offset-md-10 {\n    margin-left: 83.333333%;\n  }\n  .offset-md-11 {\n    margin-left: 91.666667%;\n  }\n}\n\n@media (min-width: 992px) {\n  .col-lg {\n    -ms-flex-preferred-size: 0;\n    flex-basis: 0;\n    -ms-flex-positive: 1;\n    flex-grow: 1;\n    max-width: 100%;\n  }\n  .col-lg-auto {\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    width: auto;\n    max-width: none;\n  }\n  .col-lg-1 {\n    -ms-flex: 0 0 8.333333%;\n    flex: 0 0 8.333333%;\n    max-width: 8.333333%;\n  }\n  .col-lg-2 {\n    -ms-flex: 0 0 16.666667%;\n    flex: 0 0 16.666667%;\n    max-width: 16.666667%;\n  }\n  .col-lg-3 {\n    -ms-flex: 0 0 25%;\n    flex: 0 0 25%;\n    max-width: 25%;\n  }\n  .col-lg-4 {\n    -ms-flex: 0 0 33.333333%;\n    flex: 0 0 33.333333%;\n    max-width: 33.333333%;\n  }\n  .col-lg-5 {\n    -ms-flex: 0 0 41.666667%;\n    flex: 0 0 41.666667%;\n    max-width: 41.666667%;\n  }\n  .col-lg-6 {\n    -ms-flex: 0 0 50%;\n    flex: 0 0 50%;\n    max-width: 50%;\n  }\n  .col-lg-7 {\n    -ms-flex: 0 0 58.333333%;\n    flex: 0 0 58.333333%;\n    max-width: 58.333333%;\n  }\n  .col-lg-8 {\n    -ms-flex: 0 0 66.666667%;\n    flex: 0 0 66.666667%;\n    max-width: 66.666667%;\n  }\n  .col-lg-9 {\n    -ms-flex: 0 0 75%;\n    flex: 0 0 75%;\n    max-width: 75%;\n  }\n  .col-lg-10 {\n    -ms-flex: 0 0 83.333333%;\n    flex: 0 0 83.333333%;\n    max-width: 83.333333%;\n  }\n  .col-lg-11 {\n    -ms-flex: 0 0 91.666667%;\n    flex: 0 0 91.666667%;\n    max-width: 91.666667%;\n  }\n  .col-lg-12 {\n    -ms-flex: 0 0 100%;\n    flex: 0 0 100%;\n    max-width: 100%;\n  }\n  .order-lg-first {\n    -ms-flex-order: -1;\n    order: -1;\n  }\n  .order-lg-last {\n    -ms-flex-order: 13;\n    order: 13;\n  }\n  .order-lg-0 {\n    -ms-flex-order: 0;\n    order: 0;\n  }\n  .order-lg-1 {\n    -ms-flex-order: 1;\n    order: 1;\n  }\n  .order-lg-2 {\n    -ms-flex-order: 2;\n    order: 2;\n  }\n  .order-lg-3 {\n    -ms-flex-order: 3;\n    order: 3;\n  }\n  .order-lg-4 {\n    -ms-flex-order: 4;\n    order: 4;\n  }\n  .order-lg-5 {\n    -ms-flex-order: 5;\n    order: 5;\n  }\n  .order-lg-6 {\n    -ms-flex-order: 6;\n    order: 6;\n  }\n  .order-lg-7 {\n    -ms-flex-order: 7;\n    order: 7;\n  }\n  .order-lg-8 {\n    -ms-flex-order: 8;\n    order: 8;\n  }\n  .order-lg-9 {\n    -ms-flex-order: 9;\n    order: 9;\n  }\n  .order-lg-10 {\n    -ms-flex-order: 10;\n    order: 10;\n  }\n  .order-lg-11 {\n    -ms-flex-order: 11;\n    order: 11;\n  }\n  .order-lg-12 {\n    -ms-flex-order: 12;\n    order: 12;\n  }\n  .offset-lg-0 {\n    margin-left: 0;\n  }\n  .offset-lg-1 {\n    margin-left: 8.333333%;\n  }\n  .offset-lg-2 {\n    margin-left: 16.666667%;\n  }\n  .offset-lg-3 {\n    margin-left: 25%;\n  }\n  .offset-lg-4 {\n    margin-left: 33.333333%;\n  }\n  .offset-lg-5 {\n    margin-left: 41.666667%;\n  }\n  .offset-lg-6 {\n    margin-left: 50%;\n  }\n  .offset-lg-7 {\n    margin-left: 58.333333%;\n  }\n  .offset-lg-8 {\n    margin-left: 66.666667%;\n  }\n  .offset-lg-9 {\n    margin-left: 75%;\n  }\n  .offset-lg-10 {\n    margin-left: 83.333333%;\n  }\n  .offset-lg-11 {\n    margin-left: 91.666667%;\n  }\n}\n\n@media (min-width: 1200px) {\n  .col-xl {\n    -ms-flex-preferred-size: 0;\n    flex-basis: 0;\n    -ms-flex-positive: 1;\n    flex-grow: 1;\n    max-width: 100%;\n  }\n  .col-xl-auto {\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    width: auto;\n    max-width: none;\n  }\n  .col-xl-1 {\n    -ms-flex: 0 0 8.333333%;\n    flex: 0 0 8.333333%;\n    max-width: 8.333333%;\n  }\n  .col-xl-2 {\n    -ms-flex: 0 0 16.666667%;\n    flex: 0 0 16.666667%;\n    max-width: 16.666667%;\n  }\n  .col-xl-3 {\n    -ms-flex: 0 0 25%;\n    flex: 0 0 25%;\n    max-width: 25%;\n  }\n  .col-xl-4 {\n    -ms-flex: 0 0 33.333333%;\n    flex: 0 0 33.333333%;\n    max-width: 33.333333%;\n  }\n  .col-xl-5 {\n    -ms-flex: 0 0 41.666667%;\n    flex: 0 0 41.666667%;\n    max-width: 41.666667%;\n  }\n  .col-xl-6 {\n    -ms-flex: 0 0 50%;\n    flex: 0 0 50%;\n    max-width: 50%;\n  }\n  .col-xl-7 {\n    -ms-flex: 0 0 58.333333%;\n    flex: 0 0 58.333333%;\n    max-width: 58.333333%;\n  }\n  .col-xl-8 {\n    -ms-flex: 0 0 66.666667%;\n    flex: 0 0 66.666667%;\n    max-width: 66.666667%;\n  }\n  .col-xl-9 {\n    -ms-flex: 0 0 75%;\n    flex: 0 0 75%;\n    max-width: 75%;\n  }\n  .col-xl-10 {\n    -ms-flex: 0 0 83.333333%;\n    flex: 0 0 83.333333%;\n    max-width: 83.333333%;\n  }\n  .col-xl-11 {\n    -ms-flex: 0 0 91.666667%;\n    flex: 0 0 91.666667%;\n    max-width: 91.666667%;\n  }\n  .col-xl-12 {\n    -ms-flex: 0 0 100%;\n    flex: 0 0 100%;\n    max-width: 100%;\n  }\n  .order-xl-first {\n    -ms-flex-order: -1;\n    order: -1;\n  }\n  .order-xl-last {\n    -ms-flex-order: 13;\n    order: 13;\n  }\n  .order-xl-0 {\n    -ms-flex-order: 0;\n    order: 0;\n  }\n  .order-xl-1 {\n    -ms-flex-order: 1;\n    order: 1;\n  }\n  .order-xl-2 {\n    -ms-flex-order: 2;\n    order: 2;\n  }\n  .order-xl-3 {\n    -ms-flex-order: 3;\n    order: 3;\n  }\n  .order-xl-4 {\n    -ms-flex-order: 4;\n    order: 4;\n  }\n  .order-xl-5 {\n    -ms-flex-order: 5;\n    order: 5;\n  }\n  .order-xl-6 {\n    -ms-flex-order: 6;\n    order: 6;\n  }\n  .order-xl-7 {\n    -ms-flex-order: 7;\n    order: 7;\n  }\n  .order-xl-8 {\n    -ms-flex-order: 8;\n    order: 8;\n  }\n  .order-xl-9 {\n    -ms-flex-order: 9;\n    order: 9;\n  }\n  .order-xl-10 {\n    -ms-flex-order: 10;\n    order: 10;\n  }\n  .order-xl-11 {\n    -ms-flex-order: 11;\n    order: 11;\n  }\n  .order-xl-12 {\n    -ms-flex-order: 12;\n    order: 12;\n  }\n  .offset-xl-0 {\n    margin-left: 0;\n  }\n  .offset-xl-1 {\n    margin-left: 8.333333%;\n  }\n  .offset-xl-2 {\n    margin-left: 16.666667%;\n  }\n  .offset-xl-3 {\n    margin-left: 25%;\n  }\n  .offset-xl-4 {\n    margin-left: 33.333333%;\n  }\n  .offset-xl-5 {\n    margin-left: 41.666667%;\n  }\n  .offset-xl-6 {\n    margin-left: 50%;\n  }\n  .offset-xl-7 {\n    margin-left: 58.333333%;\n  }\n  .offset-xl-8 {\n    margin-left: 66.666667%;\n  }\n  .offset-xl-9 {\n    margin-left: 75%;\n  }\n  .offset-xl-10 {\n    margin-left: 83.333333%;\n  }\n  .offset-xl-11 {\n    margin-left: 91.666667%;\n  }\n}\n\n.table {\n  width: 100%;\n  margin-bottom: 1rem;\n  background-color: transparent;\n}\n\n.table th,\n.table td {\n  padding: 0.75rem;\n  vertical-align: top;\n  border-top: 1px solid #dee2e6;\n}\n\n.table thead th {\n  vertical-align: bottom;\n  border-bottom: 2px solid #dee2e6;\n}\n\n.table tbody + tbody {\n  border-top: 2px solid #dee2e6;\n}\n\n.table .table {\n  background-color: #fff;\n}\n\n.table-sm th,\n.table-sm td {\n  padding: 0.3rem;\n}\n\n.table-bordered {\n  border: 1px solid #dee2e6;\n}\n\n.table-bordered th,\n.table-bordered td {\n  border: 1px solid #dee2e6;\n}\n\n.table-bordered thead th,\n.table-bordered thead td {\n  border-bottom-width: 2px;\n}\n\n.table-borderless th,\n.table-borderless td,\n.table-borderless thead th,\n.table-borderless tbody + tbody {\n  border: 0;\n}\n\n.table-striped tbody tr:nth-of-type(odd) {\n  background-color: rgba(0, 0, 0, 0.05);\n}\n\n.table-hover tbody tr:hover {\n  background-color: rgba(0, 0, 0, 0.075);\n}\n\n.table-primary,\n.table-primary > th,\n.table-primary > td {\n  background-color: #b8daff;\n}\n\n.table-hover .table-primary:hover {\n  background-color: #9fcdff;\n}\n\n.table-hover .table-primary:hover > td,\n.table-hover .table-primary:hover > th {\n  background-color: #9fcdff;\n}\n\n.table-secondary,\n.table-secondary > th,\n.table-secondary > td {\n  background-color: #d6d8db;\n}\n\n.table-hover .table-secondary:hover {\n  background-color: #c8cbcf;\n}\n\n.table-hover .table-secondary:hover > td,\n.table-hover .table-secondary:hover > th {\n  background-color: #c8cbcf;\n}\n\n.table-success,\n.table-success > th,\n.table-success > td {\n  background-color: #c3e6cb;\n}\n\n.table-hover .table-success:hover {\n  background-color: #b1dfbb;\n}\n\n.table-hover .table-success:hover > td,\n.table-hover .table-success:hover > th {\n  background-color: #b1dfbb;\n}\n\n.table-info,\n.table-info > th,\n.table-info > td {\n  background-color: #bee5eb;\n}\n\n.table-hover .table-info:hover {\n  background-color: #abdde5;\n}\n\n.table-hover .table-info:hover > td,\n.table-hover .table-info:hover > th {\n  background-color: #abdde5;\n}\n\n.table-warning,\n.table-warning > th,\n.table-warning > td {\n  background-color: #ffeeba;\n}\n\n.table-hover .table-warning:hover {\n  background-color: #ffe8a1;\n}\n\n.table-hover .table-warning:hover > td,\n.table-hover .table-warning:hover > th {\n  background-color: #ffe8a1;\n}\n\n.table-danger,\n.table-danger > th,\n.table-danger > td {\n  background-color: #f5c6cb;\n}\n\n.table-hover .table-danger:hover {\n  background-color: #f1b0b7;\n}\n\n.table-hover .table-danger:hover > td,\n.table-hover .table-danger:hover > th {\n  background-color: #f1b0b7;\n}\n\n.table-light,\n.table-light > th,\n.table-light > td {\n  background-color: #fdfdfe;\n}\n\n.table-hover .table-light:hover {\n  background-color: #ececf6;\n}\n\n.table-hover .table-light:hover > td,\n.table-hover .table-light:hover > th {\n  background-color: #ececf6;\n}\n\n.table-dark,\n.table-dark > th,\n.table-dark > td {\n  background-color: #c6c8ca;\n}\n\n.table-hover .table-dark:hover {\n  background-color: #b9bbbe;\n}\n\n.table-hover .table-dark:hover > td,\n.table-hover .table-dark:hover > th {\n  background-color: #b9bbbe;\n}\n\n.table-active,\n.table-active > th,\n.table-active > td {\n  background-color: rgba(0, 0, 0, 0.075);\n}\n\n.table-hover .table-active:hover {\n  background-color: rgba(0, 0, 0, 0.075);\n}\n\n.table-hover .table-active:hover > td,\n.table-hover .table-active:hover > th {\n  background-color: rgba(0, 0, 0, 0.075);\n}\n\n.table .thead-dark th {\n  color: #fff;\n  background-color: #212529;\n  border-color: #32383e;\n}\n\n.table .thead-light th {\n  color: #495057;\n  background-color: #e9ecef;\n  border-color: #dee2e6;\n}\n\n.table-dark {\n  color: #fff;\n  background-color: #212529;\n}\n\n.table-dark th,\n.table-dark td,\n.table-dark thead th {\n  border-color: #32383e;\n}\n\n.table-dark.table-bordered {\n  border: 0;\n}\n\n.table-dark.table-striped tbody tr:nth-of-type(odd) {\n  background-color: rgba(255, 255, 255, 0.05);\n}\n\n.table-dark.table-hover tbody tr:hover {\n  background-color: rgba(255, 255, 255, 0.075);\n}\n\n@media (max-width: 575.98px) {\n  .table-responsive-sm {\n    display: block;\n    width: 100%;\n    overflow-x: auto;\n    -webkit-overflow-scrolling: touch;\n    -ms-overflow-style: -ms-autohiding-scrollbar;\n  }\n  .table-responsive-sm > .table-bordered {\n    border: 0;\n  }\n}\n\n@media (max-width: 767.98px) {\n  .table-responsive-md {\n    display: block;\n    width: 100%;\n    overflow-x: auto;\n    -webkit-overflow-scrolling: touch;\n    -ms-overflow-style: -ms-autohiding-scrollbar;\n  }\n  .table-responsive-md > .table-bordered {\n    border: 0;\n  }\n}\n\n@media (max-width: 991.98px) {\n  .table-responsive-lg {\n    display: block;\n    width: 100%;\n    overflow-x: auto;\n    -webkit-overflow-scrolling: touch;\n    -ms-overflow-style: -ms-autohiding-scrollbar;\n  }\n  .table-responsive-lg > .table-bordered {\n    border: 0;\n  }\n}\n\n@media (max-width: 1199.98px) {\n  .table-responsive-xl {\n    display: block;\n    width: 100%;\n    overflow-x: auto;\n    -webkit-overflow-scrolling: touch;\n    -ms-overflow-style: -ms-autohiding-scrollbar;\n  }\n  .table-responsive-xl > .table-bordered {\n    border: 0;\n  }\n}\n\n.table-responsive {\n  display: block;\n  width: 100%;\n  overflow-x: auto;\n  -webkit-overflow-scrolling: touch;\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n}\n\n.table-responsive > .table-bordered {\n  border: 0;\n}\n\n.form-control {\n  display: block;\n  width: 100%;\n  height: calc(2.25rem + 2px);\n  padding: 0.375rem 0.75rem;\n  font-size: 1rem;\n  line-height: 1.5;\n  color: #495057;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem;\n  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n}\n\n@media screen and (prefers-reduced-motion: reduce) {\n  .form-control {\n    transition: none;\n  }\n}\n\n.form-control::-ms-expand {\n  background-color: transparent;\n  border: 0;\n}\n\n.form-control:focus {\n  color: #495057;\n  background-color: #fff;\n  border-color: #80bdff;\n  outline: 0;\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n.form-control::-webkit-input-placeholder {\n  color: #6c757d;\n  opacity: 1;\n}\n\n.form-control::-moz-placeholder {\n  color: #6c757d;\n  opacity: 1;\n}\n\n.form-control:-ms-input-placeholder {\n  color: #6c757d;\n  opacity: 1;\n}\n\n.form-control::-ms-input-placeholder {\n  color: #6c757d;\n  opacity: 1;\n}\n\n.form-control::placeholder {\n  color: #6c757d;\n  opacity: 1;\n}\n\n.form-control:disabled, .form-control[readonly] {\n  background-color: #e9ecef;\n  opacity: 1;\n}\n\nselect.form-control:focus::-ms-value {\n  color: #495057;\n  background-color: #fff;\n}\n\n.form-control-file,\n.form-control-range {\n  display: block;\n  width: 100%;\n}\n\n.col-form-label {\n  padding-top: calc(0.375rem + 1px);\n  padding-bottom: calc(0.375rem + 1px);\n  margin-bottom: 0;\n  font-size: inherit;\n  line-height: 1.5;\n}\n\n.col-form-label-lg {\n  padding-top: calc(0.5rem + 1px);\n  padding-bottom: calc(0.5rem + 1px);\n  font-size: 1.25rem;\n  line-height: 1.5;\n}\n\n.col-form-label-sm {\n  padding-top: calc(0.25rem + 1px);\n  padding-bottom: calc(0.25rem + 1px);\n  font-size: 0.875rem;\n  line-height: 1.5;\n}\n\n.form-control-plaintext {\n  display: block;\n  width: 100%;\n  padding-top: 0.375rem;\n  padding-bottom: 0.375rem;\n  margin-bottom: 0;\n  line-height: 1.5;\n  color: #212529;\n  background-color: transparent;\n  border: solid transparent;\n  border-width: 1px 0;\n}\n\n.form-control-plaintext.form-control-sm, .form-control-plaintext.form-control-lg {\n  padding-right: 0;\n  padding-left: 0;\n}\n\n.form-control-sm {\n  height: calc(1.8125rem + 2px);\n  padding: 0.25rem 0.5rem;\n  font-size: 0.875rem;\n  line-height: 1.5;\n  border-radius: 0.2rem;\n}\n\n.form-control-lg {\n  height: calc(2.875rem + 2px);\n  padding: 0.5rem 1rem;\n  font-size: 1.25rem;\n  line-height: 1.5;\n  border-radius: 0.3rem;\n}\n\nselect.form-control[size], select.form-control[multiple] {\n  height: auto;\n}\n\ntextarea.form-control {\n  height: auto;\n}\n\n.form-group {\n  margin-bottom: 1rem;\n}\n\n.form-text {\n  display: block;\n  margin-top: 0.25rem;\n}\n\n.form-row {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  margin-right: -5px;\n  margin-left: -5px;\n}\n\n.form-row > .col,\n.form-row > [class*="col-"] {\n  padding-right: 5px;\n  padding-left: 5px;\n}\n\n.form-check {\n  position: relative;\n  display: block;\n  padding-left: 1.25rem;\n}\n\n.form-check-input {\n  position: absolute;\n  margin-top: 0.3rem;\n  margin-left: -1.25rem;\n}\n\n.form-check-input:disabled ~ .form-check-label {\n  color: #6c757d;\n}\n\n.form-check-label {\n  margin-bottom: 0;\n}\n\n.form-check-inline {\n  display: -ms-inline-flexbox;\n  display: inline-flex;\n  -ms-flex-align: center;\n  align-items: center;\n  padding-left: 0;\n  margin-right: 0.75rem;\n}\n\n.form-check-inline .form-check-input {\n  position: static;\n  margin-top: 0;\n  margin-right: 0.3125rem;\n  margin-left: 0;\n}\n\n.valid-feedback {\n  display: none;\n  width: 100%;\n  margin-top: 0.25rem;\n  font-size: 80%;\n  color: #28a745;\n}\n\n.valid-tooltip {\n  position: absolute;\n  top: 100%;\n  z-index: 5;\n  display: none;\n  max-width: 100%;\n  padding: 0.25rem 0.5rem;\n  margin-top: .1rem;\n  font-size: 0.875rem;\n  line-height: 1.5;\n  color: #fff;\n  background-color: rgba(40, 167, 69, 0.9);\n  border-radius: 0.25rem;\n}\n\n.was-validated .form-control:valid, .form-control.is-valid, .was-validated\n.custom-select:valid,\n.custom-select.is-valid {\n  border-color: #28a745;\n}\n\n.was-validated .form-control:valid:focus, .form-control.is-valid:focus, .was-validated\n.custom-select:valid:focus,\n.custom-select.is-valid:focus {\n  border-color: #28a745;\n  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);\n}\n\n.was-validated .form-control:valid ~ .valid-feedback,\n.was-validated .form-control:valid ~ .valid-tooltip, .form-control.is-valid ~ .valid-feedback,\n.form-control.is-valid ~ .valid-tooltip, .was-validated\n.custom-select:valid ~ .valid-feedback,\n.was-validated\n.custom-select:valid ~ .valid-tooltip,\n.custom-select.is-valid ~ .valid-feedback,\n.custom-select.is-valid ~ .valid-tooltip {\n  display: block;\n}\n\n.was-validated .form-control-file:valid ~ .valid-feedback,\n.was-validated .form-control-file:valid ~ .valid-tooltip, .form-control-file.is-valid ~ .valid-feedback,\n.form-control-file.is-valid ~ .valid-tooltip {\n  display: block;\n}\n\n.was-validated .form-check-input:valid ~ .form-check-label, .form-check-input.is-valid ~ .form-check-label {\n  color: #28a745;\n}\n\n.was-validated .form-check-input:valid ~ .valid-feedback,\n.was-validated .form-check-input:valid ~ .valid-tooltip, .form-check-input.is-valid ~ .valid-feedback,\n.form-check-input.is-valid ~ .valid-tooltip {\n  display: block;\n}\n\n.was-validated .custom-control-input:valid ~ .custom-control-label, .custom-control-input.is-valid ~ .custom-control-label {\n  color: #28a745;\n}\n\n.was-validated .custom-control-input:valid ~ .custom-control-label::before, .custom-control-input.is-valid ~ .custom-control-label::before {\n  background-color: #71dd8a;\n}\n\n.was-validated .custom-control-input:valid ~ .valid-feedback,\n.was-validated .custom-control-input:valid ~ .valid-tooltip, .custom-control-input.is-valid ~ .valid-feedback,\n.custom-control-input.is-valid ~ .valid-tooltip {\n  display: block;\n}\n\n.was-validated .custom-control-input:valid:checked ~ .custom-control-label::before, .custom-control-input.is-valid:checked ~ .custom-control-label::before {\n  background-color: #34ce57;\n}\n\n.was-validated .custom-control-input:valid:focus ~ .custom-control-label::before, .custom-control-input.is-valid:focus ~ .custom-control-label::before {\n  box-shadow: 0 0 0 1px #fff, 0 0 0 0.2rem rgba(40, 167, 69, 0.25);\n}\n\n.was-validated .custom-file-input:valid ~ .custom-file-label, .custom-file-input.is-valid ~ .custom-file-label {\n  border-color: #28a745;\n}\n\n.was-validated .custom-file-input:valid ~ .custom-file-label::after, .custom-file-input.is-valid ~ .custom-file-label::after {\n  border-color: inherit;\n}\n\n.was-validated .custom-file-input:valid ~ .valid-feedback,\n.was-validated .custom-file-input:valid ~ .valid-tooltip, .custom-file-input.is-valid ~ .valid-feedback,\n.custom-file-input.is-valid ~ .valid-tooltip {\n  display: block;\n}\n\n.was-validated .custom-file-input:valid:focus ~ .custom-file-label, .custom-file-input.is-valid:focus ~ .custom-file-label {\n  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);\n}\n\n.invalid-feedback {\n  display: none;\n  width: 100%;\n  margin-top: 0.25rem;\n  font-size: 80%;\n  color: #dc3545;\n}\n\n.invalid-tooltip {\n  position: absolute;\n  top: 100%;\n  z-index: 5;\n  display: none;\n  max-width: 100%;\n  padding: 0.25rem 0.5rem;\n  margin-top: .1rem;\n  font-size: 0.875rem;\n  line-height: 1.5;\n  color: #fff;\n  background-color: rgba(220, 53, 69, 0.9);\n  border-radius: 0.25rem;\n}\n\n.was-validated .form-control:invalid, .form-control.is-invalid, .was-validated\n.custom-select:invalid,\n.custom-select.is-invalid {\n  border-color: #dc3545;\n}\n\n.was-validated .form-control:invalid:focus, .form-control.is-invalid:focus, .was-validated\n.custom-select:invalid:focus,\n.custom-select.is-invalid:focus {\n  border-color: #dc3545;\n  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);\n}\n\n.was-validated .form-control:invalid ~ .invalid-feedback,\n.was-validated .form-control:invalid ~ .invalid-tooltip, .form-control.is-invalid ~ .invalid-feedback,\n.form-control.is-invalid ~ .invalid-tooltip, .was-validated\n.custom-select:invalid ~ .invalid-feedback,\n.was-validated\n.custom-select:invalid ~ .invalid-tooltip,\n.custom-select.is-invalid ~ .invalid-feedback,\n.custom-select.is-invalid ~ .invalid-tooltip {\n  display: block;\n}\n\n.was-validated .form-control-file:invalid ~ .invalid-feedback,\n.was-validated .form-control-file:invalid ~ .invalid-tooltip, .form-control-file.is-invalid ~ .invalid-feedback,\n.form-control-file.is-invalid ~ .invalid-tooltip {\n  display: block;\n}\n\n.was-validated .form-check-input:invalid ~ .form-check-label, .form-check-input.is-invalid ~ .form-check-label {\n  color: #dc3545;\n}\n\n.was-validated .form-check-input:invalid ~ .invalid-feedback,\n.was-validated .form-check-input:invalid ~ .invalid-tooltip, .form-check-input.is-invalid ~ .invalid-feedback,\n.form-check-input.is-invalid ~ .invalid-tooltip {\n  display: block;\n}\n\n.was-validated .custom-control-input:invalid ~ .custom-control-label, .custom-control-input.is-invalid ~ .custom-control-label {\n  color: #dc3545;\n}\n\n.was-validated .custom-control-input:invalid ~ .custom-control-label::before, .custom-control-input.is-invalid ~ .custom-control-label::before {\n  background-color: #efa2a9;\n}\n\n.was-validated .custom-control-input:invalid ~ .invalid-feedback,\n.was-validated .custom-control-input:invalid ~ .invalid-tooltip, .custom-control-input.is-invalid ~ .invalid-feedback,\n.custom-control-input.is-invalid ~ .invalid-tooltip {\n  display: block;\n}\n\n.was-validated .custom-control-input:invalid:checked ~ .custom-control-label::before, .custom-control-input.is-invalid:checked ~ .custom-control-label::before {\n  background-color: #e4606d;\n}\n\n.was-validated .custom-control-input:invalid:focus ~ .custom-control-label::before, .custom-control-input.is-invalid:focus ~ .custom-control-label::before {\n  box-shadow: 0 0 0 1px #fff, 0 0 0 0.2rem rgba(220, 53, 69, 0.25);\n}\n\n.was-validated .custom-file-input:invalid ~ .custom-file-label, .custom-file-input.is-invalid ~ .custom-file-label {\n  border-color: #dc3545;\n}\n\n.was-validated .custom-file-input:invalid ~ .custom-file-label::after, .custom-file-input.is-invalid ~ .custom-file-label::after {\n  border-color: inherit;\n}\n\n.was-validated .custom-file-input:invalid ~ .invalid-feedback,\n.was-validated .custom-file-input:invalid ~ .invalid-tooltip, .custom-file-input.is-invalid ~ .invalid-feedback,\n.custom-file-input.is-invalid ~ .invalid-tooltip {\n  display: block;\n}\n\n.was-validated .custom-file-input:invalid:focus ~ .custom-file-label, .custom-file-input.is-invalid:focus ~ .custom-file-label {\n  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);\n}\n\n.form-inline {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-flow: row wrap;\n  flex-flow: row wrap;\n  -ms-flex-align: center;\n  align-items: center;\n}\n\n.form-inline .form-check {\n  width: 100%;\n}\n\n@media (min-width: 576px) {\n  .form-inline label {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-align: center;\n    align-items: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n    margin-bottom: 0;\n  }\n  .form-inline .form-group {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    -ms-flex-flow: row wrap;\n    flex-flow: row wrap;\n    -ms-flex-align: center;\n    align-items: center;\n    margin-bottom: 0;\n  }\n  .form-inline .form-control {\n    display: inline-block;\n    width: auto;\n    vertical-align: middle;\n  }\n  .form-inline .form-control-plaintext {\n    display: inline-block;\n  }\n  .form-inline .input-group,\n  .form-inline .custom-select {\n    width: auto;\n  }\n  .form-inline .form-check {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex-align: center;\n    align-items: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n    width: auto;\n    padding-left: 0;\n  }\n  .form-inline .form-check-input {\n    position: relative;\n    margin-top: 0;\n    margin-right: 0.25rem;\n    margin-left: 0;\n  }\n  .form-inline .custom-control {\n    -ms-flex-align: center;\n    align-items: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n  }\n  .form-inline .custom-control-label {\n    margin-bottom: 0;\n  }\n}\n\n.btn {\n  display: inline-block;\n  font-weight: 400;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  border: 1px solid transparent;\n  padding: 0.375rem 0.75rem;\n  font-size: 1rem;\n  line-height: 1.5;\n  border-radius: 0.25rem;\n  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n}\n\n@media screen and (prefers-reduced-motion: reduce) {\n  .btn {\n    transition: none;\n  }\n}\n\n.btn:hover, .btn:focus {\n  text-decoration: none;\n}\n\n.btn:focus, .btn.focus {\n  outline: 0;\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n.btn.disabled, .btn:disabled {\n  opacity: 0.65;\n}\n\n.btn:not(:disabled):not(.disabled) {\n  cursor: pointer;\n}\n\na.btn.disabled,\nfieldset:disabled a.btn {\n  pointer-events: none;\n}\n\n.btn-primary {\n  color: #fff;\n  background-color: #007bff;\n  border-color: #007bff;\n}\n\n.btn-primary:hover {\n  color: #fff;\n  background-color: #0069d9;\n  border-color: #0062cc;\n}\n\n.btn-primary:focus, .btn-primary.focus {\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);\n}\n\n.btn-primary.disabled, .btn-primary:disabled {\n  color: #fff;\n  background-color: #007bff;\n  border-color: #007bff;\n}\n\n.btn-primary:not(:disabled):not(.disabled):active, .btn-primary:not(:disabled):not(.disabled).active,\n.show > .btn-primary.dropdown-toggle {\n  color: #fff;\n  background-color: #0062cc;\n  border-color: #005cbf;\n}\n\n.btn-primary:not(:disabled):not(.disabled):active:focus, .btn-primary:not(:disabled):not(.disabled).active:focus,\n.show > .btn-primary.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);\n}\n\n.btn-secondary {\n  color: #fff;\n  background-color: #6c757d;\n  border-color: #6c757d;\n}\n\n.btn-secondary:hover {\n  color: #fff;\n  background-color: #5a6268;\n  border-color: #545b62;\n}\n\n.btn-secondary:focus, .btn-secondary.focus {\n  box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.5);\n}\n\n.btn-secondary.disabled, .btn-secondary:disabled {\n  color: #fff;\n  background-color: #6c757d;\n  border-color: #6c757d;\n}\n\n.btn-secondary:not(:disabled):not(.disabled):active, .btn-secondary:not(:disabled):not(.disabled).active,\n.show > .btn-secondary.dropdown-toggle {\n  color: #fff;\n  background-color: #545b62;\n  border-color: #4e555b;\n}\n\n.btn-secondary:not(:disabled):not(.disabled):active:focus, .btn-secondary:not(:disabled):not(.disabled).active:focus,\n.show > .btn-secondary.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.5);\n}\n\n.btn-success {\n  color: #fff;\n  background-color: #28a745;\n  border-color: #28a745;\n}\n\n.btn-success:hover {\n  color: #fff;\n  background-color: #218838;\n  border-color: #1e7e34;\n}\n\n.btn-success:focus, .btn-success.focus {\n  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5);\n}\n\n.btn-success.disabled, .btn-success:disabled {\n  color: #fff;\n  background-color: #28a745;\n  border-color: #28a745;\n}\n\n.btn-success:not(:disabled):not(.disabled):active, .btn-success:not(:disabled):not(.disabled).active,\n.show > .btn-success.dropdown-toggle {\n  color: #fff;\n  background-color: #1e7e34;\n  border-color: #1c7430;\n}\n\n.btn-success:not(:disabled):not(.disabled):active:focus, .btn-success:not(:disabled):not(.disabled).active:focus,\n.show > .btn-success.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5);\n}\n\n.btn-info {\n  color: #fff;\n  background-color: #17a2b8;\n  border-color: #17a2b8;\n}\n\n.btn-info:hover {\n  color: #fff;\n  background-color: #138496;\n  border-color: #117a8b;\n}\n\n.btn-info:focus, .btn-info.focus {\n  box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5);\n}\n\n.btn-info.disabled, .btn-info:disabled {\n  color: #fff;\n  background-color: #17a2b8;\n  border-color: #17a2b8;\n}\n\n.btn-info:not(:disabled):not(.disabled):active, .btn-info:not(:disabled):not(.disabled).active,\n.show > .btn-info.dropdown-toggle {\n  color: #fff;\n  background-color: #117a8b;\n  border-color: #10707f;\n}\n\n.btn-info:not(:disabled):not(.disabled):active:focus, .btn-info:not(:disabled):not(.disabled).active:focus,\n.show > .btn-info.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5);\n}\n\n.btn-warning {\n  color: #212529;\n  background-color: #ffc107;\n  border-color: #ffc107;\n}\n\n.btn-warning:hover {\n  color: #212529;\n  background-color: #e0a800;\n  border-color: #d39e00;\n}\n\n.btn-warning:focus, .btn-warning.focus {\n  box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5);\n}\n\n.btn-warning.disabled, .btn-warning:disabled {\n  color: #212529;\n  background-color: #ffc107;\n  border-color: #ffc107;\n}\n\n.btn-warning:not(:disabled):not(.disabled):active, .btn-warning:not(:disabled):not(.disabled).active,\n.show > .btn-warning.dropdown-toggle {\n  color: #212529;\n  background-color: #d39e00;\n  border-color: #c69500;\n}\n\n.btn-warning:not(:disabled):not(.disabled):active:focus, .btn-warning:not(:disabled):not(.disabled).active:focus,\n.show > .btn-warning.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5);\n}\n\n.btn-danger {\n  color: #fff;\n  background-color: #dc3545;\n  border-color: #dc3545;\n}\n\n.btn-danger:hover {\n  color: #fff;\n  background-color: #c82333;\n  border-color: #bd2130;\n}\n\n.btn-danger:focus, .btn-danger.focus {\n  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5);\n}\n\n.btn-danger.disabled, .btn-danger:disabled {\n  color: #fff;\n  background-color: #dc3545;\n  border-color: #dc3545;\n}\n\n.btn-danger:not(:disabled):not(.disabled):active, .btn-danger:not(:disabled):not(.disabled).active,\n.show > .btn-danger.dropdown-toggle {\n  color: #fff;\n  background-color: #bd2130;\n  border-color: #b21f2d;\n}\n\n.btn-danger:not(:disabled):not(.disabled):active:focus, .btn-danger:not(:disabled):not(.disabled).active:focus,\n.show > .btn-danger.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5);\n}\n\n.btn-light {\n  color: #212529;\n  background-color: #f8f9fa;\n  border-color: #f8f9fa;\n}\n\n.btn-light:hover {\n  color: #212529;\n  background-color: #e2e6ea;\n  border-color: #dae0e5;\n}\n\n.btn-light:focus, .btn-light.focus {\n  box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5);\n}\n\n.btn-light.disabled, .btn-light:disabled {\n  color: #212529;\n  background-color: #f8f9fa;\n  border-color: #f8f9fa;\n}\n\n.btn-light:not(:disabled):not(.disabled):active, .btn-light:not(:disabled):not(.disabled).active,\n.show > .btn-light.dropdown-toggle {\n  color: #212529;\n  background-color: #dae0e5;\n  border-color: #d3d9df;\n}\n\n.btn-light:not(:disabled):not(.disabled):active:focus, .btn-light:not(:disabled):not(.disabled).active:focus,\n.show > .btn-light.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5);\n}\n\n.btn-dark {\n  color: #fff;\n  background-color: #343a40;\n  border-color: #343a40;\n}\n\n.btn-dark:hover {\n  color: #fff;\n  background-color: #23272b;\n  border-color: #1d2124;\n}\n\n.btn-dark:focus, .btn-dark.focus {\n  box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5);\n}\n\n.btn-dark.disabled, .btn-dark:disabled {\n  color: #fff;\n  background-color: #343a40;\n  border-color: #343a40;\n}\n\n.btn-dark:not(:disabled):not(.disabled):active, .btn-dark:not(:disabled):not(.disabled).active,\n.show > .btn-dark.dropdown-toggle {\n  color: #fff;\n  background-color: #1d2124;\n  border-color: #171a1d;\n}\n\n.btn-dark:not(:disabled):not(.disabled):active:focus, .btn-dark:not(:disabled):not(.disabled).active:focus,\n.show > .btn-dark.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5);\n}\n\n.btn-outline-primary {\n  color: #007bff;\n  background-color: transparent;\n  background-image: none;\n  border-color: #007bff;\n}\n\n.btn-outline-primary:hover {\n  color: #fff;\n  background-color: #007bff;\n  border-color: #007bff;\n}\n\n.btn-outline-primary:focus, .btn-outline-primary.focus {\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);\n}\n\n.btn-outline-primary.disabled, .btn-outline-primary:disabled {\n  color: #007bff;\n  background-color: transparent;\n}\n\n.btn-outline-primary:not(:disabled):not(.disabled):active, .btn-outline-primary:not(:disabled):not(.disabled).active,\n.show > .btn-outline-primary.dropdown-toggle {\n  color: #fff;\n  background-color: #007bff;\n  border-color: #007bff;\n}\n\n.btn-outline-primary:not(:disabled):not(.disabled):active:focus, .btn-outline-primary:not(:disabled):not(.disabled).active:focus,\n.show > .btn-outline-primary.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.5);\n}\n\n.btn-outline-secondary {\n  color: #6c757d;\n  background-color: transparent;\n  background-image: none;\n  border-color: #6c757d;\n}\n\n.btn-outline-secondary:hover {\n  color: #fff;\n  background-color: #6c757d;\n  border-color: #6c757d;\n}\n\n.btn-outline-secondary:focus, .btn-outline-secondary.focus {\n  box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.5);\n}\n\n.btn-outline-secondary.disabled, .btn-outline-secondary:disabled {\n  color: #6c757d;\n  background-color: transparent;\n}\n\n.btn-outline-secondary:not(:disabled):not(.disabled):active, .btn-outline-secondary:not(:disabled):not(.disabled).active,\n.show > .btn-outline-secondary.dropdown-toggle {\n  color: #fff;\n  background-color: #6c757d;\n  border-color: #6c757d;\n}\n\n.btn-outline-secondary:not(:disabled):not(.disabled):active:focus, .btn-outline-secondary:not(:disabled):not(.disabled).active:focus,\n.show > .btn-outline-secondary.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.5);\n}\n\n.btn-outline-success {\n  color: #28a745;\n  background-color: transparent;\n  background-image: none;\n  border-color: #28a745;\n}\n\n.btn-outline-success:hover {\n  color: #fff;\n  background-color: #28a745;\n  border-color: #28a745;\n}\n\n.btn-outline-success:focus, .btn-outline-success.focus {\n  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5);\n}\n\n.btn-outline-success.disabled, .btn-outline-success:disabled {\n  color: #28a745;\n  background-color: transparent;\n}\n\n.btn-outline-success:not(:disabled):not(.disabled):active, .btn-outline-success:not(:disabled):not(.disabled).active,\n.show > .btn-outline-success.dropdown-toggle {\n  color: #fff;\n  background-color: #28a745;\n  border-color: #28a745;\n}\n\n.btn-outline-success:not(:disabled):not(.disabled):active:focus, .btn-outline-success:not(:disabled):not(.disabled).active:focus,\n.show > .btn-outline-success.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.5);\n}\n\n.btn-outline-info {\n  color: #17a2b8;\n  background-color: transparent;\n  background-image: none;\n  border-color: #17a2b8;\n}\n\n.btn-outline-info:hover {\n  color: #fff;\n  background-color: #17a2b8;\n  border-color: #17a2b8;\n}\n\n.btn-outline-info:focus, .btn-outline-info.focus {\n  box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5);\n}\n\n.btn-outline-info.disabled, .btn-outline-info:disabled {\n  color: #17a2b8;\n  background-color: transparent;\n}\n\n.btn-outline-info:not(:disabled):not(.disabled):active, .btn-outline-info:not(:disabled):not(.disabled).active,\n.show > .btn-outline-info.dropdown-toggle {\n  color: #fff;\n  background-color: #17a2b8;\n  border-color: #17a2b8;\n}\n\n.btn-outline-info:not(:disabled):not(.disabled):active:focus, .btn-outline-info:not(:disabled):not(.disabled).active:focus,\n.show > .btn-outline-info.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(23, 162, 184, 0.5);\n}\n\n.btn-outline-warning {\n  color: #ffc107;\n  background-color: transparent;\n  background-image: none;\n  border-color: #ffc107;\n}\n\n.btn-outline-warning:hover {\n  color: #212529;\n  background-color: #ffc107;\n  border-color: #ffc107;\n}\n\n.btn-outline-warning:focus, .btn-outline-warning.focus {\n  box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5);\n}\n\n.btn-outline-warning.disabled, .btn-outline-warning:disabled {\n  color: #ffc107;\n  background-color: transparent;\n}\n\n.btn-outline-warning:not(:disabled):not(.disabled):active, .btn-outline-warning:not(:disabled):not(.disabled).active,\n.show > .btn-outline-warning.dropdown-toggle {\n  color: #212529;\n  background-color: #ffc107;\n  border-color: #ffc107;\n}\n\n.btn-outline-warning:not(:disabled):not(.disabled):active:focus, .btn-outline-warning:not(:disabled):not(.disabled).active:focus,\n.show > .btn-outline-warning.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(255, 193, 7, 0.5);\n}\n\n.btn-outline-danger {\n  color: #dc3545;\n  background-color: transparent;\n  background-image: none;\n  border-color: #dc3545;\n}\n\n.btn-outline-danger:hover {\n  color: #fff;\n  background-color: #dc3545;\n  border-color: #dc3545;\n}\n\n.btn-outline-danger:focus, .btn-outline-danger.focus {\n  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5);\n}\n\n.btn-outline-danger.disabled, .btn-outline-danger:disabled {\n  color: #dc3545;\n  background-color: transparent;\n}\n\n.btn-outline-danger:not(:disabled):not(.disabled):active, .btn-outline-danger:not(:disabled):not(.disabled).active,\n.show > .btn-outline-danger.dropdown-toggle {\n  color: #fff;\n  background-color: #dc3545;\n  border-color: #dc3545;\n}\n\n.btn-outline-danger:not(:disabled):not(.disabled):active:focus, .btn-outline-danger:not(:disabled):not(.disabled).active:focus,\n.show > .btn-outline-danger.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.5);\n}\n\n.btn-outline-light {\n  color: #f8f9fa;\n  background-color: transparent;\n  background-image: none;\n  border-color: #f8f9fa;\n}\n\n.btn-outline-light:hover {\n  color: #212529;\n  background-color: #f8f9fa;\n  border-color: #f8f9fa;\n}\n\n.btn-outline-light:focus, .btn-outline-light.focus {\n  box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5);\n}\n\n.btn-outline-light.disabled, .btn-outline-light:disabled {\n  color: #f8f9fa;\n  background-color: transparent;\n}\n\n.btn-outline-light:not(:disabled):not(.disabled):active, .btn-outline-light:not(:disabled):not(.disabled).active,\n.show > .btn-outline-light.dropdown-toggle {\n  color: #212529;\n  background-color: #f8f9fa;\n  border-color: #f8f9fa;\n}\n\n.btn-outline-light:not(:disabled):not(.disabled):active:focus, .btn-outline-light:not(:disabled):not(.disabled).active:focus,\n.show > .btn-outline-light.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(248, 249, 250, 0.5);\n}\n\n.btn-outline-dark {\n  color: #343a40;\n  background-color: transparent;\n  background-image: none;\n  border-color: #343a40;\n}\n\n.btn-outline-dark:hover {\n  color: #fff;\n  background-color: #343a40;\n  border-color: #343a40;\n}\n\n.btn-outline-dark:focus, .btn-outline-dark.focus {\n  box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5);\n}\n\n.btn-outline-dark.disabled, .btn-outline-dark:disabled {\n  color: #343a40;\n  background-color: transparent;\n}\n\n.btn-outline-dark:not(:disabled):not(.disabled):active, .btn-outline-dark:not(:disabled):not(.disabled).active,\n.show > .btn-outline-dark.dropdown-toggle {\n  color: #fff;\n  background-color: #343a40;\n  border-color: #343a40;\n}\n\n.btn-outline-dark:not(:disabled):not(.disabled):active:focus, .btn-outline-dark:not(:disabled):not(.disabled).active:focus,\n.show > .btn-outline-dark.dropdown-toggle:focus {\n  box-shadow: 0 0 0 0.2rem rgba(52, 58, 64, 0.5);\n}\n\n.btn-link {\n  font-weight: 400;\n  color: #007bff;\n  background-color: transparent;\n}\n\n.btn-link:hover {\n  color: #0056b3;\n  text-decoration: underline;\n  background-color: transparent;\n  border-color: transparent;\n}\n\n.btn-link:focus, .btn-link.focus {\n  text-decoration: underline;\n  border-color: transparent;\n  box-shadow: none;\n}\n\n.btn-link:disabled, .btn-link.disabled {\n  color: #6c757d;\n  pointer-events: none;\n}\n\n.btn-lg, .btn-group-lg > .btn {\n  padding: 0.5rem 1rem;\n  font-size: 1.25rem;\n  line-height: 1.5;\n  border-radius: 0.3rem;\n}\n\n.btn-sm, .btn-group-sm > .btn {\n  padding: 0.25rem 0.5rem;\n  font-size: 0.875rem;\n  line-height: 1.5;\n  border-radius: 0.2rem;\n}\n\n.btn-block {\n  display: block;\n  width: 100%;\n}\n\n.btn-block + .btn-block {\n  margin-top: 0.5rem;\n}\n\ninput[type="submit"].btn-block,\ninput[type="reset"].btn-block,\ninput[type="button"].btn-block {\n  width: 100%;\n}\n\n.fade {\n  transition: opacity 0.15s linear;\n}\n\n@media screen and (prefers-reduced-motion: reduce) {\n  .fade {\n    transition: none;\n  }\n}\n\n.fade:not(.show) {\n  opacity: 0;\n}\n\n.collapse:not(.show) {\n  display: none;\n}\n\n.collapsing {\n  position: relative;\n  height: 0;\n  overflow: hidden;\n  transition: height 0.35s ease;\n}\n\n@media screen and (prefers-reduced-motion: reduce) {\n  .collapsing {\n    transition: none;\n  }\n}\n\n.dropup,\n.dropright,\n.dropdown,\n.dropleft {\n  position: relative;\n}\n\n.dropdown-toggle::after {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-left: 0.255em;\n  vertical-align: 0.255em;\n  content: "";\n  border-top: 0.3em solid;\n  border-right: 0.3em solid transparent;\n  border-bottom: 0;\n  border-left: 0.3em solid transparent;\n}\n\n.dropdown-toggle:empty::after {\n  margin-left: 0;\n}\n\n.dropdown-menu {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  z-index: 1000;\n  display: none;\n  float: left;\n  min-width: 10rem;\n  padding: 0.5rem 0;\n  margin: 0.125rem 0 0;\n  font-size: 1rem;\n  color: #212529;\n  text-align: left;\n  list-style: none;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid rgba(0, 0, 0, 0.15);\n  border-radius: 0.25rem;\n}\n\n.dropdown-menu-right {\n  right: 0;\n  left: auto;\n}\n\n.dropup .dropdown-menu {\n  top: auto;\n  bottom: 100%;\n  margin-top: 0;\n  margin-bottom: 0.125rem;\n}\n\n.dropup .dropdown-toggle::after {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-left: 0.255em;\n  vertical-align: 0.255em;\n  content: "";\n  border-top: 0;\n  border-right: 0.3em solid transparent;\n  border-bottom: 0.3em solid;\n  border-left: 0.3em solid transparent;\n}\n\n.dropup .dropdown-toggle:empty::after {\n  margin-left: 0;\n}\n\n.dropright .dropdown-menu {\n  top: 0;\n  right: auto;\n  left: 100%;\n  margin-top: 0;\n  margin-left: 0.125rem;\n}\n\n.dropright .dropdown-toggle::after {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-left: 0.255em;\n  vertical-align: 0.255em;\n  content: "";\n  border-top: 0.3em solid transparent;\n  border-right: 0;\n  border-bottom: 0.3em solid transparent;\n  border-left: 0.3em solid;\n}\n\n.dropright .dropdown-toggle:empty::after {\n  margin-left: 0;\n}\n\n.dropright .dropdown-toggle::after {\n  vertical-align: 0;\n}\n\n.dropleft .dropdown-menu {\n  top: 0;\n  right: 100%;\n  left: auto;\n  margin-top: 0;\n  margin-right: 0.125rem;\n}\n\n.dropleft .dropdown-toggle::after {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-left: 0.255em;\n  vertical-align: 0.255em;\n  content: "";\n}\n\n.dropleft .dropdown-toggle::after {\n  display: none;\n}\n\n.dropleft .dropdown-toggle::before {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-right: 0.255em;\n  vertical-align: 0.255em;\n  content: "";\n  border-top: 0.3em solid transparent;\n  border-right: 0.3em solid;\n  border-bottom: 0.3em solid transparent;\n}\n\n.dropleft .dropdown-toggle:empty::after {\n  margin-left: 0;\n}\n\n.dropleft .dropdown-toggle::before {\n  vertical-align: 0;\n}\n\n.dropdown-menu[x-placement^="top"], .dropdown-menu[x-placement^="right"], .dropdown-menu[x-placement^="bottom"], .dropdown-menu[x-placement^="left"] {\n  right: auto;\n  bottom: auto;\n}\n\n.dropdown-divider {\n  height: 0;\n  margin: 0.5rem 0;\n  overflow: hidden;\n  border-top: 1px solid #e9ecef;\n}\n\n.dropdown-item {\n  display: block;\n  width: 100%;\n  padding: 0.25rem 1.5rem;\n  clear: both;\n  font-weight: 400;\n  color: #212529;\n  text-align: inherit;\n  white-space: nowrap;\n  background-color: transparent;\n  border: 0;\n}\n\n.dropdown-item:hover, .dropdown-item:focus {\n  color: #16181b;\n  text-decoration: none;\n  background-color: #f8f9fa;\n}\n\n.dropdown-item.active, .dropdown-item:active {\n  color: #fff;\n  text-decoration: none;\n  background-color: #007bff;\n}\n\n.dropdown-item.disabled, .dropdown-item:disabled {\n  color: #6c757d;\n  background-color: transparent;\n}\n\n.dropdown-menu.show {\n  display: block;\n}\n\n.dropdown-header {\n  display: block;\n  padding: 0.5rem 1.5rem;\n  margin-bottom: 0;\n  font-size: 0.875rem;\n  color: #6c757d;\n  white-space: nowrap;\n}\n\n.dropdown-item-text {\n  display: block;\n  padding: 0.25rem 1.5rem;\n  color: #212529;\n}\n\n.btn-group,\n.btn-group-vertical {\n  position: relative;\n  display: -ms-inline-flexbox;\n  display: inline-flex;\n  vertical-align: middle;\n}\n\n.btn-group > .btn,\n.btn-group-vertical > .btn {\n  position: relative;\n  -ms-flex: 0 1 auto;\n  flex: 0 1 auto;\n}\n\n.btn-group > .btn:hover,\n.btn-group-vertical > .btn:hover {\n  z-index: 1;\n}\n\n.btn-group > .btn:focus, .btn-group > .btn:active, .btn-group > .btn.active,\n.btn-group-vertical > .btn:focus,\n.btn-group-vertical > .btn:active,\n.btn-group-vertical > .btn.active {\n  z-index: 1;\n}\n\n.btn-group .btn + .btn,\n.btn-group .btn + .btn-group,\n.btn-group .btn-group + .btn,\n.btn-group .btn-group + .btn-group,\n.btn-group-vertical .btn + .btn,\n.btn-group-vertical .btn + .btn-group,\n.btn-group-vertical .btn-group + .btn,\n.btn-group-vertical .btn-group + .btn-group {\n  margin-left: -1px;\n}\n\n.btn-toolbar {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  -ms-flex-pack: start;\n  justify-content: flex-start;\n}\n\n.btn-toolbar .input-group {\n  width: auto;\n}\n\n.btn-group > .btn:first-child {\n  margin-left: 0;\n}\n\n.btn-group > .btn:not(:last-child):not(.dropdown-toggle),\n.btn-group > .btn-group:not(:last-child) > .btn {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n\n.btn-group > .btn:not(:first-child),\n.btn-group > .btn-group:not(:first-child) > .btn {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.dropdown-toggle-split {\n  padding-right: 0.5625rem;\n  padding-left: 0.5625rem;\n}\n\n.dropdown-toggle-split::after,\n.dropup .dropdown-toggle-split::after,\n.dropright .dropdown-toggle-split::after {\n  margin-left: 0;\n}\n\n.dropleft .dropdown-toggle-split::before {\n  margin-right: 0;\n}\n\n.btn-sm + .dropdown-toggle-split, .btn-group-sm > .btn + .dropdown-toggle-split {\n  padding-right: 0.375rem;\n  padding-left: 0.375rem;\n}\n\n.btn-lg + .dropdown-toggle-split, .btn-group-lg > .btn + .dropdown-toggle-split {\n  padding-right: 0.75rem;\n  padding-left: 0.75rem;\n}\n\n.btn-group-vertical {\n  -ms-flex-direction: column;\n  flex-direction: column;\n  -ms-flex-align: start;\n  align-items: flex-start;\n  -ms-flex-pack: center;\n  justify-content: center;\n}\n\n.btn-group-vertical .btn,\n.btn-group-vertical .btn-group {\n  width: 100%;\n}\n\n.btn-group-vertical > .btn + .btn,\n.btn-group-vertical > .btn + .btn-group,\n.btn-group-vertical > .btn-group + .btn,\n.btn-group-vertical > .btn-group + .btn-group {\n  margin-top: -1px;\n  margin-left: 0;\n}\n\n.btn-group-vertical > .btn:not(:last-child):not(.dropdown-toggle),\n.btn-group-vertical > .btn-group:not(:last-child) > .btn {\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.btn-group-vertical > .btn:not(:first-child),\n.btn-group-vertical > .btn-group:not(:first-child) > .btn {\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n\n.btn-group-toggle > .btn,\n.btn-group-toggle > .btn-group > .btn {\n  margin-bottom: 0;\n}\n\n.btn-group-toggle > .btn input[type="radio"],\n.btn-group-toggle > .btn input[type="checkbox"],\n.btn-group-toggle > .btn-group > .btn input[type="radio"],\n.btn-group-toggle > .btn-group > .btn input[type="checkbox"] {\n  position: absolute;\n  clip: rect(0, 0, 0, 0);\n  pointer-events: none;\n}\n\n.input-group {\n  position: relative;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  -ms-flex-align: stretch;\n  align-items: stretch;\n  width: 100%;\n}\n\n.input-group > .form-control,\n.input-group > .custom-select,\n.input-group > .custom-file {\n  position: relative;\n  -ms-flex: 1 1 auto;\n  flex: 1 1 auto;\n  width: 1%;\n  margin-bottom: 0;\n}\n\n.input-group > .form-control + .form-control,\n.input-group > .form-control + .custom-select,\n.input-group > .form-control + .custom-file,\n.input-group > .custom-select + .form-control,\n.input-group > .custom-select + .custom-select,\n.input-group > .custom-select + .custom-file,\n.input-group > .custom-file + .form-control,\n.input-group > .custom-file + .custom-select,\n.input-group > .custom-file + .custom-file {\n  margin-left: -1px;\n}\n\n.input-group > .form-control:focus,\n.input-group > .custom-select:focus,\n.input-group > .custom-file .custom-file-input:focus ~ .custom-file-label {\n  z-index: 3;\n}\n\n.input-group > .custom-file .custom-file-input:focus {\n  z-index: 4;\n}\n\n.input-group > .form-control:not(:last-child),\n.input-group > .custom-select:not(:last-child) {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n\n.input-group > .form-control:not(:first-child),\n.input-group > .custom-select:not(:first-child) {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.input-group > .custom-file {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-align: center;\n  align-items: center;\n}\n\n.input-group > .custom-file:not(:last-child) .custom-file-label,\n.input-group > .custom-file:not(:last-child) .custom-file-label::after {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n\n.input-group > .custom-file:not(:first-child) .custom-file-label {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.input-group-prepend,\n.input-group-append {\n  display: -ms-flexbox;\n  display: flex;\n}\n\n.input-group-prepend .btn,\n.input-group-append .btn {\n  position: relative;\n  z-index: 2;\n}\n\n.input-group-prepend .btn + .btn,\n.input-group-prepend .btn + .input-group-text,\n.input-group-prepend .input-group-text + .input-group-text,\n.input-group-prepend .input-group-text + .btn,\n.input-group-append .btn + .btn,\n.input-group-append .btn + .input-group-text,\n.input-group-append .input-group-text + .input-group-text,\n.input-group-append .input-group-text + .btn {\n  margin-left: -1px;\n}\n\n.input-group-prepend {\n  margin-right: -1px;\n}\n\n.input-group-append {\n  margin-left: -1px;\n}\n\n.input-group-text {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-align: center;\n  align-items: center;\n  padding: 0.375rem 0.75rem;\n  margin-bottom: 0;\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 1.5;\n  color: #495057;\n  text-align: center;\n  white-space: nowrap;\n  background-color: #e9ecef;\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem;\n}\n\n.input-group-text input[type="radio"],\n.input-group-text input[type="checkbox"] {\n  margin-top: 0;\n}\n\n.input-group-lg > .form-control,\n.input-group-lg > .input-group-prepend > .input-group-text,\n.input-group-lg > .input-group-append > .input-group-text,\n.input-group-lg > .input-group-prepend > .btn,\n.input-group-lg > .input-group-append > .btn {\n  height: calc(2.875rem + 2px);\n  padding: 0.5rem 1rem;\n  font-size: 1.25rem;\n  line-height: 1.5;\n  border-radius: 0.3rem;\n}\n\n.input-group-sm > .form-control,\n.input-group-sm > .input-group-prepend > .input-group-text,\n.input-group-sm > .input-group-append > .input-group-text,\n.input-group-sm > .input-group-prepend > .btn,\n.input-group-sm > .input-group-append > .btn {\n  height: calc(1.8125rem + 2px);\n  padding: 0.25rem 0.5rem;\n  font-size: 0.875rem;\n  line-height: 1.5;\n  border-radius: 0.2rem;\n}\n\n.input-group > .input-group-prepend > .btn,\n.input-group > .input-group-prepend > .input-group-text,\n.input-group > .input-group-append:not(:last-child) > .btn,\n.input-group > .input-group-append:not(:last-child) > .input-group-text,\n.input-group > .input-group-append:last-child > .btn:not(:last-child):not(.dropdown-toggle),\n.input-group > .input-group-append:last-child > .input-group-text:not(:last-child) {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n\n.input-group > .input-group-append > .btn,\n.input-group > .input-group-append > .input-group-text,\n.input-group > .input-group-prepend:not(:first-child) > .btn,\n.input-group > .input-group-prepend:not(:first-child) > .input-group-text,\n.input-group > .input-group-prepend:first-child > .btn:not(:first-child),\n.input-group > .input-group-prepend:first-child > .input-group-text:not(:first-child) {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.custom-control {\n  position: relative;\n  display: block;\n  min-height: 1.5rem;\n  padding-left: 1.5rem;\n}\n\n.custom-control-inline {\n  display: -ms-inline-flexbox;\n  display: inline-flex;\n  margin-right: 1rem;\n}\n\n.custom-control-input {\n  position: absolute;\n  z-index: -1;\n  opacity: 0;\n}\n\n.custom-control-input:checked ~ .custom-control-label::before {\n  color: #fff;\n  background-color: #007bff;\n}\n\n.custom-control-input:focus ~ .custom-control-label::before {\n  box-shadow: 0 0 0 1px #fff, 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n.custom-control-input:active ~ .custom-control-label::before {\n  color: #fff;\n  background-color: #b3d7ff;\n}\n\n.custom-control-input:disabled ~ .custom-control-label {\n  color: #6c757d;\n}\n\n.custom-control-input:disabled ~ .custom-control-label::before {\n  background-color: #e9ecef;\n}\n\n.custom-control-label {\n  position: relative;\n  margin-bottom: 0;\n}\n\n.custom-control-label::before {\n  position: absolute;\n  top: 0.25rem;\n  left: -1.5rem;\n  display: block;\n  width: 1rem;\n  height: 1rem;\n  pointer-events: none;\n  content: "";\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  background-color: #dee2e6;\n}\n\n.custom-control-label::after {\n  position: absolute;\n  top: 0.25rem;\n  left: -1.5rem;\n  display: block;\n  width: 1rem;\n  height: 1rem;\n  content: "";\n  background-repeat: no-repeat;\n  background-position: center center;\n  background-size: 50% 50%;\n}\n\n.custom-checkbox .custom-control-label::before {\n  border-radius: 0.25rem;\n}\n\n.custom-checkbox .custom-control-input:checked ~ .custom-control-label::before {\n  background-color: #007bff;\n}\n\n.custom-checkbox .custom-control-input:checked ~ .custom-control-label::after {\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 8 8\'%3E%3Cpath fill=\'%23fff\' d=\'M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z\'/%3E%3C/svg%3E");\n}\n\n.custom-checkbox .custom-control-input:indeterminate ~ .custom-control-label::before {\n  background-color: #007bff;\n}\n\n.custom-checkbox .custom-control-input:indeterminate ~ .custom-control-label::after {\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 4 4\'%3E%3Cpath stroke=\'%23fff\' d=\'M0 2h4\'/%3E%3C/svg%3E");\n}\n\n.custom-checkbox .custom-control-input:disabled:checked ~ .custom-control-label::before {\n  background-color: rgba(0, 123, 255, 0.5);\n}\n\n.custom-checkbox .custom-control-input:disabled:indeterminate ~ .custom-control-label::before {\n  background-color: rgba(0, 123, 255, 0.5);\n}\n\n.custom-radio .custom-control-label::before {\n  border-radius: 50%;\n}\n\n.custom-radio .custom-control-input:checked ~ .custom-control-label::before {\n  background-color: #007bff;\n}\n\n.custom-radio .custom-control-input:checked ~ .custom-control-label::after {\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'-4 -4 8 8\'%3E%3Ccircle r=\'3\' fill=\'%23fff\'/%3E%3C/svg%3E");\n}\n\n.custom-radio .custom-control-input:disabled:checked ~ .custom-control-label::before {\n  background-color: rgba(0, 123, 255, 0.5);\n}\n\n.custom-select {\n  display: inline-block;\n  width: 100%;\n  height: calc(2.25rem + 2px);\n  padding: 0.375rem 1.75rem 0.375rem 0.75rem;\n  line-height: 1.5;\n  color: #495057;\n  vertical-align: middle;\n  background: #fff url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' viewBox=\'0 0 4 5\'%3E%3Cpath fill=\'%23343a40\' d=\'M2 0L0 2h4zm0 5L0 3h4z\'/%3E%3C/svg%3E") no-repeat right 0.75rem center;\n  background-size: 8px 10px;\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n}\n\n.custom-select:focus {\n  border-color: #80bdff;\n  outline: 0;\n  box-shadow: 0 0 0 0.2rem rgba(128, 189, 255, 0.5);\n}\n\n.custom-select:focus::-ms-value {\n  color: #495057;\n  background-color: #fff;\n}\n\n.custom-select[multiple], .custom-select[size]:not([size="1"]) {\n  height: auto;\n  padding-right: 0.75rem;\n  background-image: none;\n}\n\n.custom-select:disabled {\n  color: #6c757d;\n  background-color: #e9ecef;\n}\n\n.custom-select::-ms-expand {\n  opacity: 0;\n}\n\n.custom-select-sm {\n  height: calc(1.8125rem + 2px);\n  padding-top: 0.375rem;\n  padding-bottom: 0.375rem;\n  font-size: 75%;\n}\n\n.custom-select-lg {\n  height: calc(2.875rem + 2px);\n  padding-top: 0.375rem;\n  padding-bottom: 0.375rem;\n  font-size: 125%;\n}\n\n.custom-file {\n  position: relative;\n  display: inline-block;\n  width: 100%;\n  height: calc(2.25rem + 2px);\n  margin-bottom: 0;\n}\n\n.custom-file-input {\n  position: relative;\n  z-index: 2;\n  width: 100%;\n  height: calc(2.25rem + 2px);\n  margin: 0;\n  opacity: 0;\n}\n\n.custom-file-input:focus ~ .custom-file-label {\n  border-color: #80bdff;\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n.custom-file-input:focus ~ .custom-file-label::after {\n  border-color: #80bdff;\n}\n\n.custom-file-input:disabled ~ .custom-file-label {\n  background-color: #e9ecef;\n}\n\n.custom-file-input:lang(en) ~ .custom-file-label::after {\n  content: "Browse";\n}\n\n.custom-file-label {\n  position: absolute;\n  top: 0;\n  right: 0;\n  left: 0;\n  z-index: 1;\n  height: calc(2.25rem + 2px);\n  padding: 0.375rem 0.75rem;\n  line-height: 1.5;\n  color: #495057;\n  background-color: #fff;\n  border: 1px solid #ced4da;\n  border-radius: 0.25rem;\n}\n\n.custom-file-label::after {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  z-index: 3;\n  display: block;\n  height: 2.25rem;\n  padding: 0.375rem 0.75rem;\n  line-height: 1.5;\n  color: #495057;\n  content: "Browse";\n  background-color: #e9ecef;\n  border-left: 1px solid #ced4da;\n  border-radius: 0 0.25rem 0.25rem 0;\n}\n\n.custom-range {\n  width: 100%;\n  padding-left: 0;\n  background-color: transparent;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n  appearance: none;\n}\n\n.custom-range:focus {\n  outline: none;\n}\n\n.custom-range:focus::-webkit-slider-thumb {\n  box-shadow: 0 0 0 1px #fff, 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n.custom-range:focus::-moz-range-thumb {\n  box-shadow: 0 0 0 1px #fff, 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n.custom-range:focus::-ms-thumb {\n  box-shadow: 0 0 0 1px #fff, 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n.custom-range::-moz-focus-outer {\n  border: 0;\n}\n\n.custom-range::-webkit-slider-thumb {\n  width: 1rem;\n  height: 1rem;\n  margin-top: -0.25rem;\n  background-color: #007bff;\n  border: 0;\n  border-radius: 1rem;\n  transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n  -webkit-appearance: none;\n  appearance: none;\n}\n\n@media screen and (prefers-reduced-motion: reduce) {\n  .custom-range::-webkit-slider-thumb {\n    transition: none;\n  }\n}\n\n.custom-range::-webkit-slider-thumb:active {\n  background-color: #b3d7ff;\n}\n\n.custom-range::-webkit-slider-runnable-track {\n  width: 100%;\n  height: 0.5rem;\n  color: transparent;\n  cursor: pointer;\n  background-color: #dee2e6;\n  border-color: transparent;\n  border-radius: 1rem;\n}\n\n.custom-range::-moz-range-thumb {\n  width: 1rem;\n  height: 1rem;\n  background-color: #007bff;\n  border: 0;\n  border-radius: 1rem;\n  transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n  -moz-appearance: none;\n  appearance: none;\n}\n\n@media screen and (prefers-reduced-motion: reduce) {\n  .custom-range::-moz-range-thumb {\n    transition: none;\n  }\n}\n\n.custom-range::-moz-range-thumb:active {\n  background-color: #b3d7ff;\n}\n\n.custom-range::-moz-range-track {\n  width: 100%;\n  height: 0.5rem;\n  color: transparent;\n  cursor: pointer;\n  background-color: #dee2e6;\n  border-color: transparent;\n  border-radius: 1rem;\n}\n\n.custom-range::-ms-thumb {\n  width: 1rem;\n  height: 1rem;\n  margin-top: 0;\n  margin-right: 0.2rem;\n  margin-left: 0.2rem;\n  background-color: #007bff;\n  border: 0;\n  border-radius: 1rem;\n  transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n  appearance: none;\n}\n\n@media screen and (prefers-reduced-motion: reduce) {\n  .custom-range::-ms-thumb {\n    transition: none;\n  }\n}\n\n.custom-range::-ms-thumb:active {\n  background-color: #b3d7ff;\n}\n\n.custom-range::-ms-track {\n  width: 100%;\n  height: 0.5rem;\n  color: transparent;\n  cursor: pointer;\n  background-color: transparent;\n  border-color: transparent;\n  border-width: 0.5rem;\n}\n\n.custom-range::-ms-fill-lower {\n  background-color: #dee2e6;\n  border-radius: 1rem;\n}\n\n.custom-range::-ms-fill-upper {\n  margin-right: 15px;\n  background-color: #dee2e6;\n  border-radius: 1rem;\n}\n\n.custom-control-label::before,\n.custom-file-label,\n.custom-select {\n  transition: background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n}\n\n@media screen and (prefers-reduced-motion: reduce) {\n  .custom-control-label::before,\n  .custom-file-label,\n  .custom-select {\n    transition: none;\n  }\n}\n\n.nav {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  padding-left: 0;\n  margin-bottom: 0;\n  list-style: none;\n}\n\n.nav-link {\n  display: block;\n  padding: 0.5rem 1rem;\n}\n\n.nav-link:hover, .nav-link:focus {\n  text-decoration: none;\n}\n\n.nav-link.disabled {\n  color: #6c757d;\n}\n\n.nav-tabs {\n  border-bottom: 1px solid #dee2e6;\n}\n\n.nav-tabs .nav-item {\n  margin-bottom: -1px;\n}\n\n.nav-tabs .nav-link {\n  border: 1px solid transparent;\n  border-top-left-radius: 0.25rem;\n  border-top-right-radius: 0.25rem;\n}\n\n.nav-tabs .nav-link:hover, .nav-tabs .nav-link:focus {\n  border-color: #e9ecef #e9ecef #dee2e6;\n}\n\n.nav-tabs .nav-link.disabled {\n  color: #6c757d;\n  background-color: transparent;\n  border-color: transparent;\n}\n\n.nav-tabs .nav-link.active,\n.nav-tabs .nav-item.show .nav-link {\n  color: #495057;\n  background-color: #fff;\n  border-color: #dee2e6 #dee2e6 #fff;\n}\n\n.nav-tabs .dropdown-menu {\n  margin-top: -1px;\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n\n.nav-pills .nav-link {\n  border-radius: 0.25rem;\n}\n\n.nav-pills .nav-link.active,\n.nav-pills .show > .nav-link {\n  color: #fff;\n  background-color: #007bff;\n}\n\n.nav-fill .nav-item {\n  -ms-flex: 1 1 auto;\n  flex: 1 1 auto;\n  text-align: center;\n}\n\n.nav-justified .nav-item {\n  -ms-flex-preferred-size: 0;\n  flex-basis: 0;\n  -ms-flex-positive: 1;\n  flex-grow: 1;\n  text-align: center;\n}\n\n.tab-content > .tab-pane {\n  display: none;\n}\n\n.tab-content > .active {\n  display: block;\n}\n\n.navbar {\n  position: relative;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  -ms-flex-align: center;\n  align-items: center;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n  padding: 0.5rem 1rem;\n}\n\n.navbar > .container,\n.navbar > .container-fluid {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  -ms-flex-align: center;\n  align-items: center;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n}\n\n.navbar-brand {\n  display: inline-block;\n  padding-top: 0.3125rem;\n  padding-bottom: 0.3125rem;\n  margin-right: 1rem;\n  font-size: 1.25rem;\n  line-height: inherit;\n  white-space: nowrap;\n}\n\n.navbar-brand:hover, .navbar-brand:focus {\n  text-decoration: none;\n}\n\n.navbar-nav {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  padding-left: 0;\n  margin-bottom: 0;\n  list-style: none;\n}\n\n.navbar-nav .nav-link {\n  padding-right: 0;\n  padding-left: 0;\n}\n\n.navbar-nav .dropdown-menu {\n  position: static;\n  float: none;\n}\n\n.navbar-text {\n  display: inline-block;\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\n\n.navbar-collapse {\n  -ms-flex-preferred-size: 100%;\n  flex-basis: 100%;\n  -ms-flex-positive: 1;\n  flex-grow: 1;\n  -ms-flex-align: center;\n  align-items: center;\n}\n\n.navbar-toggler {\n  padding: 0.25rem 0.75rem;\n  font-size: 1.25rem;\n  line-height: 1;\n  background-color: transparent;\n  border: 1px solid transparent;\n  border-radius: 0.25rem;\n}\n\n.navbar-toggler:hover, .navbar-toggler:focus {\n  text-decoration: none;\n}\n\n.navbar-toggler:not(:disabled):not(.disabled) {\n  cursor: pointer;\n}\n\n.navbar-toggler-icon {\n  display: inline-block;\n  width: 1.5em;\n  height: 1.5em;\n  vertical-align: middle;\n  content: "";\n  background: no-repeat center center;\n  background-size: 100% 100%;\n}\n\n@media (max-width: 575.98px) {\n  .navbar-expand-sm > .container,\n  .navbar-expand-sm > .container-fluid {\n    padding-right: 0;\n    padding-left: 0;\n  }\n}\n\n@media (min-width: 576px) {\n  .navbar-expand-sm {\n    -ms-flex-flow: row nowrap;\n    flex-flow: row nowrap;\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n  }\n  .navbar-expand-sm .navbar-nav {\n    -ms-flex-direction: row;\n    flex-direction: row;\n  }\n  .navbar-expand-sm .navbar-nav .dropdown-menu {\n    position: absolute;\n  }\n  .navbar-expand-sm .navbar-nav .nav-link {\n    padding-right: 0.5rem;\n    padding-left: 0.5rem;\n  }\n  .navbar-expand-sm > .container,\n  .navbar-expand-sm > .container-fluid {\n    -ms-flex-wrap: nowrap;\n    flex-wrap: nowrap;\n  }\n  .navbar-expand-sm .navbar-collapse {\n    display: -ms-flexbox !important;\n    display: flex !important;\n    -ms-flex-preferred-size: auto;\n    flex-basis: auto;\n  }\n  .navbar-expand-sm .navbar-toggler {\n    display: none;\n  }\n}\n\n@media (max-width: 767.98px) {\n  .navbar-expand-md > .container,\n  .navbar-expand-md > .container-fluid {\n    padding-right: 0;\n    padding-left: 0;\n  }\n}\n\n@media (min-width: 768px) {\n  .navbar-expand-md {\n    -ms-flex-flow: row nowrap;\n    flex-flow: row nowrap;\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n  }\n  .navbar-expand-md .navbar-nav {\n    -ms-flex-direction: row;\n    flex-direction: row;\n  }\n  .navbar-expand-md .navbar-nav .dropdown-menu {\n    position: absolute;\n  }\n  .navbar-expand-md .navbar-nav .nav-link {\n    padding-right: 0.5rem;\n    padding-left: 0.5rem;\n  }\n  .navbar-expand-md > .container,\n  .navbar-expand-md > .container-fluid {\n    -ms-flex-wrap: nowrap;\n    flex-wrap: nowrap;\n  }\n  .navbar-expand-md .navbar-collapse {\n    display: -ms-flexbox !important;\n    display: flex !important;\n    -ms-flex-preferred-size: auto;\n    flex-basis: auto;\n  }\n  .navbar-expand-md .navbar-toggler {\n    display: none;\n  }\n}\n\n@media (max-width: 991.98px) {\n  .navbar-expand-lg > .container,\n  .navbar-expand-lg > .container-fluid {\n    padding-right: 0;\n    padding-left: 0;\n  }\n}\n\n@media (min-width: 992px) {\n  .navbar-expand-lg {\n    -ms-flex-flow: row nowrap;\n    flex-flow: row nowrap;\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n  }\n  .navbar-expand-lg .navbar-nav {\n    -ms-flex-direction: row;\n    flex-direction: row;\n  }\n  .navbar-expand-lg .navbar-nav .dropdown-menu {\n    position: absolute;\n  }\n  .navbar-expand-lg .navbar-nav .nav-link {\n    padding-right: 0.5rem;\n    padding-left: 0.5rem;\n  }\n  .navbar-expand-lg > .container,\n  .navbar-expand-lg > .container-fluid {\n    -ms-flex-wrap: nowrap;\n    flex-wrap: nowrap;\n  }\n  .navbar-expand-lg .navbar-collapse {\n    display: -ms-flexbox !important;\n    display: flex !important;\n    -ms-flex-preferred-size: auto;\n    flex-basis: auto;\n  }\n  .navbar-expand-lg .navbar-toggler {\n    display: none;\n  }\n}\n\n@media (max-width: 1199.98px) {\n  .navbar-expand-xl > .container,\n  .navbar-expand-xl > .container-fluid {\n    padding-right: 0;\n    padding-left: 0;\n  }\n}\n\n@media (min-width: 1200px) {\n  .navbar-expand-xl {\n    -ms-flex-flow: row nowrap;\n    flex-flow: row nowrap;\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n  }\n  .navbar-expand-xl .navbar-nav {\n    -ms-flex-direction: row;\n    flex-direction: row;\n  }\n  .navbar-expand-xl .navbar-nav .dropdown-menu {\n    position: absolute;\n  }\n  .navbar-expand-xl .navbar-nav .nav-link {\n    padding-right: 0.5rem;\n    padding-left: 0.5rem;\n  }\n  .navbar-expand-xl > .container,\n  .navbar-expand-xl > .container-fluid {\n    -ms-flex-wrap: nowrap;\n    flex-wrap: nowrap;\n  }\n  .navbar-expand-xl .navbar-collapse {\n    display: -ms-flexbox !important;\n    display: flex !important;\n    -ms-flex-preferred-size: auto;\n    flex-basis: auto;\n  }\n  .navbar-expand-xl .navbar-toggler {\n    display: none;\n  }\n}\n\n.navbar-expand {\n  -ms-flex-flow: row nowrap;\n  flex-flow: row nowrap;\n  -ms-flex-pack: start;\n  justify-content: flex-start;\n}\n\n.navbar-expand > .container,\n.navbar-expand > .container-fluid {\n  padding-right: 0;\n  padding-left: 0;\n}\n\n.navbar-expand .navbar-nav {\n  -ms-flex-direction: row;\n  flex-direction: row;\n}\n\n.navbar-expand .navbar-nav .dropdown-menu {\n  position: absolute;\n}\n\n.navbar-expand .navbar-nav .nav-link {\n  padding-right: 0.5rem;\n  padding-left: 0.5rem;\n}\n\n.navbar-expand > .container,\n.navbar-expand > .container-fluid {\n  -ms-flex-wrap: nowrap;\n  flex-wrap: nowrap;\n}\n\n.navbar-expand .navbar-collapse {\n  display: -ms-flexbox !important;\n  display: flex !important;\n  -ms-flex-preferred-size: auto;\n  flex-basis: auto;\n}\n\n.navbar-expand .navbar-toggler {\n  display: none;\n}\n\n.navbar-light .navbar-brand {\n  color: rgba(0, 0, 0, 0.9);\n}\n\n.navbar-light .navbar-brand:hover, .navbar-light .navbar-brand:focus {\n  color: rgba(0, 0, 0, 0.9);\n}\n\n.navbar-light .navbar-nav .nav-link {\n  color: rgba(0, 0, 0, 0.5);\n}\n\n.navbar-light .navbar-nav .nav-link:hover, .navbar-light .navbar-nav .nav-link:focus {\n  color: rgba(0, 0, 0, 0.7);\n}\n\n.navbar-light .navbar-nav .nav-link.disabled {\n  color: rgba(0, 0, 0, 0.3);\n}\n\n.navbar-light .navbar-nav .show > .nav-link,\n.navbar-light .navbar-nav .active > .nav-link,\n.navbar-light .navbar-nav .nav-link.show,\n.navbar-light .navbar-nav .nav-link.active {\n  color: rgba(0, 0, 0, 0.9);\n}\n\n.navbar-light .navbar-toggler {\n  color: rgba(0, 0, 0, 0.5);\n  border-color: rgba(0, 0, 0, 0.1);\n}\n\n.navbar-light .navbar-toggler-icon {\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg viewBox=\'0 0 30 30\' xmlns=\'http://www.w3.org/2000/svg\'%3E%3Cpath stroke=\'rgba(0, 0, 0, 0.5)\' stroke-width=\'2\' stroke-linecap=\'round\' stroke-miterlimit=\'10\' d=\'M4 7h22M4 15h22M4 23h22\'/%3E%3C/svg%3E");\n}\n\n.navbar-light .navbar-text {\n  color: rgba(0, 0, 0, 0.5);\n}\n\n.navbar-light .navbar-text a {\n  color: rgba(0, 0, 0, 0.9);\n}\n\n.navbar-light .navbar-text a:hover, .navbar-light .navbar-text a:focus {\n  color: rgba(0, 0, 0, 0.9);\n}\n\n.navbar-dark .navbar-brand {\n  color: #fff;\n}\n\n.navbar-dark .navbar-brand:hover, .navbar-dark .navbar-brand:focus {\n  color: #fff;\n}\n\n.navbar-dark .navbar-nav .nav-link {\n  color: rgba(255, 255, 255, 0.5);\n}\n\n.navbar-dark .navbar-nav .nav-link:hover, .navbar-dark .navbar-nav .nav-link:focus {\n  color: rgba(255, 255, 255, 0.75);\n}\n\n.navbar-dark .navbar-nav .nav-link.disabled {\n  color: rgba(255, 255, 255, 0.25);\n}\n\n.navbar-dark .navbar-nav .show > .nav-link,\n.navbar-dark .navbar-nav .active > .nav-link,\n.navbar-dark .navbar-nav .nav-link.show,\n.navbar-dark .navbar-nav .nav-link.active {\n  color: #fff;\n}\n\n.navbar-dark .navbar-toggler {\n  color: rgba(255, 255, 255, 0.5);\n  border-color: rgba(255, 255, 255, 0.1);\n}\n\n.navbar-dark .navbar-toggler-icon {\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg viewBox=\'0 0 30 30\' xmlns=\'http://www.w3.org/2000/svg\'%3E%3Cpath stroke=\'rgba(255, 255, 255, 0.5)\' stroke-width=\'2\' stroke-linecap=\'round\' stroke-miterlimit=\'10\' d=\'M4 7h22M4 15h22M4 23h22\'/%3E%3C/svg%3E");\n}\n\n.navbar-dark .navbar-text {\n  color: rgba(255, 255, 255, 0.5);\n}\n\n.navbar-dark .navbar-text a {\n  color: #fff;\n}\n\n.navbar-dark .navbar-text a:hover, .navbar-dark .navbar-text a:focus {\n  color: #fff;\n}\n\n.card {\n  position: relative;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  min-width: 0;\n  word-wrap: break-word;\n  background-color: #fff;\n  background-clip: border-box;\n  border: 1px solid rgba(0, 0, 0, 0.125);\n  border-radius: 0.25rem;\n}\n\n.card > hr {\n  margin-right: 0;\n  margin-left: 0;\n}\n\n.card > .list-group:first-child .list-group-item:first-child {\n  border-top-left-radius: 0.25rem;\n  border-top-right-radius: 0.25rem;\n}\n\n.card > .list-group:last-child .list-group-item:last-child {\n  border-bottom-right-radius: 0.25rem;\n  border-bottom-left-radius: 0.25rem;\n}\n\n.card-body {\n  -ms-flex: 1 1 auto;\n  flex: 1 1 auto;\n  padding: 1.25rem;\n}\n\n.card-title {\n  margin-bottom: 0.75rem;\n}\n\n.card-subtitle {\n  margin-top: -0.375rem;\n  margin-bottom: 0;\n}\n\n.card-text:last-child {\n  margin-bottom: 0;\n}\n\n.card-link:hover {\n  text-decoration: none;\n}\n\n.card-link + .card-link {\n  margin-left: 1.25rem;\n}\n\n.card-header {\n  padding: 0.75rem 1.25rem;\n  margin-bottom: 0;\n  background-color: rgba(0, 0, 0, 0.03);\n  border-bottom: 1px solid rgba(0, 0, 0, 0.125);\n}\n\n.card-header:first-child {\n  border-radius: calc(0.25rem - 1px) calc(0.25rem - 1px) 0 0;\n}\n\n.card-header + .list-group .list-group-item:first-child {\n  border-top: 0;\n}\n\n.card-footer {\n  padding: 0.75rem 1.25rem;\n  background-color: rgba(0, 0, 0, 0.03);\n  border-top: 1px solid rgba(0, 0, 0, 0.125);\n}\n\n.card-footer:last-child {\n  border-radius: 0 0 calc(0.25rem - 1px) calc(0.25rem - 1px);\n}\n\n.card-header-tabs {\n  margin-right: -0.625rem;\n  margin-bottom: -0.75rem;\n  margin-left: -0.625rem;\n  border-bottom: 0;\n}\n\n.card-header-pills {\n  margin-right: -0.625rem;\n  margin-left: -0.625rem;\n}\n\n.card-img-overlay {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  padding: 1.25rem;\n}\n\n.card-img {\n  width: 100%;\n  border-radius: calc(0.25rem - 1px);\n}\n\n.card-img-top {\n  width: 100%;\n  border-top-left-radius: calc(0.25rem - 1px);\n  border-top-right-radius: calc(0.25rem - 1px);\n}\n\n.card-img-bottom {\n  width: 100%;\n  border-bottom-right-radius: calc(0.25rem - 1px);\n  border-bottom-left-radius: calc(0.25rem - 1px);\n}\n\n.card-deck {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-direction: column;\n  flex-direction: column;\n}\n\n.card-deck .card {\n  margin-bottom: 15px;\n}\n\n@media (min-width: 576px) {\n  .card-deck {\n    -ms-flex-flow: row wrap;\n    flex-flow: row wrap;\n    margin-right: -15px;\n    margin-left: -15px;\n  }\n  .card-deck .card {\n    display: -ms-flexbox;\n    display: flex;\n    -ms-flex: 1 0 0%;\n    flex: 1 0 0%;\n    -ms-flex-direction: column;\n    flex-direction: column;\n    margin-right: 15px;\n    margin-bottom: 0;\n    margin-left: 15px;\n  }\n}\n\n.card-group {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-direction: column;\n  flex-direction: column;\n}\n\n.card-group > .card {\n  margin-bottom: 15px;\n}\n\n@media (min-width: 576px) {\n  .card-group {\n    -ms-flex-flow: row wrap;\n    flex-flow: row wrap;\n  }\n  .card-group > .card {\n    -ms-flex: 1 0 0%;\n    flex: 1 0 0%;\n    margin-bottom: 0;\n  }\n  .card-group > .card + .card {\n    margin-left: 0;\n    border-left: 0;\n  }\n  .card-group > .card:first-child {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n  }\n  .card-group > .card:first-child .card-img-top,\n  .card-group > .card:first-child .card-header {\n    border-top-right-radius: 0;\n  }\n  .card-group > .card:first-child .card-img-bottom,\n  .card-group > .card:first-child .card-footer {\n    border-bottom-right-radius: 0;\n  }\n  .card-group > .card:last-child {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n  .card-group > .card:last-child .card-img-top,\n  .card-group > .card:last-child .card-header {\n    border-top-left-radius: 0;\n  }\n  .card-group > .card:last-child .card-img-bottom,\n  .card-group > .card:last-child .card-footer {\n    border-bottom-left-radius: 0;\n  }\n  .card-group > .card:only-child {\n    border-radius: 0.25rem;\n  }\n  .card-group > .card:only-child .card-img-top,\n  .card-group > .card:only-child .card-header {\n    border-top-left-radius: 0.25rem;\n    border-top-right-radius: 0.25rem;\n  }\n  .card-group > .card:only-child .card-img-bottom,\n  .card-group > .card:only-child .card-footer {\n    border-bottom-right-radius: 0.25rem;\n    border-bottom-left-radius: 0.25rem;\n  }\n  .card-group > .card:not(:first-child):not(:last-child):not(:only-child) {\n    border-radius: 0;\n  }\n  .card-group > .card:not(:first-child):not(:last-child):not(:only-child) .card-img-top,\n  .card-group > .card:not(:first-child):not(:last-child):not(:only-child) .card-img-bottom,\n  .card-group > .card:not(:first-child):not(:last-child):not(:only-child) .card-header,\n  .card-group > .card:not(:first-child):not(:last-child):not(:only-child) .card-footer {\n    border-radius: 0;\n  }\n}\n\n.card-columns .card {\n  margin-bottom: 0.75rem;\n}\n\n@media (min-width: 576px) {\n  .card-columns {\n    -webkit-column-count: 3;\n    -moz-column-count: 3;\n    column-count: 3;\n    -webkit-column-gap: 1.25rem;\n    -moz-column-gap: 1.25rem;\n    column-gap: 1.25rem;\n    orphans: 1;\n    widows: 1;\n  }\n  .card-columns .card {\n    display: inline-block;\n    width: 100%;\n  }\n}\n\n.accordion .card:not(:first-of-type):not(:last-of-type) {\n  border-bottom: 0;\n  border-radius: 0;\n}\n\n.accordion .card:not(:first-of-type) .card-header:first-child {\n  border-radius: 0;\n}\n\n.accordion .card:first-of-type {\n  border-bottom: 0;\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n\n.accordion .card:last-of-type {\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n\n.breadcrumb {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  padding: 0.75rem 1rem;\n  margin-bottom: 1rem;\n  list-style: none;\n  background-color: #e9ecef;\n  border-radius: 0.25rem;\n}\n\n.breadcrumb-item + .breadcrumb-item {\n  padding-left: 0.5rem;\n}\n\n.breadcrumb-item + .breadcrumb-item::before {\n  display: inline-block;\n  padding-right: 0.5rem;\n  color: #6c757d;\n  content: "/";\n}\n\n.breadcrumb-item + .breadcrumb-item:hover::before {\n  text-decoration: underline;\n}\n\n.breadcrumb-item + .breadcrumb-item:hover::before {\n  text-decoration: none;\n}\n\n.breadcrumb-item.active {\n  color: #6c757d;\n}\n\n.pagination {\n  display: -ms-flexbox;\n  display: flex;\n  padding-left: 0;\n  list-style: none;\n  border-radius: 0.25rem;\n}\n\n.page-link {\n  position: relative;\n  display: block;\n  padding: 0.5rem 0.75rem;\n  margin-left: -1px;\n  line-height: 1.25;\n  color: #007bff;\n  background-color: #fff;\n  border: 1px solid #dee2e6;\n}\n\n.page-link:hover {\n  z-index: 2;\n  color: #0056b3;\n  text-decoration: none;\n  background-color: #e9ecef;\n  border-color: #dee2e6;\n}\n\n.page-link:focus {\n  z-index: 2;\n  outline: 0;\n  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n.page-link:not(:disabled):not(.disabled) {\n  cursor: pointer;\n}\n\n.page-item:first-child .page-link {\n  margin-left: 0;\n  border-top-left-radius: 0.25rem;\n  border-bottom-left-radius: 0.25rem;\n}\n\n.page-item:last-child .page-link {\n  border-top-right-radius: 0.25rem;\n  border-bottom-right-radius: 0.25rem;\n}\n\n.page-item.active .page-link {\n  z-index: 1;\n  color: #fff;\n  background-color: #007bff;\n  border-color: #007bff;\n}\n\n.page-item.disabled .page-link {\n  color: #6c757d;\n  pointer-events: none;\n  cursor: auto;\n  background-color: #fff;\n  border-color: #dee2e6;\n}\n\n.pagination-lg .page-link {\n  padding: 0.75rem 1.5rem;\n  font-size: 1.25rem;\n  line-height: 1.5;\n}\n\n.pagination-lg .page-item:first-child .page-link {\n  border-top-left-radius: 0.3rem;\n  border-bottom-left-radius: 0.3rem;\n}\n\n.pagination-lg .page-item:last-child .page-link {\n  border-top-right-radius: 0.3rem;\n  border-bottom-right-radius: 0.3rem;\n}\n\n.pagination-sm .page-link {\n  padding: 0.25rem 0.5rem;\n  font-size: 0.875rem;\n  line-height: 1.5;\n}\n\n.pagination-sm .page-item:first-child .page-link {\n  border-top-left-radius: 0.2rem;\n  border-bottom-left-radius: 0.2rem;\n}\n\n.pagination-sm .page-item:last-child .page-link {\n  border-top-right-radius: 0.2rem;\n  border-bottom-right-radius: 0.2rem;\n}\n\n.badge {\n  display: inline-block;\n  padding: 0.25em 0.4em;\n  font-size: 75%;\n  font-weight: 700;\n  line-height: 1;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: baseline;\n  border-radius: 0.25rem;\n}\n\n.badge:empty {\n  display: none;\n}\n\n.btn .badge {\n  position: relative;\n  top: -1px;\n}\n\n.badge-pill {\n  padding-right: 0.6em;\n  padding-left: 0.6em;\n  border-radius: 10rem;\n}\n\n.badge-primary {\n  color: #fff;\n  background-color: #007bff;\n}\n\n.badge-primary[href]:hover, .badge-primary[href]:focus {\n  color: #fff;\n  text-decoration: none;\n  background-color: #0062cc;\n}\n\n.badge-secondary {\n  color: #fff;\n  background-color: #6c757d;\n}\n\n.badge-secondary[href]:hover, .badge-secondary[href]:focus {\n  color: #fff;\n  text-decoration: none;\n  background-color: #545b62;\n}\n\n.badge-success {\n  color: #fff;\n  background-color: #28a745;\n}\n\n.badge-success[href]:hover, .badge-success[href]:focus {\n  color: #fff;\n  text-decoration: none;\n  background-color: #1e7e34;\n}\n\n.badge-info {\n  color: #fff;\n  background-color: #17a2b8;\n}\n\n.badge-info[href]:hover, .badge-info[href]:focus {\n  color: #fff;\n  text-decoration: none;\n  background-color: #117a8b;\n}\n\n.badge-warning {\n  color: #212529;\n  background-color: #ffc107;\n}\n\n.badge-warning[href]:hover, .badge-warning[href]:focus {\n  color: #212529;\n  text-decoration: none;\n  background-color: #d39e00;\n}\n\n.badge-danger {\n  color: #fff;\n  background-color: #dc3545;\n}\n\n.badge-danger[href]:hover, .badge-danger[href]:focus {\n  color: #fff;\n  text-decoration: none;\n  background-color: #bd2130;\n}\n\n.badge-light {\n  color: #212529;\n  background-color: #f8f9fa;\n}\n\n.badge-light[href]:hover, .badge-light[href]:focus {\n  color: #212529;\n  text-decoration: none;\n  background-color: #dae0e5;\n}\n\n.badge-dark {\n  color: #fff;\n  background-color: #343a40;\n}\n\n.badge-dark[href]:hover, .badge-dark[href]:focus {\n  color: #fff;\n  text-decoration: none;\n  background-color: #1d2124;\n}\n\n.jumbotron {\n  padding: 2rem 1rem;\n  margin-bottom: 2rem;\n  background-color: #e9ecef;\n  border-radius: 0.3rem;\n}\n\n@media (min-width: 576px) {\n  .jumbotron {\n    padding: 4rem 2rem;\n  }\n}\n\n.jumbotron-fluid {\n  padding-right: 0;\n  padding-left: 0;\n  border-radius: 0;\n}\n\n.alert {\n  position: relative;\n  padding: 0.75rem 1.25rem;\n  margin-bottom: 1rem;\n  border: 1px solid transparent;\n  border-radius: 0.25rem;\n}\n\n.alert-heading {\n  color: inherit;\n}\n\n.alert-link {\n  font-weight: 700;\n}\n\n.alert-dismissible {\n  padding-right: 4rem;\n}\n\n.alert-dismissible .close {\n  position: absolute;\n  top: 0;\n  right: 0;\n  padding: 0.75rem 1.25rem;\n  color: inherit;\n}\n\n.alert-primary {\n  color: #004085;\n  background-color: #cce5ff;\n  border-color: #b8daff;\n}\n\n.alert-primary hr {\n  border-top-color: #9fcdff;\n}\n\n.alert-primary .alert-link {\n  color: #002752;\n}\n\n.alert-secondary {\n  color: #383d41;\n  background-color: #e2e3e5;\n  border-color: #d6d8db;\n}\n\n.alert-secondary hr {\n  border-top-color: #c8cbcf;\n}\n\n.alert-secondary .alert-link {\n  color: #202326;\n}\n\n.alert-success {\n  color: #155724;\n  background-color: #d4edda;\n  border-color: #c3e6cb;\n}\n\n.alert-success hr {\n  border-top-color: #b1dfbb;\n}\n\n.alert-success .alert-link {\n  color: #0b2e13;\n}\n\n.alert-info {\n  color: #0c5460;\n  background-color: #d1ecf1;\n  border-color: #bee5eb;\n}\n\n.alert-info hr {\n  border-top-color: #abdde5;\n}\n\n.alert-info .alert-link {\n  color: #062c33;\n}\n\n.alert-warning {\n  color: #856404;\n  background-color: #fff3cd;\n  border-color: #ffeeba;\n}\n\n.alert-warning hr {\n  border-top-color: #ffe8a1;\n}\n\n.alert-warning .alert-link {\n  color: #533f03;\n}\n\n.alert-danger {\n  color: #721c24;\n  background-color: #f8d7da;\n  border-color: #f5c6cb;\n}\n\n.alert-danger hr {\n  border-top-color: #f1b0b7;\n}\n\n.alert-danger .alert-link {\n  color: #491217;\n}\n\n.alert-light {\n  color: #818182;\n  background-color: #fefefe;\n  border-color: #fdfdfe;\n}\n\n.alert-light hr {\n  border-top-color: #ececf6;\n}\n\n.alert-light .alert-link {\n  color: #686868;\n}\n\n.alert-dark {\n  color: #1b1e21;\n  background-color: #d6d8d9;\n  border-color: #c6c8ca;\n}\n\n.alert-dark hr {\n  border-top-color: #b9bbbe;\n}\n\n.alert-dark .alert-link {\n  color: #040505;\n}\n\n@-webkit-keyframes progress-bar-stripes {\n  from {\n    background-position: 1rem 0;\n  }\n  to {\n    background-position: 0 0;\n  }\n}\n\n@keyframes progress-bar-stripes {\n  from {\n    background-position: 1rem 0;\n  }\n  to {\n    background-position: 0 0;\n  }\n}\n\n.progress {\n  display: -ms-flexbox;\n  display: flex;\n  height: 1rem;\n  overflow: hidden;\n  font-size: 0.75rem;\n  background-color: #e9ecef;\n  border-radius: 0.25rem;\n}\n\n.progress-bar {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  -ms-flex-pack: center;\n  justify-content: center;\n  color: #fff;\n  text-align: center;\n  white-space: nowrap;\n  background-color: #007bff;\n  transition: width 0.6s ease;\n}\n\n@media screen and (prefers-reduced-motion: reduce) {\n  .progress-bar {\n    transition: none;\n  }\n}\n\n.progress-bar-striped {\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-size: 1rem 1rem;\n}\n\n.progress-bar-animated {\n  -webkit-animation: progress-bar-stripes 1s linear infinite;\n  animation: progress-bar-stripes 1s linear infinite;\n}\n\n.media {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-align: start;\n  align-items: flex-start;\n}\n\n.media-body {\n  -ms-flex: 1;\n  flex: 1;\n}\n\n.list-group {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  padding-left: 0;\n  margin-bottom: 0;\n}\n\n.list-group-item-action {\n  width: 100%;\n  color: #495057;\n  text-align: inherit;\n}\n\n.list-group-item-action:hover, .list-group-item-action:focus {\n  color: #495057;\n  text-decoration: none;\n  background-color: #f8f9fa;\n}\n\n.list-group-item-action:active {\n  color: #212529;\n  background-color: #e9ecef;\n}\n\n.list-group-item {\n  position: relative;\n  display: block;\n  padding: 0.75rem 1.25rem;\n  margin-bottom: -1px;\n  background-color: #fff;\n  border: 1px solid rgba(0, 0, 0, 0.125);\n}\n\n.list-group-item:first-child {\n  border-top-left-radius: 0.25rem;\n  border-top-right-radius: 0.25rem;\n}\n\n.list-group-item:last-child {\n  margin-bottom: 0;\n  border-bottom-right-radius: 0.25rem;\n  border-bottom-left-radius: 0.25rem;\n}\n\n.list-group-item:hover, .list-group-item:focus {\n  z-index: 1;\n  text-decoration: none;\n}\n\n.list-group-item.disabled, .list-group-item:disabled {\n  color: #6c757d;\n  background-color: #fff;\n}\n\n.list-group-item.active {\n  z-index: 2;\n  color: #fff;\n  background-color: #007bff;\n  border-color: #007bff;\n}\n\n.list-group-flush .list-group-item {\n  border-right: 0;\n  border-left: 0;\n  border-radius: 0;\n}\n\n.list-group-flush:first-child .list-group-item:first-child {\n  border-top: 0;\n}\n\n.list-group-flush:last-child .list-group-item:last-child {\n  border-bottom: 0;\n}\n\n.list-group-item-primary {\n  color: #004085;\n  background-color: #b8daff;\n}\n\n.list-group-item-primary.list-group-item-action:hover, .list-group-item-primary.list-group-item-action:focus {\n  color: #004085;\n  background-color: #9fcdff;\n}\n\n.list-group-item-primary.list-group-item-action.active {\n  color: #fff;\n  background-color: #004085;\n  border-color: #004085;\n}\n\n.list-group-item-secondary {\n  color: #383d41;\n  background-color: #d6d8db;\n}\n\n.list-group-item-secondary.list-group-item-action:hover, .list-group-item-secondary.list-group-item-action:focus {\n  color: #383d41;\n  background-color: #c8cbcf;\n}\n\n.list-group-item-secondary.list-group-item-action.active {\n  color: #fff;\n  background-color: #383d41;\n  border-color: #383d41;\n}\n\n.list-group-item-success {\n  color: #155724;\n  background-color: #c3e6cb;\n}\n\n.list-group-item-success.list-group-item-action:hover, .list-group-item-success.list-group-item-action:focus {\n  color: #155724;\n  background-color: #b1dfbb;\n}\n\n.list-group-item-success.list-group-item-action.active {\n  color: #fff;\n  background-color: #155724;\n  border-color: #155724;\n}\n\n.list-group-item-info {\n  color: #0c5460;\n  background-color: #bee5eb;\n}\n\n.list-group-item-info.list-group-item-action:hover, .list-group-item-info.list-group-item-action:focus {\n  color: #0c5460;\n  background-color: #abdde5;\n}\n\n.list-group-item-info.list-group-item-action.active {\n  color: #fff;\n  background-color: #0c5460;\n  border-color: #0c5460;\n}\n\n.list-group-item-warning {\n  color: #856404;\n  background-color: #ffeeba;\n}\n\n.list-group-item-warning.list-group-item-action:hover, .list-group-item-warning.list-group-item-action:focus {\n  color: #856404;\n  background-color: #ffe8a1;\n}\n\n.list-group-item-warning.list-group-item-action.active {\n  color: #fff;\n  background-color: #856404;\n  border-color: #856404;\n}\n\n.list-group-item-danger {\n  color: #721c24;\n  background-color: #f5c6cb;\n}\n\n.list-group-item-danger.list-group-item-action:hover, .list-group-item-danger.list-group-item-action:focus {\n  color: #721c24;\n  background-color: #f1b0b7;\n}\n\n.list-group-item-danger.list-group-item-action.active {\n  color: #fff;\n  background-color: #721c24;\n  border-color: #721c24;\n}\n\n.list-group-item-light {\n  color: #818182;\n  background-color: #fdfdfe;\n}\n\n.list-group-item-light.list-group-item-action:hover, .list-group-item-light.list-group-item-action:focus {\n  color: #818182;\n  background-color: #ececf6;\n}\n\n.list-group-item-light.list-group-item-action.active {\n  color: #fff;\n  background-color: #818182;\n  border-color: #818182;\n}\n\n.list-group-item-dark {\n  color: #1b1e21;\n  background-color: #c6c8ca;\n}\n\n.list-group-item-dark.list-group-item-action:hover, .list-group-item-dark.list-group-item-action:focus {\n  color: #1b1e21;\n  background-color: #b9bbbe;\n}\n\n.list-group-item-dark.list-group-item-action.active {\n  color: #fff;\n  background-color: #1b1e21;\n  border-color: #1b1e21;\n}\n\n.close {\n  float: right;\n  font-size: 1.5rem;\n  font-weight: 700;\n  line-height: 1;\n  color: #000;\n  text-shadow: 0 1px 0 #fff;\n  opacity: .5;\n}\n\n.close:not(:disabled):not(.disabled) {\n  cursor: pointer;\n}\n\n.close:not(:disabled):not(.disabled):hover, .close:not(:disabled):not(.disabled):focus {\n  color: #000;\n  text-decoration: none;\n  opacity: .75;\n}\n\nbutton.close {\n  padding: 0;\n  background-color: transparent;\n  border: 0;\n  -webkit-appearance: none;\n}\n\n.modal-open {\n  overflow: hidden;\n}\n\n.modal-open .modal {\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n\n.modal {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1050;\n  display: none;\n  overflow: hidden;\n  outline: 0;\n}\n\n.modal-dialog {\n  position: relative;\n  width: auto;\n  margin: 0.5rem;\n  pointer-events: none;\n}\n\n.modal.fade .modal-dialog {\n  transition: -webkit-transform 0.3s ease-out;\n  transition: transform 0.3s ease-out;\n  transition: transform 0.3s ease-out, -webkit-transform 0.3s ease-out;\n  -webkit-transform: translate(0, -25%);\n  transform: translate(0, -25%);\n}\n\n@media screen and (prefers-reduced-motion: reduce) {\n  .modal.fade .modal-dialog {\n    transition: none;\n  }\n}\n\n.modal.show .modal-dialog {\n  -webkit-transform: translate(0, 0);\n  transform: translate(0, 0);\n}\n\n.modal-dialog-centered {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-align: center;\n  align-items: center;\n  min-height: calc(100% - (0.5rem * 2));\n}\n\n.modal-dialog-centered::before {\n  display: block;\n  height: calc(100vh - (0.5rem * 2));\n  content: "";\n}\n\n.modal-content {\n  position: relative;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-direction: column;\n  flex-direction: column;\n  width: 100%;\n  pointer-events: auto;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  border-radius: 0.3rem;\n  outline: 0;\n}\n\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1040;\n  background-color: #000;\n}\n\n.modal-backdrop.fade {\n  opacity: 0;\n}\n\n.modal-backdrop.show {\n  opacity: 0.5;\n}\n\n.modal-header {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-align: start;\n  align-items: flex-start;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n  padding: 1rem;\n  border-bottom: 1px solid #e9ecef;\n  border-top-left-radius: 0.3rem;\n  border-top-right-radius: 0.3rem;\n}\n\n.modal-header .close {\n  padding: 1rem;\n  margin: -1rem -1rem -1rem auto;\n}\n\n.modal-title {\n  margin-bottom: 0;\n  line-height: 1.5;\n}\n\n.modal-body {\n  position: relative;\n  -ms-flex: 1 1 auto;\n  flex: 1 1 auto;\n  padding: 1rem;\n}\n\n.modal-footer {\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-align: center;\n  align-items: center;\n  -ms-flex-pack: end;\n  justify-content: flex-end;\n  padding: 1rem;\n  border-top: 1px solid #e9ecef;\n}\n\n.modal-footer > :not(:first-child) {\n  margin-left: .25rem;\n}\n\n.modal-footer > :not(:last-child) {\n  margin-right: .25rem;\n}\n\n.modal-scrollbar-measure {\n  position: absolute;\n  top: -9999px;\n  width: 50px;\n  height: 50px;\n  overflow: scroll;\n}\n\n@media (min-width: 576px) {\n  .modal-dialog {\n    max-width: 500px;\n    margin: 1.75rem auto;\n  }\n  .modal-dialog-centered {\n    min-height: calc(100% - (1.75rem * 2));\n  }\n  .modal-dialog-centered::before {\n    height: calc(100vh - (1.75rem * 2));\n  }\n  .modal-sm {\n    max-width: 300px;\n  }\n}\n\n@media (min-width: 992px) {\n  .modal-lg {\n    max-width: 800px;\n  }\n}\n\n.tooltip {\n  position: absolute;\n  z-index: 1070;\n  display: block;\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1.5;\n  text-align: left;\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  letter-spacing: normal;\n  word-break: normal;\n  word-spacing: normal;\n  white-space: normal;\n  line-break: auto;\n  font-size: 0.875rem;\n  word-wrap: break-word;\n  opacity: 0;\n}\n\n.tooltip.show {\n  opacity: 0.9;\n}\n\n.tooltip .arrow {\n  position: absolute;\n  display: block;\n  width: 0.8rem;\n  height: 0.4rem;\n}\n\n.tooltip .arrow::before {\n  position: absolute;\n  content: "";\n  border-color: transparent;\n  border-style: solid;\n}\n\n.bs-tooltip-top, .bs-tooltip-auto[x-placement^="top"] {\n  padding: 0.4rem 0;\n}\n\n.bs-tooltip-top .arrow, .bs-tooltip-auto[x-placement^="top"] .arrow {\n  bottom: 0;\n}\n\n.bs-tooltip-top .arrow::before, .bs-tooltip-auto[x-placement^="top"] .arrow::before {\n  top: 0;\n  border-width: 0.4rem 0.4rem 0;\n  border-top-color: #000;\n}\n\n.bs-tooltip-right, .bs-tooltip-auto[x-placement^="right"] {\n  padding: 0 0.4rem;\n}\n\n.bs-tooltip-right .arrow, .bs-tooltip-auto[x-placement^="right"] .arrow {\n  left: 0;\n  width: 0.4rem;\n  height: 0.8rem;\n}\n\n.bs-tooltip-right .arrow::before, .bs-tooltip-auto[x-placement^="right"] .arrow::before {\n  right: 0;\n  border-width: 0.4rem 0.4rem 0.4rem 0;\n  border-right-color: #000;\n}\n\n.bs-tooltip-bottom, .bs-tooltip-auto[x-placement^="bottom"] {\n  padding: 0.4rem 0;\n}\n\n.bs-tooltip-bottom .arrow, .bs-tooltip-auto[x-placement^="bottom"] .arrow {\n  top: 0;\n}\n\n.bs-tooltip-bottom .arrow::before, .bs-tooltip-auto[x-placement^="bottom"] .arrow::before {\n  bottom: 0;\n  border-width: 0 0.4rem 0.4rem;\n  border-bottom-color: #000;\n}\n\n.bs-tooltip-left, .bs-tooltip-auto[x-placement^="left"] {\n  padding: 0 0.4rem;\n}\n\n.bs-tooltip-left .arrow, .bs-tooltip-auto[x-placement^="left"] .arrow {\n  right: 0;\n  width: 0.4rem;\n  height: 0.8rem;\n}\n\n.bs-tooltip-left .arrow::before, .bs-tooltip-auto[x-placement^="left"] .arrow::before {\n  left: 0;\n  border-width: 0.4rem 0 0.4rem 0.4rem;\n  border-left-color: #000;\n}\n\n.tooltip-inner {\n  max-width: 200px;\n  padding: 0.25rem 0.5rem;\n  color: #fff;\n  text-align: center;\n  background-color: #000;\n  border-radius: 0.25rem;\n}\n\n.popover {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1060;\n  display: block;\n  max-width: 276px;\n  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1.5;\n  text-align: left;\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  letter-spacing: normal;\n  word-break: normal;\n  word-spacing: normal;\n  white-space: normal;\n  line-break: auto;\n  font-size: 0.875rem;\n  word-wrap: break-word;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  border-radius: 0.3rem;\n}\n\n.popover .arrow {\n  position: absolute;\n  display: block;\n  width: 1rem;\n  height: 0.5rem;\n  margin: 0 0.3rem;\n}\n\n.popover .arrow::before, .popover .arrow::after {\n  position: absolute;\n  display: block;\n  content: "";\n  border-color: transparent;\n  border-style: solid;\n}\n\n.bs-popover-top, .bs-popover-auto[x-placement^="top"] {\n  margin-bottom: 0.5rem;\n}\n\n.bs-popover-top .arrow, .bs-popover-auto[x-placement^="top"] .arrow {\n  bottom: calc((0.5rem + 1px) * -1);\n}\n\n.bs-popover-top .arrow::before, .bs-popover-auto[x-placement^="top"] .arrow::before,\n.bs-popover-top .arrow::after,\n.bs-popover-auto[x-placement^="top"] .arrow::after {\n  border-width: 0.5rem 0.5rem 0;\n}\n\n.bs-popover-top .arrow::before, .bs-popover-auto[x-placement^="top"] .arrow::before {\n  bottom: 0;\n  border-top-color: rgba(0, 0, 0, 0.25);\n}\n\n\n.bs-popover-top .arrow::after,\n.bs-popover-auto[x-placement^="top"] .arrow::after {\n  bottom: 1px;\n  border-top-color: #fff;\n}\n\n.bs-popover-right, .bs-popover-auto[x-placement^="right"] {\n  margin-left: 0.5rem;\n}\n\n.bs-popover-right .arrow, .bs-popover-auto[x-placement^="right"] .arrow {\n  left: calc((0.5rem + 1px) * -1);\n  width: 0.5rem;\n  height: 1rem;\n  margin: 0.3rem 0;\n}\n\n.bs-popover-right .arrow::before, .bs-popover-auto[x-placement^="right"] .arrow::before,\n.bs-popover-right .arrow::after,\n.bs-popover-auto[x-placement^="right"] .arrow::after {\n  border-width: 0.5rem 0.5rem 0.5rem 0;\n}\n\n.bs-popover-right .arrow::before, .bs-popover-auto[x-placement^="right"] .arrow::before {\n  left: 0;\n  border-right-color: rgba(0, 0, 0, 0.25);\n}\n\n\n.bs-popover-right .arrow::after,\n.bs-popover-auto[x-placement^="right"] .arrow::after {\n  left: 1px;\n  border-right-color: #fff;\n}\n\n.bs-popover-bottom, .bs-popover-auto[x-placement^="bottom"] {\n  margin-top: 0.5rem;\n}\n\n.bs-popover-bottom .arrow, .bs-popover-auto[x-placement^="bottom"] .arrow {\n  top: calc((0.5rem + 1px) * -1);\n}\n\n.bs-popover-bottom .arrow::before, .bs-popover-auto[x-placement^="bottom"] .arrow::before,\n.bs-popover-bottom .arrow::after,\n.bs-popover-auto[x-placement^="bottom"] .arrow::after {\n  border-width: 0 0.5rem 0.5rem 0.5rem;\n}\n\n.bs-popover-bottom .arrow::before, .bs-popover-auto[x-placement^="bottom"] .arrow::before {\n  top: 0;\n  border-bottom-color: rgba(0, 0, 0, 0.25);\n}\n\n\n.bs-popover-bottom .arrow::after,\n.bs-popover-auto[x-placement^="bottom"] .arrow::after {\n  top: 1px;\n  border-bottom-color: #fff;\n}\n\n.bs-popover-bottom .popover-header::before, .bs-popover-auto[x-placement^="bottom"] .popover-header::before {\n  position: absolute;\n  top: 0;\n  left: 50%;\n  display: block;\n  width: 1rem;\n  margin-left: -0.5rem;\n  content: "";\n  border-bottom: 1px solid #f7f7f7;\n}\n\n.bs-popover-left, .bs-popover-auto[x-placement^="left"] {\n  margin-right: 0.5rem;\n}\n\n.bs-popover-left .arrow, .bs-popover-auto[x-placement^="left"] .arrow {\n  right: calc((0.5rem + 1px) * -1);\n  width: 0.5rem;\n  height: 1rem;\n  margin: 0.3rem 0;\n}\n\n.bs-popover-left .arrow::before, .bs-popover-auto[x-placement^="left"] .arrow::before,\n.bs-popover-left .arrow::after,\n.bs-popover-auto[x-placement^="left"] .arrow::after {\n  border-width: 0.5rem 0 0.5rem 0.5rem;\n}\n\n.bs-popover-left .arrow::before, .bs-popover-auto[x-placement^="left"] .arrow::before {\n  right: 0;\n  border-left-color: rgba(0, 0, 0, 0.25);\n}\n\n\n.bs-popover-left .arrow::after,\n.bs-popover-auto[x-placement^="left"] .arrow::after {\n  right: 1px;\n  border-left-color: #fff;\n}\n\n.popover-header {\n  padding: 0.5rem 0.75rem;\n  margin-bottom: 0;\n  font-size: 1rem;\n  color: inherit;\n  background-color: #f7f7f7;\n  border-bottom: 1px solid #ebebeb;\n  border-top-left-radius: calc(0.3rem - 1px);\n  border-top-right-radius: calc(0.3rem - 1px);\n}\n\n.popover-header:empty {\n  display: none;\n}\n\n.popover-body {\n  padding: 0.5rem 0.75rem;\n  color: #212529;\n}\n\n.carousel {\n  position: relative;\n}\n\n.carousel-inner {\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n}\n\n.carousel-item {\n  position: relative;\n  display: none;\n  -ms-flex-align: center;\n  align-items: center;\n  width: 100%;\n  -webkit-backface-visibility: hidden;\n  backface-visibility: hidden;\n  -webkit-perspective: 1000px;\n  perspective: 1000px;\n}\n\n.carousel-item.active,\n.carousel-item-next,\n.carousel-item-prev {\n  display: block;\n  transition: -webkit-transform 0.6s ease;\n  transition: transform 0.6s ease;\n  transition: transform 0.6s ease, -webkit-transform 0.6s ease;\n}\n\n@media screen and (prefers-reduced-motion: reduce) {\n  .carousel-item.active,\n  .carousel-item-next,\n  .carousel-item-prev {\n    transition: none;\n  }\n}\n\n.carousel-item-next,\n.carousel-item-prev {\n  position: absolute;\n  top: 0;\n}\n\n.carousel-item-next.carousel-item-left,\n.carousel-item-prev.carousel-item-right {\n  -webkit-transform: translateX(0);\n  transform: translateX(0);\n}\n\n@supports ((-webkit-transform-style: preserve-3d) or (transform-style: preserve-3d)) {\n  .carousel-item-next.carousel-item-left,\n  .carousel-item-prev.carousel-item-right {\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n}\n\n.carousel-item-next,\n.active.carousel-item-right {\n  -webkit-transform: translateX(100%);\n  transform: translateX(100%);\n}\n\n@supports ((-webkit-transform-style: preserve-3d) or (transform-style: preserve-3d)) {\n  .carousel-item-next,\n  .active.carousel-item-right {\n    -webkit-transform: translate3d(100%, 0, 0);\n    transform: translate3d(100%, 0, 0);\n  }\n}\n\n.carousel-item-prev,\n.active.carousel-item-left {\n  -webkit-transform: translateX(-100%);\n  transform: translateX(-100%);\n}\n\n@supports ((-webkit-transform-style: preserve-3d) or (transform-style: preserve-3d)) {\n  .carousel-item-prev,\n  .active.carousel-item-left {\n    -webkit-transform: translate3d(-100%, 0, 0);\n    transform: translate3d(-100%, 0, 0);\n  }\n}\n\n.carousel-fade .carousel-item {\n  opacity: 0;\n  transition-duration: .6s;\n  transition-property: opacity;\n}\n\n.carousel-fade .carousel-item.active,\n.carousel-fade .carousel-item-next.carousel-item-left,\n.carousel-fade .carousel-item-prev.carousel-item-right {\n  opacity: 1;\n}\n\n.carousel-fade .active.carousel-item-left,\n.carousel-fade .active.carousel-item-right {\n  opacity: 0;\n}\n\n.carousel-fade .carousel-item-next,\n.carousel-fade .carousel-item-prev,\n.carousel-fade .carousel-item.active,\n.carousel-fade .active.carousel-item-left,\n.carousel-fade .active.carousel-item-prev {\n  -webkit-transform: translateX(0);\n  transform: translateX(0);\n}\n\n@supports ((-webkit-transform-style: preserve-3d) or (transform-style: preserve-3d)) {\n  .carousel-fade .carousel-item-next,\n  .carousel-fade .carousel-item-prev,\n  .carousel-fade .carousel-item.active,\n  .carousel-fade .active.carousel-item-left,\n  .carousel-fade .active.carousel-item-prev {\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n  }\n}\n\n.carousel-control-prev,\n.carousel-control-next {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-align: center;\n  align-items: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  width: 15%;\n  color: #fff;\n  text-align: center;\n  opacity: 0.5;\n}\n\n.carousel-control-prev:hover, .carousel-control-prev:focus,\n.carousel-control-next:hover,\n.carousel-control-next:focus {\n  color: #fff;\n  text-decoration: none;\n  outline: 0;\n  opacity: .9;\n}\n\n.carousel-control-prev {\n  left: 0;\n}\n\n.carousel-control-next {\n  right: 0;\n}\n\n.carousel-control-prev-icon,\n.carousel-control-next-icon {\n  display: inline-block;\n  width: 20px;\n  height: 20px;\n  background: transparent no-repeat center center;\n  background-size: 100% 100%;\n}\n\n.carousel-control-prev-icon {\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' fill=\'%23fff\' viewBox=\'0 0 8 8\'%3E%3Cpath d=\'M5.25 0l-4 4 4 4 1.5-1.5-2.5-2.5 2.5-2.5-1.5-1.5z\'/%3E%3C/svg%3E");\n}\n\n.carousel-control-next-icon {\n  background-image: url("data:image/svg+xml;charset=utf8,%3Csvg xmlns=\'http://www.w3.org/2000/svg\' fill=\'%23fff\' viewBox=\'0 0 8 8\'%3E%3Cpath d=\'M2.75 0l-1.5 1.5 2.5 2.5-2.5 2.5 1.5 1.5 4-4-4-4z\'/%3E%3C/svg%3E");\n}\n\n.carousel-indicators {\n  position: absolute;\n  right: 0;\n  bottom: 10px;\n  left: 0;\n  z-index: 15;\n  display: -ms-flexbox;\n  display: flex;\n  -ms-flex-pack: center;\n  justify-content: center;\n  padding-left: 0;\n  margin-right: 15%;\n  margin-left: 15%;\n  list-style: none;\n}\n\n.carousel-indicators li {\n  position: relative;\n  -ms-flex: 0 1 auto;\n  flex: 0 1 auto;\n  width: 30px;\n  height: 3px;\n  margin-right: 3px;\n  margin-left: 3px;\n  text-indent: -999px;\n  cursor: pointer;\n  background-color: rgba(255, 255, 255, 0.5);\n}\n\n.carousel-indicators li::before {\n  position: absolute;\n  top: -10px;\n  left: 0;\n  display: inline-block;\n  width: 100%;\n  height: 10px;\n  content: "";\n}\n\n.carousel-indicators li::after {\n  position: absolute;\n  bottom: -10px;\n  left: 0;\n  display: inline-block;\n  width: 100%;\n  height: 10px;\n  content: "";\n}\n\n.carousel-indicators .active {\n  background-color: #fff;\n}\n\n.carousel-caption {\n  position: absolute;\n  right: 15%;\n  bottom: 20px;\n  left: 15%;\n  z-index: 10;\n  padding-top: 20px;\n  padding-bottom: 20px;\n  color: #fff;\n  text-align: center;\n}\n\n.align-baseline {\n  vertical-align: baseline !important;\n}\n\n.align-top {\n  vertical-align: top !important;\n}\n\n.align-middle {\n  vertical-align: middle !important;\n}\n\n.align-bottom {\n  vertical-align: bottom !important;\n}\n\n.align-text-bottom {\n  vertical-align: text-bottom !important;\n}\n\n.align-text-top {\n  vertical-align: text-top !important;\n}\n\n.bg-primary {\n  background-color: #007bff !important;\n}\n\na.bg-primary:hover, a.bg-primary:focus,\nbutton.bg-primary:hover,\nbutton.bg-primary:focus {\n  background-color: #0062cc !important;\n}\n\n.bg-secondary {\n  background-color: #6c757d !important;\n}\n\na.bg-secondary:hover, a.bg-secondary:focus,\nbutton.bg-secondary:hover,\nbutton.bg-secondary:focus {\n  background-color: #545b62 !important;\n}\n\n.bg-success {\n  background-color: #28a745 !important;\n}\n\na.bg-success:hover, a.bg-success:focus,\nbutton.bg-success:hover,\nbutton.bg-success:focus {\n  background-color: #1e7e34 !important;\n}\n\n.bg-info {\n  background-color: #17a2b8 !important;\n}\n\na.bg-info:hover, a.bg-info:focus,\nbutton.bg-info:hover,\nbutton.bg-info:focus {\n  background-color: #117a8b !important;\n}\n\n.bg-warning {\n  background-color: #ffc107 !important;\n}\n\na.bg-warning:hover, a.bg-warning:focus,\nbutton.bg-warning:hover,\nbutton.bg-warning:focus {\n  background-color: #d39e00 !important;\n}\n\n.bg-danger {\n  background-color: #dc3545 !important;\n}\n\na.bg-danger:hover, a.bg-danger:focus,\nbutton.bg-danger:hover,\nbutton.bg-danger:focus {\n  background-color: #bd2130 !important;\n}\n\n.bg-light {\n  background-color: #f8f9fa !important;\n}\n\na.bg-light:hover, a.bg-light:focus,\nbutton.bg-light:hover,\nbutton.bg-light:focus {\n  background-color: #dae0e5 !important;\n}\n\n.bg-dark {\n  background-color: #343a40 !important;\n}\n\na.bg-dark:hover, a.bg-dark:focus,\nbutton.bg-dark:hover,\nbutton.bg-dark:focus {\n  background-color: #1d2124 !important;\n}\n\n.bg-white {\n  background-color: #fff !important;\n}\n\n.bg-transparent {\n  background-color: transparent !important;\n}\n\n.border {\n  border: 1px solid #dee2e6 !important;\n}\n\n.border-top {\n  border-top: 1px solid #dee2e6 !important;\n}\n\n.border-right {\n  border-right: 1px solid #dee2e6 !important;\n}\n\n.border-bottom {\n  border-bottom: 1px solid #dee2e6 !important;\n}\n\n.border-left {\n  border-left: 1px solid #dee2e6 !important;\n}\n\n.border-0 {\n  border: 0 !important;\n}\n\n.border-top-0 {\n  border-top: 0 !important;\n}\n\n.border-right-0 {\n  border-right: 0 !important;\n}\n\n.border-bottom-0 {\n  border-bottom: 0 !important;\n}\n\n.border-left-0 {\n  border-left: 0 !important;\n}\n\n.border-primary {\n  border-color: #007bff !important;\n}\n\n.border-secondary {\n  border-color: #6c757d !important;\n}\n\n.border-success {\n  border-color: #28a745 !important;\n}\n\n.border-info {\n  border-color: #17a2b8 !important;\n}\n\n.border-warning {\n  border-color: #ffc107 !important;\n}\n\n.border-danger {\n  border-color: #dc3545 !important;\n}\n\n.border-light {\n  border-color: #f8f9fa !important;\n}\n\n.border-dark {\n  border-color: #343a40 !important;\n}\n\n.border-white {\n  border-color: #fff !important;\n}\n\n.rounded {\n  border-radius: 0.25rem !important;\n}\n\n.rounded-top {\n  border-top-left-radius: 0.25rem !important;\n  border-top-right-radius: 0.25rem !important;\n}\n\n.rounded-right {\n  border-top-right-radius: 0.25rem !important;\n  border-bottom-right-radius: 0.25rem !important;\n}\n\n.rounded-bottom {\n  border-bottom-right-radius: 0.25rem !important;\n  border-bottom-left-radius: 0.25rem !important;\n}\n\n.rounded-left {\n  border-top-left-radius: 0.25rem !important;\n  border-bottom-left-radius: 0.25rem !important;\n}\n\n.rounded-circle {\n  border-radius: 50% !important;\n}\n\n.rounded-0 {\n  border-radius: 0 !important;\n}\n\n.clearfix::after {\n  display: block;\n  clear: both;\n  content: "";\n}\n\n.d-none {\n  display: none !important;\n}\n\n.d-inline {\n  display: inline !important;\n}\n\n.d-inline-block {\n  display: inline-block !important;\n}\n\n.d-block {\n  display: block !important;\n}\n\n.d-table {\n  display: table !important;\n}\n\n.d-table-row {\n  display: table-row !important;\n}\n\n.d-table-cell {\n  display: table-cell !important;\n}\n\n.d-flex {\n  display: -ms-flexbox !important;\n  display: flex !important;\n}\n\n.d-inline-flex {\n  display: -ms-inline-flexbox !important;\n  display: inline-flex !important;\n}\n\n@media (min-width: 576px) {\n  .d-sm-none {\n    display: none !important;\n  }\n  .d-sm-inline {\n    display: inline !important;\n  }\n  .d-sm-inline-block {\n    display: inline-block !important;\n  }\n  .d-sm-block {\n    display: block !important;\n  }\n  .d-sm-table {\n    display: table !important;\n  }\n  .d-sm-table-row {\n    display: table-row !important;\n  }\n  .d-sm-table-cell {\n    display: table-cell !important;\n  }\n  .d-sm-flex {\n    display: -ms-flexbox !important;\n    display: flex !important;\n  }\n  .d-sm-inline-flex {\n    display: -ms-inline-flexbox !important;\n    display: inline-flex !important;\n  }\n}\n\n@media (min-width: 768px) {\n  .d-md-none {\n    display: none !important;\n  }\n  .d-md-inline {\n    display: inline !important;\n  }\n  .d-md-inline-block {\n    display: inline-block !important;\n  }\n  .d-md-block {\n    display: block !important;\n  }\n  .d-md-table {\n    display: table !important;\n  }\n  .d-md-table-row {\n    display: table-row !important;\n  }\n  .d-md-table-cell {\n    display: table-cell !important;\n  }\n  .d-md-flex {\n    display: -ms-flexbox !important;\n    display: flex !important;\n  }\n  .d-md-inline-flex {\n    display: -ms-inline-flexbox !important;\n    display: inline-flex !important;\n  }\n}\n\n@media (min-width: 992px) {\n  .d-lg-none {\n    display: none !important;\n  }\n  .d-lg-inline {\n    display: inline !important;\n  }\n  .d-lg-inline-block {\n    display: inline-block !important;\n  }\n  .d-lg-block {\n    display: block !important;\n  }\n  .d-lg-table {\n    display: table !important;\n  }\n  .d-lg-table-row {\n    display: table-row !important;\n  }\n  .d-lg-table-cell {\n    display: table-cell !important;\n  }\n  .d-lg-flex {\n    display: -ms-flexbox !important;\n    display: flex !important;\n  }\n  .d-lg-inline-flex {\n    display: -ms-inline-flexbox !important;\n    display: inline-flex !important;\n  }\n}\n\n@media (min-width: 1200px) {\n  .d-xl-none {\n    display: none !important;\n  }\n  .d-xl-inline {\n    display: inline !important;\n  }\n  .d-xl-inline-block {\n    display: inline-block !important;\n  }\n  .d-xl-block {\n    display: block !important;\n  }\n  .d-xl-table {\n    display: table !important;\n  }\n  .d-xl-table-row {\n    display: table-row !important;\n  }\n  .d-xl-table-cell {\n    display: table-cell !important;\n  }\n  .d-xl-flex {\n    display: -ms-flexbox !important;\n    display: flex !important;\n  }\n  .d-xl-inline-flex {\n    display: -ms-inline-flexbox !important;\n    display: inline-flex !important;\n  }\n}\n\n@media print {\n  .d-print-none {\n    display: none !important;\n  }\n  .d-print-inline {\n    display: inline !important;\n  }\n  .d-print-inline-block {\n    display: inline-block !important;\n  }\n  .d-print-block {\n    display: block !important;\n  }\n  .d-print-table {\n    display: table !important;\n  }\n  .d-print-table-row {\n    display: table-row !important;\n  }\n  .d-print-table-cell {\n    display: table-cell !important;\n  }\n  .d-print-flex {\n    display: -ms-flexbox !important;\n    display: flex !important;\n  }\n  .d-print-inline-flex {\n    display: -ms-inline-flexbox !important;\n    display: inline-flex !important;\n  }\n}\n\n.embed-responsive {\n  position: relative;\n  display: block;\n  width: 100%;\n  padding: 0;\n  overflow: hidden;\n}\n\n.embed-responsive::before {\n  display: block;\n  content: "";\n}\n\n.embed-responsive .embed-responsive-item,\n.embed-responsive iframe,\n.embed-responsive embed,\n.embed-responsive object,\n.embed-responsive video {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  border: 0;\n}\n\n.embed-responsive-21by9::before {\n  padding-top: 42.857143%;\n}\n\n.embed-responsive-16by9::before {\n  padding-top: 56.25%;\n}\n\n.embed-responsive-4by3::before {\n  padding-top: 75%;\n}\n\n.embed-responsive-1by1::before {\n  padding-top: 100%;\n}\n\n.flex-row {\n  -ms-flex-direction: row !important;\n  flex-direction: row !important;\n}\n\n.flex-column {\n  -ms-flex-direction: column !important;\n  flex-direction: column !important;\n}\n\n.flex-row-reverse {\n  -ms-flex-direction: row-reverse !important;\n  flex-direction: row-reverse !important;\n}\n\n.flex-column-reverse {\n  -ms-flex-direction: column-reverse !important;\n  flex-direction: column-reverse !important;\n}\n\n.flex-wrap {\n  -ms-flex-wrap: wrap !important;\n  flex-wrap: wrap !important;\n}\n\n.flex-nowrap {\n  -ms-flex-wrap: nowrap !important;\n  flex-wrap: nowrap !important;\n}\n\n.flex-wrap-reverse {\n  -ms-flex-wrap: wrap-reverse !important;\n  flex-wrap: wrap-reverse !important;\n}\n\n.flex-fill {\n  -ms-flex: 1 1 auto !important;\n  flex: 1 1 auto !important;\n}\n\n.flex-grow-0 {\n  -ms-flex-positive: 0 !important;\n  flex-grow: 0 !important;\n}\n\n.flex-grow-1 {\n  -ms-flex-positive: 1 !important;\n  flex-grow: 1 !important;\n}\n\n.flex-shrink-0 {\n  -ms-flex-negative: 0 !important;\n  flex-shrink: 0 !important;\n}\n\n.flex-shrink-1 {\n  -ms-flex-negative: 1 !important;\n  flex-shrink: 1 !important;\n}\n\n.justify-content-start {\n  -ms-flex-pack: start !important;\n  justify-content: flex-start !important;\n}\n\n.justify-content-end {\n  -ms-flex-pack: end !important;\n  justify-content: flex-end !important;\n}\n\n.justify-content-center {\n  -ms-flex-pack: center !important;\n  justify-content: center !important;\n}\n\n.justify-content-between {\n  -ms-flex-pack: justify !important;\n  justify-content: space-between !important;\n}\n\n.justify-content-around {\n  -ms-flex-pack: distribute !important;\n  justify-content: space-around !important;\n}\n\n.align-items-start {\n  -ms-flex-align: start !important;\n  align-items: flex-start !important;\n}\n\n.align-items-end {\n  -ms-flex-align: end !important;\n  align-items: flex-end !important;\n}\n\n.align-items-center {\n  -ms-flex-align: center !important;\n  align-items: center !important;\n}\n\n.align-items-baseline {\n  -ms-flex-align: baseline !important;\n  align-items: baseline !important;\n}\n\n.align-items-stretch {\n  -ms-flex-align: stretch !important;\n  align-items: stretch !important;\n}\n\n.align-content-start {\n  -ms-flex-line-pack: start !important;\n  align-content: flex-start !important;\n}\n\n.align-content-end {\n  -ms-flex-line-pack: end !important;\n  align-content: flex-end !important;\n}\n\n.align-content-center {\n  -ms-flex-line-pack: center !important;\n  align-content: center !important;\n}\n\n.align-content-between {\n  -ms-flex-line-pack: justify !important;\n  align-content: space-between !important;\n}\n\n.align-content-around {\n  -ms-flex-line-pack: distribute !important;\n  align-content: space-around !important;\n}\n\n.align-content-stretch {\n  -ms-flex-line-pack: stretch !important;\n  align-content: stretch !important;\n}\n\n.align-self-auto {\n  -ms-flex-item-align: auto !important;\n  align-self: auto !important;\n}\n\n.align-self-start {\n  -ms-flex-item-align: start !important;\n  align-self: flex-start !important;\n}\n\n.align-self-end {\n  -ms-flex-item-align: end !important;\n  align-self: flex-end !important;\n}\n\n.align-self-center {\n  -ms-flex-item-align: center !important;\n  align-self: center !important;\n}\n\n.align-self-baseline {\n  -ms-flex-item-align: baseline !important;\n  align-self: baseline !important;\n}\n\n.align-self-stretch {\n  -ms-flex-item-align: stretch !important;\n  align-self: stretch !important;\n}\n\n@media (min-width: 576px) {\n  .flex-sm-row {\n    -ms-flex-direction: row !important;\n    flex-direction: row !important;\n  }\n  .flex-sm-column {\n    -ms-flex-direction: column !important;\n    flex-direction: column !important;\n  }\n  .flex-sm-row-reverse {\n    -ms-flex-direction: row-reverse !important;\n    flex-direction: row-reverse !important;\n  }\n  .flex-sm-column-reverse {\n    -ms-flex-direction: column-reverse !important;\n    flex-direction: column-reverse !important;\n  }\n  .flex-sm-wrap {\n    -ms-flex-wrap: wrap !important;\n    flex-wrap: wrap !important;\n  }\n  .flex-sm-nowrap {\n    -ms-flex-wrap: nowrap !important;\n    flex-wrap: nowrap !important;\n  }\n  .flex-sm-wrap-reverse {\n    -ms-flex-wrap: wrap-reverse !important;\n    flex-wrap: wrap-reverse !important;\n  }\n  .flex-sm-fill {\n    -ms-flex: 1 1 auto !important;\n    flex: 1 1 auto !important;\n  }\n  .flex-sm-grow-0 {\n    -ms-flex-positive: 0 !important;\n    flex-grow: 0 !important;\n  }\n  .flex-sm-grow-1 {\n    -ms-flex-positive: 1 !important;\n    flex-grow: 1 !important;\n  }\n  .flex-sm-shrink-0 {\n    -ms-flex-negative: 0 !important;\n    flex-shrink: 0 !important;\n  }\n  .flex-sm-shrink-1 {\n    -ms-flex-negative: 1 !important;\n    flex-shrink: 1 !important;\n  }\n  .justify-content-sm-start {\n    -ms-flex-pack: start !important;\n    justify-content: flex-start !important;\n  }\n  .justify-content-sm-end {\n    -ms-flex-pack: end !important;\n    justify-content: flex-end !important;\n  }\n  .justify-content-sm-center {\n    -ms-flex-pack: center !important;\n    justify-content: center !important;\n  }\n  .justify-content-sm-between {\n    -ms-flex-pack: justify !important;\n    justify-content: space-between !important;\n  }\n  .justify-content-sm-around {\n    -ms-flex-pack: distribute !important;\n    justify-content: space-around !important;\n  }\n  .align-items-sm-start {\n    -ms-flex-align: start !important;\n    align-items: flex-start !important;\n  }\n  .align-items-sm-end {\n    -ms-flex-align: end !important;\n    align-items: flex-end !important;\n  }\n  .align-items-sm-center {\n    -ms-flex-align: center !important;\n    align-items: center !important;\n  }\n  .align-items-sm-baseline {\n    -ms-flex-align: baseline !important;\n    align-items: baseline !important;\n  }\n  .align-items-sm-stretch {\n    -ms-flex-align: stretch !important;\n    align-items: stretch !important;\n  }\n  .align-content-sm-start {\n    -ms-flex-line-pack: start !important;\n    align-content: flex-start !important;\n  }\n  .align-content-sm-end {\n    -ms-flex-line-pack: end !important;\n    align-content: flex-end !important;\n  }\n  .align-content-sm-center {\n    -ms-flex-line-pack: center !important;\n    align-content: center !important;\n  }\n  .align-content-sm-between {\n    -ms-flex-line-pack: justify !important;\n    align-content: space-between !important;\n  }\n  .align-content-sm-around {\n    -ms-flex-line-pack: distribute !important;\n    align-content: space-around !important;\n  }\n  .align-content-sm-stretch {\n    -ms-flex-line-pack: stretch !important;\n    align-content: stretch !important;\n  }\n  .align-self-sm-auto {\n    -ms-flex-item-align: auto !important;\n    align-self: auto !important;\n  }\n  .align-self-sm-start {\n    -ms-flex-item-align: start !important;\n    align-self: flex-start !important;\n  }\n  .align-self-sm-end {\n    -ms-flex-item-align: end !important;\n    align-self: flex-end !important;\n  }\n  .align-self-sm-center {\n    -ms-flex-item-align: center !important;\n    align-self: center !important;\n  }\n  .align-self-sm-baseline {\n    -ms-flex-item-align: baseline !important;\n    align-self: baseline !important;\n  }\n  .align-self-sm-stretch {\n    -ms-flex-item-align: stretch !important;\n    align-self: stretch !important;\n  }\n}\n\n@media (min-width: 768px) {\n  .flex-md-row {\n    -ms-flex-direction: row !important;\n    flex-direction: row !important;\n  }\n  .flex-md-column {\n    -ms-flex-direction: column !important;\n    flex-direction: column !important;\n  }\n  .flex-md-row-reverse {\n    -ms-flex-direction: row-reverse !important;\n    flex-direction: row-reverse !important;\n  }\n  .flex-md-column-reverse {\n    -ms-flex-direction: column-reverse !important;\n    flex-direction: column-reverse !important;\n  }\n  .flex-md-wrap {\n    -ms-flex-wrap: wrap !important;\n    flex-wrap: wrap !important;\n  }\n  .flex-md-nowrap {\n    -ms-flex-wrap: nowrap !important;\n    flex-wrap: nowrap !important;\n  }\n  .flex-md-wrap-reverse {\n    -ms-flex-wrap: wrap-reverse !important;\n    flex-wrap: wrap-reverse !important;\n  }\n  .flex-md-fill {\n    -ms-flex: 1 1 auto !important;\n    flex: 1 1 auto !important;\n  }\n  .flex-md-grow-0 {\n    -ms-flex-positive: 0 !important;\n    flex-grow: 0 !important;\n  }\n  .flex-md-grow-1 {\n    -ms-flex-positive: 1 !important;\n    flex-grow: 1 !important;\n  }\n  .flex-md-shrink-0 {\n    -ms-flex-negative: 0 !important;\n    flex-shrink: 0 !important;\n  }\n  .flex-md-shrink-1 {\n    -ms-flex-negative: 1 !important;\n    flex-shrink: 1 !important;\n  }\n  .justify-content-md-start {\n    -ms-flex-pack: start !important;\n    justify-content: flex-start !important;\n  }\n  .justify-content-md-end {\n    -ms-flex-pack: end !important;\n    justify-content: flex-end !important;\n  }\n  .justify-content-md-center {\n    -ms-flex-pack: center !important;\n    justify-content: center !important;\n  }\n  .justify-content-md-between {\n    -ms-flex-pack: justify !important;\n    justify-content: space-between !important;\n  }\n  .justify-content-md-around {\n    -ms-flex-pack: distribute !important;\n    justify-content: space-around !important;\n  }\n  .align-items-md-start {\n    -ms-flex-align: start !important;\n    align-items: flex-start !important;\n  }\n  .align-items-md-end {\n    -ms-flex-align: end !important;\n    align-items: flex-end !important;\n  }\n  .align-items-md-center {\n    -ms-flex-align: center !important;\n    align-items: center !important;\n  }\n  .align-items-md-baseline {\n    -ms-flex-align: baseline !important;\n    align-items: baseline !important;\n  }\n  .align-items-md-stretch {\n    -ms-flex-align: stretch !important;\n    align-items: stretch !important;\n  }\n  .align-content-md-start {\n    -ms-flex-line-pack: start !important;\n    align-content: flex-start !important;\n  }\n  .align-content-md-end {\n    -ms-flex-line-pack: end !important;\n    align-content: flex-end !important;\n  }\n  .align-content-md-center {\n    -ms-flex-line-pack: center !important;\n    align-content: center !important;\n  }\n  .align-content-md-between {\n    -ms-flex-line-pack: justify !important;\n    align-content: space-between !important;\n  }\n  .align-content-md-around {\n    -ms-flex-line-pack: distribute !important;\n    align-content: space-around !important;\n  }\n  .align-content-md-stretch {\n    -ms-flex-line-pack: stretch !important;\n    align-content: stretch !important;\n  }\n  .align-self-md-auto {\n    -ms-flex-item-align: auto !important;\n    align-self: auto !important;\n  }\n  .align-self-md-start {\n    -ms-flex-item-align: start !important;\n    align-self: flex-start !important;\n  }\n  .align-self-md-end {\n    -ms-flex-item-align: end !important;\n    align-self: flex-end !important;\n  }\n  .align-self-md-center {\n    -ms-flex-item-align: center !important;\n    align-self: center !important;\n  }\n  .align-self-md-baseline {\n    -ms-flex-item-align: baseline !important;\n    align-self: baseline !important;\n  }\n  .align-self-md-stretch {\n    -ms-flex-item-align: stretch !important;\n    align-self: stretch !important;\n  }\n}\n\n@media (min-width: 992px) {\n  .flex-lg-row {\n    -ms-flex-direction: row !important;\n    flex-direction: row !important;\n  }\n  .flex-lg-column {\n    -ms-flex-direction: column !important;\n    flex-direction: column !important;\n  }\n  .flex-lg-row-reverse {\n    -ms-flex-direction: row-reverse !important;\n    flex-direction: row-reverse !important;\n  }\n  .flex-lg-column-reverse {\n    -ms-flex-direction: column-reverse !important;\n    flex-direction: column-reverse !important;\n  }\n  .flex-lg-wrap {\n    -ms-flex-wrap: wrap !important;\n    flex-wrap: wrap !important;\n  }\n  .flex-lg-nowrap {\n    -ms-flex-wrap: nowrap !important;\n    flex-wrap: nowrap !important;\n  }\n  .flex-lg-wrap-reverse {\n    -ms-flex-wrap: wrap-reverse !important;\n    flex-wrap: wrap-reverse !important;\n  }\n  .flex-lg-fill {\n    -ms-flex: 1 1 auto !important;\n    flex: 1 1 auto !important;\n  }\n  .flex-lg-grow-0 {\n    -ms-flex-positive: 0 !important;\n    flex-grow: 0 !important;\n  }\n  .flex-lg-grow-1 {\n    -ms-flex-positive: 1 !important;\n    flex-grow: 1 !important;\n  }\n  .flex-lg-shrink-0 {\n    -ms-flex-negative: 0 !important;\n    flex-shrink: 0 !important;\n  }\n  .flex-lg-shrink-1 {\n    -ms-flex-negative: 1 !important;\n    flex-shrink: 1 !important;\n  }\n  .justify-content-lg-start {\n    -ms-flex-pack: start !important;\n    justify-content: flex-start !important;\n  }\n  .justify-content-lg-end {\n    -ms-flex-pack: end !important;\n    justify-content: flex-end !important;\n  }\n  .justify-content-lg-center {\n    -ms-flex-pack: center !important;\n    justify-content: center !important;\n  }\n  .justify-content-lg-between {\n    -ms-flex-pack: justify !important;\n    justify-content: space-between !important;\n  }\n  .justify-content-lg-around {\n    -ms-flex-pack: distribute !important;\n    justify-content: space-around !important;\n  }\n  .align-items-lg-start {\n    -ms-flex-align: start !important;\n    align-items: flex-start !important;\n  }\n  .align-items-lg-end {\n    -ms-flex-align: end !important;\n    align-items: flex-end !important;\n  }\n  .align-items-lg-center {\n    -ms-flex-align: center !important;\n    align-items: center !important;\n  }\n  .align-items-lg-baseline {\n    -ms-flex-align: baseline !important;\n    align-items: baseline !important;\n  }\n  .align-items-lg-stretch {\n    -ms-flex-align: stretch !important;\n    align-items: stretch !important;\n  }\n  .align-content-lg-start {\n    -ms-flex-line-pack: start !important;\n    align-content: flex-start !important;\n  }\n  .align-content-lg-end {\n    -ms-flex-line-pack: end !important;\n    align-content: flex-end !important;\n  }\n  .align-content-lg-center {\n    -ms-flex-line-pack: center !important;\n    align-content: center !important;\n  }\n  .align-content-lg-between {\n    -ms-flex-line-pack: justify !important;\n    align-content: space-between !important;\n  }\n  .align-content-lg-around {\n    -ms-flex-line-pack: distribute !important;\n    align-content: space-around !important;\n  }\n  .align-content-lg-stretch {\n    -ms-flex-line-pack: stretch !important;\n    align-content: stretch !important;\n  }\n  .align-self-lg-auto {\n    -ms-flex-item-align: auto !important;\n    align-self: auto !important;\n  }\n  .align-self-lg-start {\n    -ms-flex-item-align: start !important;\n    align-self: flex-start !important;\n  }\n  .align-self-lg-end {\n    -ms-flex-item-align: end !important;\n    align-self: flex-end !important;\n  }\n  .align-self-lg-center {\n    -ms-flex-item-align: center !important;\n    align-self: center !important;\n  }\n  .align-self-lg-baseline {\n    -ms-flex-item-align: baseline !important;\n    align-self: baseline !important;\n  }\n  .align-self-lg-stretch {\n    -ms-flex-item-align: stretch !important;\n    align-self: stretch !important;\n  }\n}\n\n@media (min-width: 1200px) {\n  .flex-xl-row {\n    -ms-flex-direction: row !important;\n    flex-direction: row !important;\n  }\n  .flex-xl-column {\n    -ms-flex-direction: column !important;\n    flex-direction: column !important;\n  }\n  .flex-xl-row-reverse {\n    -ms-flex-direction: row-reverse !important;\n    flex-direction: row-reverse !important;\n  }\n  .flex-xl-column-reverse {\n    -ms-flex-direction: column-reverse !important;\n    flex-direction: column-reverse !important;\n  }\n  .flex-xl-wrap {\n    -ms-flex-wrap: wrap !important;\n    flex-wrap: wrap !important;\n  }\n  .flex-xl-nowrap {\n    -ms-flex-wrap: nowrap !important;\n    flex-wrap: nowrap !important;\n  }\n  .flex-xl-wrap-reverse {\n    -ms-flex-wrap: wrap-reverse !important;\n    flex-wrap: wrap-reverse !important;\n  }\n  .flex-xl-fill {\n    -ms-flex: 1 1 auto !important;\n    flex: 1 1 auto !important;\n  }\n  .flex-xl-grow-0 {\n    -ms-flex-positive: 0 !important;\n    flex-grow: 0 !important;\n  }\n  .flex-xl-grow-1 {\n    -ms-flex-positive: 1 !important;\n    flex-grow: 1 !important;\n  }\n  .flex-xl-shrink-0 {\n    -ms-flex-negative: 0 !important;\n    flex-shrink: 0 !important;\n  }\n  .flex-xl-shrink-1 {\n    -ms-flex-negative: 1 !important;\n    flex-shrink: 1 !important;\n  }\n  .justify-content-xl-start {\n    -ms-flex-pack: start !important;\n    justify-content: flex-start !important;\n  }\n  .justify-content-xl-end {\n    -ms-flex-pack: end !important;\n    justify-content: flex-end !important;\n  }\n  .justify-content-xl-center {\n    -ms-flex-pack: center !important;\n    justify-content: center !important;\n  }\n  .justify-content-xl-between {\n    -ms-flex-pack: justify !important;\n    justify-content: space-between !important;\n  }\n  .justify-content-xl-around {\n    -ms-flex-pack: distribute !important;\n    justify-content: space-around !important;\n  }\n  .align-items-xl-start {\n    -ms-flex-align: start !important;\n    align-items: flex-start !important;\n  }\n  .align-items-xl-end {\n    -ms-flex-align: end !important;\n    align-items: flex-end !important;\n  }\n  .align-items-xl-center {\n    -ms-flex-align: center !important;\n    align-items: center !important;\n  }\n  .align-items-xl-baseline {\n    -ms-flex-align: baseline !important;\n    align-items: baseline !important;\n  }\n  .align-items-xl-stretch {\n    -ms-flex-align: stretch !important;\n    align-items: stretch !important;\n  }\n  .align-content-xl-start {\n    -ms-flex-line-pack: start !important;\n    align-content: flex-start !important;\n  }\n  .align-content-xl-end {\n    -ms-flex-line-pack: end !important;\n    align-content: flex-end !important;\n  }\n  .align-content-xl-center {\n    -ms-flex-line-pack: center !important;\n    align-content: center !important;\n  }\n  .align-content-xl-between {\n    -ms-flex-line-pack: justify !important;\n    align-content: space-between !important;\n  }\n  .align-content-xl-around {\n    -ms-flex-line-pack: distribute !important;\n    align-content: space-around !important;\n  }\n  .align-content-xl-stretch {\n    -ms-flex-line-pack: stretch !important;\n    align-content: stretch !important;\n  }\n  .align-self-xl-auto {\n    -ms-flex-item-align: auto !important;\n    align-self: auto !important;\n  }\n  .align-self-xl-start {\n    -ms-flex-item-align: start !important;\n    align-self: flex-start !important;\n  }\n  .align-self-xl-end {\n    -ms-flex-item-align: end !important;\n    align-self: flex-end !important;\n  }\n  .align-self-xl-center {\n    -ms-flex-item-align: center !important;\n    align-self: center !important;\n  }\n  .align-self-xl-baseline {\n    -ms-flex-item-align: baseline !important;\n    align-self: baseline !important;\n  }\n  .align-self-xl-stretch {\n    -ms-flex-item-align: stretch !important;\n    align-self: stretch !important;\n  }\n}\n\n.float-left {\n  float: left !important;\n}\n\n.float-right {\n  float: right !important;\n}\n\n.float-none {\n  float: none !important;\n}\n\n@media (min-width: 576px) {\n  .float-sm-left {\n    float: left !important;\n  }\n  .float-sm-right {\n    float: right !important;\n  }\n  .float-sm-none {\n    float: none !important;\n  }\n}\n\n@media (min-width: 768px) {\n  .float-md-left {\n    float: left !important;\n  }\n  .float-md-right {\n    float: right !important;\n  }\n  .float-md-none {\n    float: none !important;\n  }\n}\n\n@media (min-width: 992px) {\n  .float-lg-left {\n    float: left !important;\n  }\n  .float-lg-right {\n    float: right !important;\n  }\n  .float-lg-none {\n    float: none !important;\n  }\n}\n\n@media (min-width: 1200px) {\n  .float-xl-left {\n    float: left !important;\n  }\n  .float-xl-right {\n    float: right !important;\n  }\n  .float-xl-none {\n    float: none !important;\n  }\n}\n\n.position-static {\n  position: static !important;\n}\n\n.position-relative {\n  position: relative !important;\n}\n\n.position-absolute {\n  position: absolute !important;\n}\n\n.position-fixed {\n  position: fixed !important;\n}\n\n.position-sticky {\n  position: -webkit-sticky !important;\n  position: sticky !important;\n}\n\n.fixed-top {\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  z-index: 1030;\n}\n\n.fixed-bottom {\n  position: fixed;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1030;\n}\n\n@supports ((position: -webkit-sticky) or (position: sticky)) {\n  .sticky-top {\n    position: -webkit-sticky;\n    position: sticky;\n    top: 0;\n    z-index: 1020;\n  }\n}\n\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border: 0;\n}\n\n.sr-only-focusable:active, .sr-only-focusable:focus {\n  position: static;\n  width: auto;\n  height: auto;\n  overflow: visible;\n  clip: auto;\n  white-space: normal;\n}\n\n.shadow-sm {\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075) !important;\n}\n\n.shadow {\n  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\n}\n\n.shadow-lg {\n  box-shadow: 0 1rem 3rem rgba(0, 0, 0, 0.175) !important;\n}\n\n.shadow-none {\n  box-shadow: none !important;\n}\n\n.w-25 {\n  width: 25% !important;\n}\n\n.w-50 {\n  width: 50% !important;\n}\n\n.w-75 {\n  width: 75% !important;\n}\n\n.w-100 {\n  width: 100% !important;\n}\n\n.w-auto {\n  width: auto !important;\n}\n\n.h-25 {\n  height: 25% !important;\n}\n\n.h-50 {\n  height: 50% !important;\n}\n\n.h-75 {\n  height: 75% !important;\n}\n\n.h-100 {\n  height: 100% !important;\n}\n\n.h-auto {\n  height: auto !important;\n}\n\n.mw-100 {\n  max-width: 100% !important;\n}\n\n.mh-100 {\n  max-height: 100% !important;\n}\n\n.m-0 {\n  margin: 0 !important;\n}\n\n.mt-0,\n.my-0 {\n  margin-top: 0 !important;\n}\n\n.mr-0,\n.mx-0 {\n  margin-right: 0 !important;\n}\n\n.mb-0,\n.my-0 {\n  margin-bottom: 0 !important;\n}\n\n.ml-0,\n.mx-0 {\n  margin-left: 0 !important;\n}\n\n.m-1 {\n  margin: 0.25rem !important;\n}\n\n.mt-1,\n.my-1 {\n  margin-top: 0.25rem !important;\n}\n\n.mr-1,\n.mx-1 {\n  margin-right: 0.25rem !important;\n}\n\n.mb-1,\n.my-1 {\n  margin-bottom: 0.25rem !important;\n}\n\n.ml-1,\n.mx-1 {\n  margin-left: 0.25rem !important;\n}\n\n.m-2 {\n  margin: 0.5rem !important;\n}\n\n.mt-2,\n.my-2 {\n  margin-top: 0.5rem !important;\n}\n\n.mr-2,\n.mx-2 {\n  margin-right: 0.5rem !important;\n}\n\n.mb-2,\n.my-2 {\n  margin-bottom: 0.5rem !important;\n}\n\n.ml-2,\n.mx-2 {\n  margin-left: 0.5rem !important;\n}\n\n.m-3 {\n  margin: 1rem !important;\n}\n\n.mt-3,\n.my-3 {\n  margin-top: 1rem !important;\n}\n\n.mr-3,\n.mx-3 {\n  margin-right: 1rem !important;\n}\n\n.mb-3,\n.my-3 {\n  margin-bottom: 1rem !important;\n}\n\n.ml-3,\n.mx-3 {\n  margin-left: 1rem !important;\n}\n\n.m-4 {\n  margin: 1.5rem !important;\n}\n\n.mt-4,\n.my-4 {\n  margin-top: 1.5rem !important;\n}\n\n.mr-4,\n.mx-4 {\n  margin-right: 1.5rem !important;\n}\n\n.mb-4,\n.my-4 {\n  margin-bottom: 1.5rem !important;\n}\n\n.ml-4,\n.mx-4 {\n  margin-left: 1.5rem !important;\n}\n\n.m-5 {\n  margin: 3rem !important;\n}\n\n.mt-5,\n.my-5 {\n  margin-top: 3rem !important;\n}\n\n.mr-5,\n.mx-5 {\n  margin-right: 3rem !important;\n}\n\n.mb-5,\n.my-5 {\n  margin-bottom: 3rem !important;\n}\n\n.ml-5,\n.mx-5 {\n  margin-left: 3rem !important;\n}\n\n.p-0 {\n  padding: 0 !important;\n}\n\n.pt-0,\n.py-0 {\n  padding-top: 0 !important;\n}\n\n.pr-0,\n.px-0 {\n  padding-right: 0 !important;\n}\n\n.pb-0,\n.py-0 {\n  padding-bottom: 0 !important;\n}\n\n.pl-0,\n.px-0 {\n  padding-left: 0 !important;\n}\n\n.p-1 {\n  padding: 0.25rem !important;\n}\n\n.pt-1,\n.py-1 {\n  padding-top: 0.25rem !important;\n}\n\n.pr-1,\n.px-1 {\n  padding-right: 0.25rem !important;\n}\n\n.pb-1,\n.py-1 {\n  padding-bottom: 0.25rem !important;\n}\n\n.pl-1,\n.px-1 {\n  padding-left: 0.25rem !important;\n}\n\n.p-2 {\n  padding: 0.5rem !important;\n}\n\n.pt-2,\n.py-2 {\n  padding-top: 0.5rem !important;\n}\n\n.pr-2,\n.px-2 {\n  padding-right: 0.5rem !important;\n}\n\n.pb-2,\n.py-2 {\n  padding-bottom: 0.5rem !important;\n}\n\n.pl-2,\n.px-2 {\n  padding-left: 0.5rem !important;\n}\n\n.p-3 {\n  padding: 1rem !important;\n}\n\n.pt-3,\n.py-3 {\n  padding-top: 1rem !important;\n}\n\n.pr-3,\n.px-3 {\n  padding-right: 1rem !important;\n}\n\n.pb-3,\n.py-3 {\n  padding-bottom: 1rem !important;\n}\n\n.pl-3,\n.px-3 {\n  padding-left: 1rem !important;\n}\n\n.p-4 {\n  padding: 1.5rem !important;\n}\n\n.pt-4,\n.py-4 {\n  padding-top: 1.5rem !important;\n}\n\n.pr-4,\n.px-4 {\n  padding-right: 1.5rem !important;\n}\n\n.pb-4,\n.py-4 {\n  padding-bottom: 1.5rem !important;\n}\n\n.pl-4,\n.px-4 {\n  padding-left: 1.5rem !important;\n}\n\n.p-5 {\n  padding: 3rem !important;\n}\n\n.pt-5,\n.py-5 {\n  padding-top: 3rem !important;\n}\n\n.pr-5,\n.px-5 {\n  padding-right: 3rem !important;\n}\n\n.pb-5,\n.py-5 {\n  padding-bottom: 3rem !important;\n}\n\n.pl-5,\n.px-5 {\n  padding-left: 3rem !important;\n}\n\n.m-auto {\n  margin: auto !important;\n}\n\n.mt-auto,\n.my-auto {\n  margin-top: auto !important;\n}\n\n.mr-auto,\n.mx-auto {\n  margin-right: auto !important;\n}\n\n.mb-auto,\n.my-auto {\n  margin-bottom: auto !important;\n}\n\n.ml-auto,\n.mx-auto {\n  margin-left: auto !important;\n}\n\n@media (min-width: 576px) {\n  .m-sm-0 {\n    margin: 0 !important;\n  }\n  .mt-sm-0,\n  .my-sm-0 {\n    margin-top: 0 !important;\n  }\n  .mr-sm-0,\n  .mx-sm-0 {\n    margin-right: 0 !important;\n  }\n  .mb-sm-0,\n  .my-sm-0 {\n    margin-bottom: 0 !important;\n  }\n  .ml-sm-0,\n  .mx-sm-0 {\n    margin-left: 0 !important;\n  }\n  .m-sm-1 {\n    margin: 0.25rem !important;\n  }\n  .mt-sm-1,\n  .my-sm-1 {\n    margin-top: 0.25rem !important;\n  }\n  .mr-sm-1,\n  .mx-sm-1 {\n    margin-right: 0.25rem !important;\n  }\n  .mb-sm-1,\n  .my-sm-1 {\n    margin-bottom: 0.25rem !important;\n  }\n  .ml-sm-1,\n  .mx-sm-1 {\n    margin-left: 0.25rem !important;\n  }\n  .m-sm-2 {\n    margin: 0.5rem !important;\n  }\n  .mt-sm-2,\n  .my-sm-2 {\n    margin-top: 0.5rem !important;\n  }\n  .mr-sm-2,\n  .mx-sm-2 {\n    margin-right: 0.5rem !important;\n  }\n  .mb-sm-2,\n  .my-sm-2 {\n    margin-bottom: 0.5rem !important;\n  }\n  .ml-sm-2,\n  .mx-sm-2 {\n    margin-left: 0.5rem !important;\n  }\n  .m-sm-3 {\n    margin: 1rem !important;\n  }\n  .mt-sm-3,\n  .my-sm-3 {\n    margin-top: 1rem !important;\n  }\n  .mr-sm-3,\n  .mx-sm-3 {\n    margin-right: 1rem !important;\n  }\n  .mb-sm-3,\n  .my-sm-3 {\n    margin-bottom: 1rem !important;\n  }\n  .ml-sm-3,\n  .mx-sm-3 {\n    margin-left: 1rem !important;\n  }\n  .m-sm-4 {\n    margin: 1.5rem !important;\n  }\n  .mt-sm-4,\n  .my-sm-4 {\n    margin-top: 1.5rem !important;\n  }\n  .mr-sm-4,\n  .mx-sm-4 {\n    margin-right: 1.5rem !important;\n  }\n  .mb-sm-4,\n  .my-sm-4 {\n    margin-bottom: 1.5rem !important;\n  }\n  .ml-sm-4,\n  .mx-sm-4 {\n    margin-left: 1.5rem !important;\n  }\n  .m-sm-5 {\n    margin: 3rem !important;\n  }\n  .mt-sm-5,\n  .my-sm-5 {\n    margin-top: 3rem !important;\n  }\n  .mr-sm-5,\n  .mx-sm-5 {\n    margin-right: 3rem !important;\n  }\n  .mb-sm-5,\n  .my-sm-5 {\n    margin-bottom: 3rem !important;\n  }\n  .ml-sm-5,\n  .mx-sm-5 {\n    margin-left: 3rem !important;\n  }\n  .p-sm-0 {\n    padding: 0 !important;\n  }\n  .pt-sm-0,\n  .py-sm-0 {\n    padding-top: 0 !important;\n  }\n  .pr-sm-0,\n  .px-sm-0 {\n    padding-right: 0 !important;\n  }\n  .pb-sm-0,\n  .py-sm-0 {\n    padding-bottom: 0 !important;\n  }\n  .pl-sm-0,\n  .px-sm-0 {\n    padding-left: 0 !important;\n  }\n  .p-sm-1 {\n    padding: 0.25rem !important;\n  }\n  .pt-sm-1,\n  .py-sm-1 {\n    padding-top: 0.25rem !important;\n  }\n  .pr-sm-1,\n  .px-sm-1 {\n    padding-right: 0.25rem !important;\n  }\n  .pb-sm-1,\n  .py-sm-1 {\n    padding-bottom: 0.25rem !important;\n  }\n  .pl-sm-1,\n  .px-sm-1 {\n    padding-left: 0.25rem !important;\n  }\n  .p-sm-2 {\n    padding: 0.5rem !important;\n  }\n  .pt-sm-2,\n  .py-sm-2 {\n    padding-top: 0.5rem !important;\n  }\n  .pr-sm-2,\n  .px-sm-2 {\n    padding-right: 0.5rem !important;\n  }\n  .pb-sm-2,\n  .py-sm-2 {\n    padding-bottom: 0.5rem !important;\n  }\n  .pl-sm-2,\n  .px-sm-2 {\n    padding-left: 0.5rem !important;\n  }\n  .p-sm-3 {\n    padding: 1rem !important;\n  }\n  .pt-sm-3,\n  .py-sm-3 {\n    padding-top: 1rem !important;\n  }\n  .pr-sm-3,\n  .px-sm-3 {\n    padding-right: 1rem !important;\n  }\n  .pb-sm-3,\n  .py-sm-3 {\n    padding-bottom: 1rem !important;\n  }\n  .pl-sm-3,\n  .px-sm-3 {\n    padding-left: 1rem !important;\n  }\n  .p-sm-4 {\n    padding: 1.5rem !important;\n  }\n  .pt-sm-4,\n  .py-sm-4 {\n    padding-top: 1.5rem !important;\n  }\n  .pr-sm-4,\n  .px-sm-4 {\n    padding-right: 1.5rem !important;\n  }\n  .pb-sm-4,\n  .py-sm-4 {\n    padding-bottom: 1.5rem !important;\n  }\n  .pl-sm-4,\n  .px-sm-4 {\n    padding-left: 1.5rem !important;\n  }\n  .p-sm-5 {\n    padding: 3rem !important;\n  }\n  .pt-sm-5,\n  .py-sm-5 {\n    padding-top: 3rem !important;\n  }\n  .pr-sm-5,\n  .px-sm-5 {\n    padding-right: 3rem !important;\n  }\n  .pb-sm-5,\n  .py-sm-5 {\n    padding-bottom: 3rem !important;\n  }\n  .pl-sm-5,\n  .px-sm-5 {\n    padding-left: 3rem !important;\n  }\n  .m-sm-auto {\n    margin: auto !important;\n  }\n  .mt-sm-auto,\n  .my-sm-auto {\n    margin-top: auto !important;\n  }\n  .mr-sm-auto,\n  .mx-sm-auto {\n    margin-right: auto !important;\n  }\n  .mb-sm-auto,\n  .my-sm-auto {\n    margin-bottom: auto !important;\n  }\n  .ml-sm-auto,\n  .mx-sm-auto {\n    margin-left: auto !important;\n  }\n}\n\n@media (min-width: 768px) {\n  .m-md-0 {\n    margin: 0 !important;\n  }\n  .mt-md-0,\n  .my-md-0 {\n    margin-top: 0 !important;\n  }\n  .mr-md-0,\n  .mx-md-0 {\n    margin-right: 0 !important;\n  }\n  .mb-md-0,\n  .my-md-0 {\n    margin-bottom: 0 !important;\n  }\n  .ml-md-0,\n  .mx-md-0 {\n    margin-left: 0 !important;\n  }\n  .m-md-1 {\n    margin: 0.25rem !important;\n  }\n  .mt-md-1,\n  .my-md-1 {\n    margin-top: 0.25rem !important;\n  }\n  .mr-md-1,\n  .mx-md-1 {\n    margin-right: 0.25rem !important;\n  }\n  .mb-md-1,\n  .my-md-1 {\n    margin-bottom: 0.25rem !important;\n  }\n  .ml-md-1,\n  .mx-md-1 {\n    margin-left: 0.25rem !important;\n  }\n  .m-md-2 {\n    margin: 0.5rem !important;\n  }\n  .mt-md-2,\n  .my-md-2 {\n    margin-top: 0.5rem !important;\n  }\n  .mr-md-2,\n  .mx-md-2 {\n    margin-right: 0.5rem !important;\n  }\n  .mb-md-2,\n  .my-md-2 {\n    margin-bottom: 0.5rem !important;\n  }\n  .ml-md-2,\n  .mx-md-2 {\n    margin-left: 0.5rem !important;\n  }\n  .m-md-3 {\n    margin: 1rem !important;\n  }\n  .mt-md-3,\n  .my-md-3 {\n    margin-top: 1rem !important;\n  }\n  .mr-md-3,\n  .mx-md-3 {\n    margin-right: 1rem !important;\n  }\n  .mb-md-3,\n  .my-md-3 {\n    margin-bottom: 1rem !important;\n  }\n  .ml-md-3,\n  .mx-md-3 {\n    margin-left: 1rem !important;\n  }\n  .m-md-4 {\n    margin: 1.5rem !important;\n  }\n  .mt-md-4,\n  .my-md-4 {\n    margin-top: 1.5rem !important;\n  }\n  .mr-md-4,\n  .mx-md-4 {\n    margin-right: 1.5rem !important;\n  }\n  .mb-md-4,\n  .my-md-4 {\n    margin-bottom: 1.5rem !important;\n  }\n  .ml-md-4,\n  .mx-md-4 {\n    margin-left: 1.5rem !important;\n  }\n  .m-md-5 {\n    margin: 3rem !important;\n  }\n  .mt-md-5,\n  .my-md-5 {\n    margin-top: 3rem !important;\n  }\n  .mr-md-5,\n  .mx-md-5 {\n    margin-right: 3rem !important;\n  }\n  .mb-md-5,\n  .my-md-5 {\n    margin-bottom: 3rem !important;\n  }\n  .ml-md-5,\n  .mx-md-5 {\n    margin-left: 3rem !important;\n  }\n  .p-md-0 {\n    padding: 0 !important;\n  }\n  .pt-md-0,\n  .py-md-0 {\n    padding-top: 0 !important;\n  }\n  .pr-md-0,\n  .px-md-0 {\n    padding-right: 0 !important;\n  }\n  .pb-md-0,\n  .py-md-0 {\n    padding-bottom: 0 !important;\n  }\n  .pl-md-0,\n  .px-md-0 {\n    padding-left: 0 !important;\n  }\n  .p-md-1 {\n    padding: 0.25rem !important;\n  }\n  .pt-md-1,\n  .py-md-1 {\n    padding-top: 0.25rem !important;\n  }\n  .pr-md-1,\n  .px-md-1 {\n    padding-right: 0.25rem !important;\n  }\n  .pb-md-1,\n  .py-md-1 {\n    padding-bottom: 0.25rem !important;\n  }\n  .pl-md-1,\n  .px-md-1 {\n    padding-left: 0.25rem !important;\n  }\n  .p-md-2 {\n    padding: 0.5rem !important;\n  }\n  .pt-md-2,\n  .py-md-2 {\n    padding-top: 0.5rem !important;\n  }\n  .pr-md-2,\n  .px-md-2 {\n    padding-right: 0.5rem !important;\n  }\n  .pb-md-2,\n  .py-md-2 {\n    padding-bottom: 0.5rem !important;\n  }\n  .pl-md-2,\n  .px-md-2 {\n    padding-left: 0.5rem !important;\n  }\n  .p-md-3 {\n    padding: 1rem !important;\n  }\n  .pt-md-3,\n  .py-md-3 {\n    padding-top: 1rem !important;\n  }\n  .pr-md-3,\n  .px-md-3 {\n    padding-right: 1rem !important;\n  }\n  .pb-md-3,\n  .py-md-3 {\n    padding-bottom: 1rem !important;\n  }\n  .pl-md-3,\n  .px-md-3 {\n    padding-left: 1rem !important;\n  }\n  .p-md-4 {\n    padding: 1.5rem !important;\n  }\n  .pt-md-4,\n  .py-md-4 {\n    padding-top: 1.5rem !important;\n  }\n  .pr-md-4,\n  .px-md-4 {\n    padding-right: 1.5rem !important;\n  }\n  .pb-md-4,\n  .py-md-4 {\n    padding-bottom: 1.5rem !important;\n  }\n  .pl-md-4,\n  .px-md-4 {\n    padding-left: 1.5rem !important;\n  }\n  .p-md-5 {\n    padding: 3rem !important;\n  }\n  .pt-md-5,\n  .py-md-5 {\n    padding-top: 3rem !important;\n  }\n  .pr-md-5,\n  .px-md-5 {\n    padding-right: 3rem !important;\n  }\n  .pb-md-5,\n  .py-md-5 {\n    padding-bottom: 3rem !important;\n  }\n  .pl-md-5,\n  .px-md-5 {\n    padding-left: 3rem !important;\n  }\n  .m-md-auto {\n    margin: auto !important;\n  }\n  .mt-md-auto,\n  .my-md-auto {\n    margin-top: auto !important;\n  }\n  .mr-md-auto,\n  .mx-md-auto {\n    margin-right: auto !important;\n  }\n  .mb-md-auto,\n  .my-md-auto {\n    margin-bottom: auto !important;\n  }\n  .ml-md-auto,\n  .mx-md-auto {\n    margin-left: auto !important;\n  }\n}\n\n@media (min-width: 992px) {\n  .m-lg-0 {\n    margin: 0 !important;\n  }\n  .mt-lg-0,\n  .my-lg-0 {\n    margin-top: 0 !important;\n  }\n  .mr-lg-0,\n  .mx-lg-0 {\n    margin-right: 0 !important;\n  }\n  .mb-lg-0,\n  .my-lg-0 {\n    margin-bottom: 0 !important;\n  }\n  .ml-lg-0,\n  .mx-lg-0 {\n    margin-left: 0 !important;\n  }\n  .m-lg-1 {\n    margin: 0.25rem !important;\n  }\n  .mt-lg-1,\n  .my-lg-1 {\n    margin-top: 0.25rem !important;\n  }\n  .mr-lg-1,\n  .mx-lg-1 {\n    margin-right: 0.25rem !important;\n  }\n  .mb-lg-1,\n  .my-lg-1 {\n    margin-bottom: 0.25rem !important;\n  }\n  .ml-lg-1,\n  .mx-lg-1 {\n    margin-left: 0.25rem !important;\n  }\n  .m-lg-2 {\n    margin: 0.5rem !important;\n  }\n  .mt-lg-2,\n  .my-lg-2 {\n    margin-top: 0.5rem !important;\n  }\n  .mr-lg-2,\n  .mx-lg-2 {\n    margin-right: 0.5rem !important;\n  }\n  .mb-lg-2,\n  .my-lg-2 {\n    margin-bottom: 0.5rem !important;\n  }\n  .ml-lg-2,\n  .mx-lg-2 {\n    margin-left: 0.5rem !important;\n  }\n  .m-lg-3 {\n    margin: 1rem !important;\n  }\n  .mt-lg-3,\n  .my-lg-3 {\n    margin-top: 1rem !important;\n  }\n  .mr-lg-3,\n  .mx-lg-3 {\n    margin-right: 1rem !important;\n  }\n  .mb-lg-3,\n  .my-lg-3 {\n    margin-bottom: 1rem !important;\n  }\n  .ml-lg-3,\n  .mx-lg-3 {\n    margin-left: 1rem !important;\n  }\n  .m-lg-4 {\n    margin: 1.5rem !important;\n  }\n  .mt-lg-4,\n  .my-lg-4 {\n    margin-top: 1.5rem !important;\n  }\n  .mr-lg-4,\n  .mx-lg-4 {\n    margin-right: 1.5rem !important;\n  }\n  .mb-lg-4,\n  .my-lg-4 {\n    margin-bottom: 1.5rem !important;\n  }\n  .ml-lg-4,\n  .mx-lg-4 {\n    margin-left: 1.5rem !important;\n  }\n  .m-lg-5 {\n    margin: 3rem !important;\n  }\n  .mt-lg-5,\n  .my-lg-5 {\n    margin-top: 3rem !important;\n  }\n  .mr-lg-5,\n  .mx-lg-5 {\n    margin-right: 3rem !important;\n  }\n  .mb-lg-5,\n  .my-lg-5 {\n    margin-bottom: 3rem !important;\n  }\n  .ml-lg-5,\n  .mx-lg-5 {\n    margin-left: 3rem !important;\n  }\n  .p-lg-0 {\n    padding: 0 !important;\n  }\n  .pt-lg-0,\n  .py-lg-0 {\n    padding-top: 0 !important;\n  }\n  .pr-lg-0,\n  .px-lg-0 {\n    padding-right: 0 !important;\n  }\n  .pb-lg-0,\n  .py-lg-0 {\n    padding-bottom: 0 !important;\n  }\n  .pl-lg-0,\n  .px-lg-0 {\n    padding-left: 0 !important;\n  }\n  .p-lg-1 {\n    padding: 0.25rem !important;\n  }\n  .pt-lg-1,\n  .py-lg-1 {\n    padding-top: 0.25rem !important;\n  }\n  .pr-lg-1,\n  .px-lg-1 {\n    padding-right: 0.25rem !important;\n  }\n  .pb-lg-1,\n  .py-lg-1 {\n    padding-bottom: 0.25rem !important;\n  }\n  .pl-lg-1,\n  .px-lg-1 {\n    padding-left: 0.25rem !important;\n  }\n  .p-lg-2 {\n    padding: 0.5rem !important;\n  }\n  .pt-lg-2,\n  .py-lg-2 {\n    padding-top: 0.5rem !important;\n  }\n  .pr-lg-2,\n  .px-lg-2 {\n    padding-right: 0.5rem !important;\n  }\n  .pb-lg-2,\n  .py-lg-2 {\n    padding-bottom: 0.5rem !important;\n  }\n  .pl-lg-2,\n  .px-lg-2 {\n    padding-left: 0.5rem !important;\n  }\n  .p-lg-3 {\n    padding: 1rem !important;\n  }\n  .pt-lg-3,\n  .py-lg-3 {\n    padding-top: 1rem !important;\n  }\n  .pr-lg-3,\n  .px-lg-3 {\n    padding-right: 1rem !important;\n  }\n  .pb-lg-3,\n  .py-lg-3 {\n    padding-bottom: 1rem !important;\n  }\n  .pl-lg-3,\n  .px-lg-3 {\n    padding-left: 1rem !important;\n  }\n  .p-lg-4 {\n    padding: 1.5rem !important;\n  }\n  .pt-lg-4,\n  .py-lg-4 {\n    padding-top: 1.5rem !important;\n  }\n  .pr-lg-4,\n  .px-lg-4 {\n    padding-right: 1.5rem !important;\n  }\n  .pb-lg-4,\n  .py-lg-4 {\n    padding-bottom: 1.5rem !important;\n  }\n  .pl-lg-4,\n  .px-lg-4 {\n    padding-left: 1.5rem !important;\n  }\n  .p-lg-5 {\n    padding: 3rem !important;\n  }\n  .pt-lg-5,\n  .py-lg-5 {\n    padding-top: 3rem !important;\n  }\n  .pr-lg-5,\n  .px-lg-5 {\n    padding-right: 3rem !important;\n  }\n  .pb-lg-5,\n  .py-lg-5 {\n    padding-bottom: 3rem !important;\n  }\n  .pl-lg-5,\n  .px-lg-5 {\n    padding-left: 3rem !important;\n  }\n  .m-lg-auto {\n    margin: auto !important;\n  }\n  .mt-lg-auto,\n  .my-lg-auto {\n    margin-top: auto !important;\n  }\n  .mr-lg-auto,\n  .mx-lg-auto {\n    margin-right: auto !important;\n  }\n  .mb-lg-auto,\n  .my-lg-auto {\n    margin-bottom: auto !important;\n  }\n  .ml-lg-auto,\n  .mx-lg-auto {\n    margin-left: auto !important;\n  }\n}\n\n@media (min-width: 1200px) {\n  .m-xl-0 {\n    margin: 0 !important;\n  }\n  .mt-xl-0,\n  .my-xl-0 {\n    margin-top: 0 !important;\n  }\n  .mr-xl-0,\n  .mx-xl-0 {\n    margin-right: 0 !important;\n  }\n  .mb-xl-0,\n  .my-xl-0 {\n    margin-bottom: 0 !important;\n  }\n  .ml-xl-0,\n  .mx-xl-0 {\n    margin-left: 0 !important;\n  }\n  .m-xl-1 {\n    margin: 0.25rem !important;\n  }\n  .mt-xl-1,\n  .my-xl-1 {\n    margin-top: 0.25rem !important;\n  }\n  .mr-xl-1,\n  .mx-xl-1 {\n    margin-right: 0.25rem !important;\n  }\n  .mb-xl-1,\n  .my-xl-1 {\n    margin-bottom: 0.25rem !important;\n  }\n  .ml-xl-1,\n  .mx-xl-1 {\n    margin-left: 0.25rem !important;\n  }\n  .m-xl-2 {\n    margin: 0.5rem !important;\n  }\n  .mt-xl-2,\n  .my-xl-2 {\n    margin-top: 0.5rem !important;\n  }\n  .mr-xl-2,\n  .mx-xl-2 {\n    margin-right: 0.5rem !important;\n  }\n  .mb-xl-2,\n  .my-xl-2 {\n    margin-bottom: 0.5rem !important;\n  }\n  .ml-xl-2,\n  .mx-xl-2 {\n    margin-left: 0.5rem !important;\n  }\n  .m-xl-3 {\n    margin: 1rem !important;\n  }\n  .mt-xl-3,\n  .my-xl-3 {\n    margin-top: 1rem !important;\n  }\n  .mr-xl-3,\n  .mx-xl-3 {\n    margin-right: 1rem !important;\n  }\n  .mb-xl-3,\n  .my-xl-3 {\n    margin-bottom: 1rem !important;\n  }\n  .ml-xl-3,\n  .mx-xl-3 {\n    margin-left: 1rem !important;\n  }\n  .m-xl-4 {\n    margin: 1.5rem !important;\n  }\n  .mt-xl-4,\n  .my-xl-4 {\n    margin-top: 1.5rem !important;\n  }\n  .mr-xl-4,\n  .mx-xl-4 {\n    margin-right: 1.5rem !important;\n  }\n  .mb-xl-4,\n  .my-xl-4 {\n    margin-bottom: 1.5rem !important;\n  }\n  .ml-xl-4,\n  .mx-xl-4 {\n    margin-left: 1.5rem !important;\n  }\n  .m-xl-5 {\n    margin: 3rem !important;\n  }\n  .mt-xl-5,\n  .my-xl-5 {\n    margin-top: 3rem !important;\n  }\n  .mr-xl-5,\n  .mx-xl-5 {\n    margin-right: 3rem !important;\n  }\n  .mb-xl-5,\n  .my-xl-5 {\n    margin-bottom: 3rem !important;\n  }\n  .ml-xl-5,\n  .mx-xl-5 {\n    margin-left: 3rem !important;\n  }\n  .p-xl-0 {\n    padding: 0 !important;\n  }\n  .pt-xl-0,\n  .py-xl-0 {\n    padding-top: 0 !important;\n  }\n  .pr-xl-0,\n  .px-xl-0 {\n    padding-right: 0 !important;\n  }\n  .pb-xl-0,\n  .py-xl-0 {\n    padding-bottom: 0 !important;\n  }\n  .pl-xl-0,\n  .px-xl-0 {\n    padding-left: 0 !important;\n  }\n  .p-xl-1 {\n    padding: 0.25rem !important;\n  }\n  .pt-xl-1,\n  .py-xl-1 {\n    padding-top: 0.25rem !important;\n  }\n  .pr-xl-1,\n  .px-xl-1 {\n    padding-right: 0.25rem !important;\n  }\n  .pb-xl-1,\n  .py-xl-1 {\n    padding-bottom: 0.25rem !important;\n  }\n  .pl-xl-1,\n  .px-xl-1 {\n    padding-left: 0.25rem !important;\n  }\n  .p-xl-2 {\n    padding: 0.5rem !important;\n  }\n  .pt-xl-2,\n  .py-xl-2 {\n    padding-top: 0.5rem !important;\n  }\n  .pr-xl-2,\n  .px-xl-2 {\n    padding-right: 0.5rem !important;\n  }\n  .pb-xl-2,\n  .py-xl-2 {\n    padding-bottom: 0.5rem !important;\n  }\n  .pl-xl-2,\n  .px-xl-2 {\n    padding-left: 0.5rem !important;\n  }\n  .p-xl-3 {\n    padding: 1rem !important;\n  }\n  .pt-xl-3,\n  .py-xl-3 {\n    padding-top: 1rem !important;\n  }\n  .pr-xl-3,\n  .px-xl-3 {\n    padding-right: 1rem !important;\n  }\n  .pb-xl-3,\n  .py-xl-3 {\n    padding-bottom: 1rem !important;\n  }\n  .pl-xl-3,\n  .px-xl-3 {\n    padding-left: 1rem !important;\n  }\n  .p-xl-4 {\n    padding: 1.5rem !important;\n  }\n  .pt-xl-4,\n  .py-xl-4 {\n    padding-top: 1.5rem !important;\n  }\n  .pr-xl-4,\n  .px-xl-4 {\n    padding-right: 1.5rem !important;\n  }\n  .pb-xl-4,\n  .py-xl-4 {\n    padding-bottom: 1.5rem !important;\n  }\n  .pl-xl-4,\n  .px-xl-4 {\n    padding-left: 1.5rem !important;\n  }\n  .p-xl-5 {\n    padding: 3rem !important;\n  }\n  .pt-xl-5,\n  .py-xl-5 {\n    padding-top: 3rem !important;\n  }\n  .pr-xl-5,\n  .px-xl-5 {\n    padding-right: 3rem !important;\n  }\n  .pb-xl-5,\n  .py-xl-5 {\n    padding-bottom: 3rem !important;\n  }\n  .pl-xl-5,\n  .px-xl-5 {\n    padding-left: 3rem !important;\n  }\n  .m-xl-auto {\n    margin: auto !important;\n  }\n  .mt-xl-auto,\n  .my-xl-auto {\n    margin-top: auto !important;\n  }\n  .mr-xl-auto,\n  .mx-xl-auto {\n    margin-right: auto !important;\n  }\n  .mb-xl-auto,\n  .my-xl-auto {\n    margin-bottom: auto !important;\n  }\n  .ml-xl-auto,\n  .mx-xl-auto {\n    margin-left: auto !important;\n  }\n}\n\n.text-monospace {\n  font-family: SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;\n}\n\n.text-justify {\n  text-align: justify !important;\n}\n\n.text-nowrap {\n  white-space: nowrap !important;\n}\n\n.text-truncate {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n\n.text-left {\n  text-align: left !important;\n}\n\n.text-right {\n  text-align: right !important;\n}\n\n.text-center {\n  text-align: center !important;\n}\n\n@media (min-width: 576px) {\n  .text-sm-left {\n    text-align: left !important;\n  }\n  .text-sm-right {\n    text-align: right !important;\n  }\n  .text-sm-center {\n    text-align: center !important;\n  }\n}\n\n@media (min-width: 768px) {\n  .text-md-left {\n    text-align: left !important;\n  }\n  .text-md-right {\n    text-align: right !important;\n  }\n  .text-md-center {\n    text-align: center !important;\n  }\n}\n\n@media (min-width: 992px) {\n  .text-lg-left {\n    text-align: left !important;\n  }\n  .text-lg-right {\n    text-align: right !important;\n  }\n  .text-lg-center {\n    text-align: center !important;\n  }\n}\n\n@media (min-width: 1200px) {\n  .text-xl-left {\n    text-align: left !important;\n  }\n  .text-xl-right {\n    text-align: right !important;\n  }\n  .text-xl-center {\n    text-align: center !important;\n  }\n}\n\n.text-lowercase {\n  text-transform: lowercase !important;\n}\n\n.text-uppercase {\n  text-transform: uppercase !important;\n}\n\n.text-capitalize {\n  text-transform: capitalize !important;\n}\n\n.font-weight-light {\n  font-weight: 300 !important;\n}\n\n.font-weight-normal {\n  font-weight: 400 !important;\n}\n\n.font-weight-bold {\n  font-weight: 700 !important;\n}\n\n.font-italic {\n  font-style: italic !important;\n}\n\n.text-white {\n  color: #fff !important;\n}\n\n.text-primary {\n  color: #007bff !important;\n}\n\na.text-primary:hover, a.text-primary:focus {\n  color: #0062cc !important;\n}\n\n.text-secondary {\n  color: #6c757d !important;\n}\n\na.text-secondary:hover, a.text-secondary:focus {\n  color: #545b62 !important;\n}\n\n.text-success {\n  color: #28a745 !important;\n}\n\na.text-success:hover, a.text-success:focus {\n  color: #1e7e34 !important;\n}\n\n.text-info {\n  color: #17a2b8 !important;\n}\n\na.text-info:hover, a.text-info:focus {\n  color: #117a8b !important;\n}\n\n.text-warning {\n  color: #ffc107 !important;\n}\n\na.text-warning:hover, a.text-warning:focus {\n  color: #d39e00 !important;\n}\n\n.text-danger {\n  color: #dc3545 !important;\n}\n\na.text-danger:hover, a.text-danger:focus {\n  color: #bd2130 !important;\n}\n\n.text-light {\n  color: #f8f9fa !important;\n}\n\na.text-light:hover, a.text-light:focus {\n  color: #dae0e5 !important;\n}\n\n.text-dark {\n  color: #343a40 !important;\n}\n\na.text-dark:hover, a.text-dark:focus {\n  color: #1d2124 !important;\n}\n\n.text-body {\n  color: #212529 !important;\n}\n\n.text-muted {\n  color: #6c757d !important;\n}\n\n.text-black-50 {\n  color: rgba(0, 0, 0, 0.5) !important;\n}\n\n.text-white-50 {\n  color: rgba(255, 255, 255, 0.5) !important;\n}\n\n.text-hide {\n  font: 0/0 a;\n  color: transparent;\n  text-shadow: none;\n  background-color: transparent;\n  border: 0;\n}\n\n.visible {\n  visibility: visible !important;\n}\n\n.invisible {\n  visibility: hidden !important;\n}\n\n@media print {\n  *,\n  *::before,\n  *::after {\n    text-shadow: none !important;\n    box-shadow: none !important;\n  }\n  a:not(.btn) {\n    text-decoration: underline;\n  }\n  abbr[title]::after {\n    content: " (" attr(title) ")";\n  }\n  pre {\n    white-space: pre-wrap !important;\n  }\n  pre,\n  blockquote {\n    border: 1px solid #adb5bd;\n    page-break-inside: avoid;\n  }\n  thead {\n    display: table-header-group;\n  }\n  tr,\n  img {\n    page-break-inside: avoid;\n  }\n  p,\n  h2,\n  h3 {\n    orphans: 3;\n    widows: 3;\n  }\n  h2,\n  h3 {\n    page-break-after: avoid;\n  }\n  @page {\n    size: a3;\n  }\n  body {\n    min-width: 992px !important;\n  }\n  .container {\n    min-width: 992px !important;\n  }\n  .navbar {\n    display: none;\n  }\n  .badge {\n    border: 1px solid #000;\n  }\n  .table {\n    border-collapse: collapse !important;\n  }\n  .table td,\n  .table th {\n    background-color: #fff !important;\n  }\n  .table-bordered th,\n  .table-bordered td {\n    border: 1px solid #dee2e6 !important;\n  }\n  .table-dark {\n    color: inherit;\n  }\n  .table-dark th,\n  .table-dark td,\n  .table-dark thead th,\n  .table-dark tbody + tbody {\n    border-color: #dee2e6;\n  }\n  .table .thead-dark th {\n    color: inherit;\n    border-color: #dee2e6;\n  }\n}',""])},function(t,n){t.exports=function(t){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!t||"string"!=typeof t)return t;var e=n.protocol+"//"+n.host,r=e+n.pathname.replace(/\/[^\/]*$/,"/");return t.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(t,n){var o,i=n.trim().replace(/^"(.*)"$/,function(t,n){return n}).replace(/^'(.*)'$/,function(t,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?t:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?e+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(t,n,e){var r=e(16);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};e(5)(r,o);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(4)(!1)).push([t.i,".modal {\n    top: 40%;\n}\n\n.modal-title {\n    color: #000;\n}\n\n.task-example {\n    text-align: center;\n    padding: 15px;\n    font-size: 20px;\n}\n",""])},function(t,n,e){var r=e(18);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};e(5)(r,o);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(4)(!1)).push([t.i,".progress-outer{\n    background: #343a40;\n    border-radius: 50px;\n    padding: 12px;\n    margin: -15px 0;\n}\n\n.progress{\n    height: 25px;\n    margin: 0;\n    overflow: hidden;\n    border-radius: 50px;\n    background: #343a40;\n}\n\n.progress .progress-bar{\n    border-radius: 50px;\n}\n\n.progress-bar.active{\n    animation: reverse progress-bar-stripes 0.40s linear infinite, animate-positive 2s;\n}\n\n@-webkit-keyframes animate-positive{\n    0% { width: 0%; }\n}\n\n@keyframes animate-positive {\n    0% { width: 0%; }\n}\n",""])},function(t,n,e){var r=e(20);"string"==typeof r&&(r=[[t.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};e(5)(r,o);r.locals&&(t.exports=r.locals)},function(t,n,e){(t.exports=e(4)(!1)).push([t.i,".card-title {\n    margin: 15px;\n}\n\n#scoreModal.modal {\n    top: 0;\n}\n",""])},function(t,n,e){"use strict";e.r(n);e(8),e(9);var r=e(0),o=e.n(r);function i(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var a=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.playerName=""}var n,e,r;return n=t,(e=[{key:"setPlayerName",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";this.playerName=t}}])&&i(n.prototype,e),r&&i(n,r),t}();e(11),e(15);function s(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var l=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,r;return n=t,r=[{key:"draw",value:function(){document.querySelector("body").insertAdjacentHTML("beforeend",'\n\x3c!-- Modal --\x3e\n<div class="modal fade" id="castModal" tabindex="-1" role="dialog" aria-labelledby="ModalLabel" aria-hidden="true" data-backdrop="static" data-keyboard="false">\n  <div class="modal-dialog" role="document">\n    <div class="modal-content">\n      <div class="modal-header">\n        <h5 class="modal-title" id="ModalLabel">Choose your spell</h5>\n      </div>\n      <div class="modal-body">\n        Modal body content\n      </div>\n    </div>\n  </div>\n</div>\n\n\x3c!-- Scoreboard Modal --\x3e\n<div class="modal fade" id="scoreModal" tabindex="-1" role="dialog" aria-labelledby="scoreModalLabel" aria-hidden="true">\n  <div class="modal-dialog" role="document">\n    <div class="modal-content">\n      \n    </div>\n  </div>\n</div>\n')}}],(e=null)&&s(n.prototype,e),r&&s(n,r),t}();function d(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function c(t,n,e){return n&&d(t.prototype,n),e&&d(t,e),t}var u=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.localPlayerName=""}return c(t,null,[{key:"draw",value:function(){document.querySelector(".js-choose").insertAdjacentHTML("beforeend",'\n<main>\n  <section id="choosePlayerName">\n    <form class="js-form">\n    <h1>What your name, Stranger?</h1>\n    <label>Type here: <input type="text" class="js-player-name form-control" required="" maxlength="15"></label>\n    <input type="submit" class="btn btn-outline-light keyboard-support" value="BATTLE"></form>\n  </section>\n</main>\n')}},{key:"empty",value:function(){o()(".js-choose").empty()}}]),c(t,null,[{key:"getNewPlayerName",value:function(){return t.empty(),t.draw(),new Promise(function(t){o()("#choosePlayerName .js-form").on("submit",function(n){n.preventDefault();var e=o()("#choosePlayerName .js-player-name").val();o()(".landing").remove(),t(e)})})}}]),t}(),h=e(6),f=function(t){return new Promise(function(n){setTimeout(function(){n()},t)})},p=function(t){return t[Math.floor(Math.random()*t.length)]},m=function(t){return Math.floor(Math.random()*Math.floor(t))};function g(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var b=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.name=this.generateName(),this.damage=20,this.hp=100,this.sounds={}}var n,e,r;return n=t,(e=[{key:"generateName",value:function(){return this.name="".concat(p(h[0].adj)," ").concat(p(h[0].race)," ").concat(p(h[0].name)),this.name}},{key:"dealDamage",value:function(t){return t.hp-=this.damage,this.damage}},{key:"generateSounds",value:function(){this.sounds.hit=new Audio,this.sounds.hit.src="./assets/audio/player/arrowDmg.wav",this.sounds.hurt={},this.sounds.hurt.hurt0=new Audio,this.sounds.hurt.hurt0.src="./assets/audio/monster/monsterhurt1.wav",this.sounds.hurt.hurt1=new Audio,this.sounds.hurt.hurt1.src="./assets/audio/monster/monsterhurt2.wav",this.sounds.hurt.hurt2=new Audio,this.sounds.hurt.hurt2.src="./assets/audio/monster/monsterhurt3.wav"}}])&&g(n.prototype,e),r&&g(n,r),t}();function v(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var x=function(){function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",e=arguments.length>1?arguments[1]:void 0;!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.name=n,this.playerClass=e,this.damage=20,this.hp=100,this.healPower=20,this.sounds={}}var n,e,r;return n=t,(e=[{key:"dealDamage",value:function(t){return t.hp-=this.damage,this.damage}},{key:"heal",value:function(){return this.hp+=this.healPower,this.healPower}},{key:"generateSounds",value:function(){this.sounds.run=new Audio,this.sounds.run.src="./assets/audio/player/playerrun.wav",this.sounds.hit=new Audio,this.sounds.hit.src="./assets/audio/player/arrowDmg.wav",this.sounds.heal=new Audio,this.sounds.heal.src="./assets/audio/player/heal.mp3",this.sounds.hurt={},this.sounds.hurt.hurt0=new Audio,this.sounds.hurt.hurt0.src="./assets/audio/player/manhurt1.ogg",this.sounds.hurt.hurt1=new Audio,this.sounds.hurt.hurt1.src="./assets/audio/player/manhurt2.wav",this.sounds.hurt.hurt2=new Audio,this.sounds.hurt.hurt2.src="./assets/audio/player/manhurt3.wav",this.sounds.hurt.hurt3=new Audio,this.sounds.hurt.hurt3.src="./assets/audio/player/manhurt4.mp3"}}])&&v(n.prototype,e),r&&v(n,r),t}(),y=e(1),w=e.n(y),_=e(3);function k(t,n,e,r,o,i,a){try{var s=t[i](a),l=s.value}catch(t){return void e(t)}s.done?n(l):Promise.resolve(l).then(r,o)}function S(t){return function(){var n=this,e=arguments;return new Promise(function(r,o){var i=t.apply(n,e);function a(t){k(i,r,o,a,s,"next",t)}function s(t){k(i,r,o,a,s,"throw",t)}a(void 0)})}}function C(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var T=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.stage=new w.a.Stage({container:"playground",width:window.innerWidth,height:window.innerHeight}),this.player=null,this.monsterScale=.3,this.monsterLayer=new w.a.Layer}var n,e,r;return n=t,(e=[{key:"drawParallax",value:function(){var t=new w.a.Layer,n=this.defineParallaxSprites(),e=n.parallax1,r=n.parallax2,o=n.parallax3,i=n.parallax4,a=n.parallax5;new w.a.Animation(function(){a.setY(window.innerHeight-145),e.x()<-1920?e.setX(0):e.setX(e.x()-.4)},t).start(),t.add(e),t.add(r),t.add(o),t.add(i),t.add(a),this.stage.add(t),t.draw()}},{key:"defineParallaxSprites",value:function(){var t=m(3),n=new Image;n.src="./assets/img/bg/style".concat(t,"/parallax1.png");var e=new w.a.Image({x:0,y:0,image:n,width:3840,height:1080}),r=new Image;r.src="./assets/img/bg/style".concat(t,"/parallax2.png");var o=new w.a.Image({x:0,y:0,image:r,width:1920,height:1080}),i=new Image;i.src="./assets/img/bg/style".concat(t,"/parallax3.png");var a=new w.a.Image({x:0,y:0,image:i,width:3840,height:1080});a.setX(-1920);var s=new Image;s.src="./assets/img/bg/style".concat(t,"/parallax4.png");var l=new w.a.Image({x:0,y:0,image:s,width:1920,height:1080}),d=new Image;return d.src="./assets/img/bg/style".concat(t,"/parallax5.png"),{parallax1:e,parallax2:o,parallax3:a,parallax4:l,parallax5:new w.a.Image({x:0,y:0,image:d,width:1920,height:145})}}},{key:"drawPlayer",value:function(){this.drawParallax();var t=new w.a.Layer,n=new Image;n.src="./assets/img/characters/knight/knightsprite.png";var e={stand:_[0].stand,shot:_[0].shot,run:_[0].run,walk:_[0].walk,jump:_[0].jump,hit:_[0].hit,die:_[0].die};this.player=new w.a.Sprite({x:0,y:window.innerHeight-512,image:n,animation:"stand",animations:e,frameRate:15,frameIndex:0}),t.add(this.player),this.stage.add(t),this.player.start();var r=this.player,o=this.stage.getWidth()-1024;o<0&&(o=0),this.playerRunForward=new w.a.Animation(function(t){r.x()<=o&&r.setX(r.x()+o/t.frameRate)},t),this.playerRunBack=new w.a.Animation(function(t){r.x()>=0&&r.setX(r.x()-o/t.frameRate)},t)}},{key:"drawMonster",value:function(){this.monsterLayer.destroyChildren();var t=new Image;t.src="./assets/img/monsters/monstersSprites.png";var n=window.innerWidth-256,e=window.innerHeight-380,r=this.defineMonsterSprite(n,e,t),o=r.head,i=r.leftArm,a=r.body,s=r.rightArm,l=r.leftLeg,d=r.pants,c=r.rightLeg,u=r.weapon;this.monsterStandAnim=this.defineMonsterStandAnim(n,e,o,i,s,u,this.monsterLayer),this.monsterStandAnim.start(),this.monsterShotAnim=this.defineMonsterShotAnim(s,u,this.monsterLayer),this.monsterLayer.add(l),this.monsterLayer.add(c),this.monsterLayer.add(s),this.monsterLayer.add(u),this.monsterLayer.add(a),this.monsterLayer.add(d),this.monsterLayer.add(o),this.monsterLayer.add(i),this.stage.add(this.monsterLayer),this.monsterLayer.draw()}},{key:"defineMonsterStandAnim",value:function(){for(var t=arguments.length,n=new Array(t),e=0;e<t;e++)n[e]=arguments[e];var r=n[0],o=n[1],i=n[2],a=n[3],s=n[4],l=n[5],d=n[6];return new w.a.Animation(function(t){i.setY(5*Math.sin(2*t.time*Math.PI/1500)+o),a.setY(5*Math.sin(2*t.time*Math.PI/1500)+o+118),s.setY(5*Math.sin(2*t.time*Math.PI/1500)+o+118),s.setX(5*Math.sin(2*t.time*Math.PI/1500)+r-113),l.setY(5*Math.sin(2*t.time*Math.PI/1500)+o+70),l.setX(5*Math.sin(2*t.time*Math.PI/1500)+r-230)},d)}},{key:"defineMonsterShotAnim",value:function(){for(var t=arguments.length,n=new Array(t),e=0;e<t;e++)n[e]=arguments[e];var r=n[0],o=n[1],i=n[2],a=this.stage.getWidth()-1024;a<0&&(a=Math.abs(a));var s=o.x();return new w.a.Animation(function(t){var n=50*t.timeDiff/1e3;r.rotation()>=0&&r.rotation()<70?(r.rotate(n),o.setX(o.x()-a/t.frameRate)):(r.rotate(-r.rotation()),o.setX(s))},i)}},{key:"defineMonsterSprite",value:function(t,n,e){var r=new w.a.Image({x:t,y:n,image:e,width:529,height:697,scale:{x:-this.monsterScale,y:this.monsterScale}});r.crop({x:0,y:697*m(6),width:529,height:697});var o=new w.a.Image({x:t+11,y:n+118,image:e,width:529,height:697,scale:{x:-this.monsterScale,y:this.monsterScale}});o.crop({x:1058,y:697*m(6),width:529,height:697});var i=new w.a.Image({x:t-31,y:n+147,image:e,width:529,height:697,scale:{x:-this.monsterScale,y:this.monsterScale}});i.crop({x:1587,y:697*m(6),width:529,height:697});var a=new w.a.Image({x:t-113,y:n+118,image:e,width:529,height:697,scale:{x:-this.monsterScale,y:this.monsterScale},offset:{x:80,y:0}});a.crop({x:2116,y:697*m(6),width:529,height:697});var s=new w.a.Image({x:t-28,y:n+210,image:e,width:529,height:697,scale:{x:-this.monsterScale,y:this.monsterScale}});s.crop({x:3174,y:697*m(6),width:529,height:697});var l=new w.a.Image({x:t-35,y:n+220,image:e,width:529,height:697,scale:{x:-this.monsterScale,y:this.monsterScale}});l.crop({x:2645,y:697*m(6),width:529,height:697});var d=new w.a.Image({x:t-83,y:n+220,image:e,width:529,height:697,scale:{x:-this.monsterScale,y:this.monsterScale}});d.crop({x:3703,y:697*m(6),width:529,height:697});var c=new w.a.Image({x:t-240,y:n+70,image:e,width:529,height:697,scale:{x:-this.monsterScale,y:this.monsterScale}});return c.crop({x:4232,y:697*m(6),width:529,height:697}),c.rotate(-45),{head:r,leftArm:o,body:i,rightArm:a,leftLeg:l,pants:s,rightLeg:d,weapon:c}}},{key:"setPlayerAnimation",value:function(t){this.player.setAnimation(t)}},{key:"setMonsterAnimation",value:function(t){this.monster.setAnimation(t)}},{key:"healAnimation",value:function(){var t=new w.a.Layer,n=new Image;n.src="./assets/img/characters/knight/heal.png";var e={stand:_[0].heal},r=new w.a.Sprite({x:30,y:window.innerHeight-512,image:n,animation:"stand",animations:e,frameRate:15,frameIndex:0,scale:{x:3,y:3}});t.add(r),this.stage.add(t),r.start(),r.on("frameIndexChange",S(regeneratorRuntime.mark(function n(){return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:if(24!==r.frameIndex()){n.next=5;break}return n.next=3,f(70);case 3:r.stop(),t.destroy();case 5:case"end":return n.stop()}},n,this)})))}}])&&C(n.prototype,e),r&&C(n,r),t}();e(17);function E(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var A=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,r;return n=t,r=[{key:"draw",value:function(){document.querySelector("body").insertAdjacentHTML("afterbegin",'\n<nav class="navbar navbar-expand-md navbar-dark bg-transparent fixed-top">\n  <div class="col-sm-4">\n  <div class="text-center">\n    <span class="btn btn-dark player-name text-center">Player Name</span>\n  </div>\n    <div class="progress-outer">\n      <div class="progress">\n          <div id="playerHP" class="progress-bar bg-danger progress-bar-striped active" style="width:100%;"></div>\n      </div>\n    </div>\n  </div>\n  <div class="col-sm-4">\n  </div>\n  <div class="col-sm-4">\n  <div class="text-center">\n    <span class="btn btn-dark monster-name align-middle">Monster Name</span>\n  </div>\n  <div class="progress-outer">\n    <div class="progress">\n        <div id="monsterHP" class="progress-bar bg-danger progress-bar-striped active" style="width:100%;"></div>\n    </div>\n    </div>\n  </div>\n \n  </nav>\n')}},{key:"updateNames",value:function(t,n){o()(".player-name").text(t),o()(".monster-name").text(n)}},{key:"updateHp",value:function(t,n){o()("#playerHP").width("".concat(t,"%")),o()("#monsterHP").width("".concat(n,"%"))}}],(e=null)&&E(n.prototype,e),r&&E(n,r),t}();function K(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var N=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.operators=["+","-","*","/"],this.randomOperator=p(this.operators),this.firstNumber=0,this.secondNumber=0,this.answer=0}var n,e,r;return n=t,(e=[{key:"generateNumbers",value:function(){switch(this.randomOperator){case"+":this.firstNumber=Math.floor(200*Math.random()+1),this.secondNumber=Math.floor(200*Math.random()+1),this.answer=this.firstNumber+this.secondNumber;break;case"-":this.firstNumber=Math.floor(100*Math.random()+1),this.secondNumber=Math.floor(100*Math.random()+1),this.answer=this.firstNumber-this.secondNumber;break;case"*":this.firstNumber=Math.floor(10*Math.random()+1),this.secondNumber=Math.floor(10*Math.random()+1),this.answer=this.firstNumber*this.secondNumber;break;case"/":this.secondNumber=Math.floor(10*Math.random()+1),this.firstNumber=this.secondNumber*Math.floor(10*Math.random()+1),this.answer=this.firstNumber/this.secondNumber}return[this.firstNumber,this.secondNumber]}},{key:"showTask",value:function(){var t=this;return this.generateNumbers(),document.querySelector("#castModal .modal-content").innerHTML='\n<div class="modal-header">\n  <h5 class="modal-title" id="castModalLabel">Mathematics</h5>\n</div>\n<div class="modal-body">\n  <section id="cast" >\n    <div class="task-example"> </div>\n    <form>\n    <div class="input-group mb-3">\n      <input type="text" class="form-control keyboard-support" id="solveInput" aria-label="Recipient\'s username" aria-describedby="basic-addon2">\n      <div class="input-group-append">\n        <button class="btn btn-outline-secondary keyboard-support" type="submit" id="solveBtn">Solve</button>\n      </div>\n    </div>\n    </form>\n  </section>\n</div>\n',o()(".task-example").text("".concat(this.firstNumber," ").concat(this.randomOperator," ").concat(this.secondNumber)),o()("#castModal").modal("toggle"),new Promise(function(n){o()("#solveBtn").on("click",function(e){e.preventDefault();var r=o()("#solveInput").val();o()("#castModal").modal("toggle"),n(t.verifyResult(r))})})}},{key:"verifyResult",value:function(t){return+t===this.answer}}])&&K(n.prototype,e),r&&K(n,r),t}(),D=e(2);function O(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var P=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.dictionary=D,this.randomWord=p(Object.keys(D[0])),this.answer=this.dictionary[0][this.randomWord]}var n,e,r;return n=t,(e=[{key:"showTask",value:function(){var t=this;return document.querySelector("#castModal .modal-content").innerHTML='\n<div class="modal-header">\n  <h5 class="modal-title" id="castModalLabel">English To Russian</h5>\n</div>\n<div class="modal-body">\n  <section id="cast" >\n    <div class="task-example"> </div>\n    <form>\n    <div class="input-group mb-3">\n      <input type="text" class="form-control keyboard-support" id="solveInput" aria-label="Recipient\'s username" aria-describedby="basic-addon2">\n      <div class="input-group-append">\n        <button class="btn btn-outline-secondary keyboard-support" type="submit" id="solveBtn">Solve</button>\n      </div>\n    </div>\n    </form>\n  </section>\n</div>\n',o()(".task-example").text("".concat(this.randomWord)),o()("#castModal").modal("toggle"),new Promise(function(n){o()("#solveBtn").on("click",function(e){e.preventDefault();var r=o()("#solveInput").val();o()("#castModal").modal("toggle"),n(t.verifyResult(r))})})}},{key:"verifyResult",value:function(t){var n=t.toLowerCase().trim();return this.answer.some(function(t){return t===n})}}])&&O(n.prototype,e),r&&O(n,r),t}();function I(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var L=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.dictionary=D,this.answer=p(Object.keys(D[0])),this.synthesis=window.speechSynthesis}var n,e,r;return n=t,(e=[{key:"showTask",value:function(){var t=this;return document.querySelector("#castModal .modal-content").innerHTML='\n<div class="modal-header">\n  <h5 class="modal-title" id="castModalLabel">English Audition. Type what you hear</h5>\n</div>\n<div class="modal-body">\n  <section id="cast" >\n    <div class="task-example"> </div>\n    <form>\n    <div class="input-group mb-3">\n      <button class="btn btn-outline-info keyboard-support" type="button" id="audtion-button"><i class="fa fa-volume-up"></i></button>\n      <input type="text" class="form-control keyboard-support" id="solveInput" aria-label="Recipient\'s username" aria-describedby="basic-addon2">\n      <div class="input-group-append">\n        <button class="btn btn-outline-secondary keyboard-support" type="submit" id="solveBtn">Solve</button>\n      </div>\n    </div>\n    </form>\n  </section>\n</div>\n',o()("#audtion-button").on("click",function(n){n.preventDefault(),t.pronunceWord()}),o()("#castModal").modal("toggle"),new Promise(function(n){o()("#solveBtn").on("click",function(e){e.preventDefault();var r=o()("#solveInput").val();o()("#castModal").modal("toggle"),n(t.verifyResult(r))})})}},{key:"pronunceWord",value:function(){var t=new SpeechSynthesisUtterance(this.answer),n=this.synthesis.getVoices();t.voice=n[5],this.synthesis.speak(t)}},{key:"verifyResult",value:function(t){return t.toLowerCase().trim()===this.answer}}])&&I(n.prototype,e),r&&I(n,r),t}();function F(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var M=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.dictionary=D,this.randomWord=p(Object.keys(D[0])),this.answer=this.dictionary[0][this.randomWord],this.synthesis=window.speechSynthesis}var n,e,r;return n=t,(e=[{key:"showTask",value:function(){var t=this;return document.querySelector("#castModal .modal-content").innerHTML='\n<div class="modal-header">\n  <h5 class="modal-title" id="castModalLabel">Translate from English</h5>\n</div>\n<div class="modal-body">\n  <section id="cast" >\n    <div class="task-example"> </div>\n    <form>\n    <div class="input-group mb-3">\n      <button class="btn btn-outline-info keyboard-support" type="button" id="audtion-button"><i class="fa fa-volume-up"></i></button>\n      <input type="text" class="form-control keyboard-support" id="solveInput" aria-label="Recipient\'s username" aria-describedby="basic-addon2">\n      <div class="input-group-append">\n        <button class="btn btn-outline-secondary keyboard-support" type="submit" id="solveBtn">Solve</button>\n      </div>\n    </div>\n    </form>\n  </section>\n</div>\n',o()("#audtion-button").on("click",function(n){n.preventDefault(),t.pronunceWord()}),o()("#castModal").modal("toggle"),new Promise(function(n){o()("#solveBtn").on("click",function(e){e.preventDefault();var r=o()("#solveInput").val();o()("#castModal").modal("toggle"),n(t.verifyResult(r))})})}},{key:"pronunceWord",value:function(){var t=new SpeechSynthesisUtterance(this.randomWord),n=this.synthesis.getVoices();t.voice=n[5],this.synthesis.speak(t)}},{key:"verifyResult",value:function(t){var n=t.toLowerCase().trim();return this.answer.some(function(t){return t===n})}}])&&F(n.prototype,e),r&&F(n,r),t}();function R(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var j=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.dictionary=D,this.answer=p(Object.keys(D[0]))}var n,e,r;return n=t,(e=[{key:"showTask",value:function(){var t=this;return document.querySelector("#castModal .modal-content").innerHTML='\n<div class="modal-header">\n  <h5 class="modal-title" id="castModalLabel">Pronounce that word</h5>\n</div>\n<div class="modal-body">\n  <section id="cast" >\n    <div class="task-example"> </div>\n    <form>\n    <div class="input-group mb-3">\n      <button class="btn btn-outline-info keyboard-support" type="button" id="mic-button"><i class="fa fa-microphone"></i></button>\n      <input type="text" class="form-control" id="solveInput" aria-label="Recipient\'s username" aria-describedby="basic-addon2" disabled>\n      <div class="input-group-append">\n        <button class="btn btn-outline-secondary keyboard-support" type="submit" id="solveBtn">Solve</button>\n      </div>\n    </div>\n    </form>\n  </section>\n</div>\n',o()("#mic-button").on("click",function(n){n.preventDefault(),t.speechRecognition()}),o()(".task-example").text(this.answer),o()("#castModal").modal("toggle"),new Promise(function(n){o()("#solveBtn").on("click",function(e){e.preventDefault();var r=o()("#solveInput").val();o()("#castModal").modal("toggle"),n(t.verifyResult(r))})})}},{key:"speechRecognition",value:function(){var t="#JSGF V1.0; grammar words; public <color> = ".concat(this.answer,";"),n=new(window.SpeechRecognition||window.webkitSpeechRecognition||window.mozSpeechRecognition||window.msSpeechRecognition),e=new(window.SpeechGrammarList||window.webkitSpeechGrammarList||window.mozSpeechGrammarList||window.msSpeechGrammarList);e.addFromString(t,1),n.grammars=e,n.lang="en-US",n.interimResults=!1,n.maxAlternatives=1,n.start();var r=o()("#mic-button");r.removeClass("btn-outline-info"),r.addClass("btn-info"),n.onresult=function(t){var n=t.results[0][0].transcript,e=o()("#solveInput");e.val(n),e.attr("placeholder",n),r.focus()},n.onspeechend=function(){r.removeClass("btn-info"),r.addClass("btn-outline-info"),n.stop()},n.onerror=function(t){o()("#solveInput").text(t.error)}}},{key:"verifyResult",value:function(t){return t.toLowerCase().trim()===this.answer}}])&&R(n.prototype,e),r&&R(n,r),t}();function G(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var H=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.operators=["+","-","*","/"],this.randomOperator=p(this.operators),this.step=m(10)+1,this.firstNumber=0,this.secondNumber=0,this.thirdNumber=0,this.answer=0}var n,e,r;return n=t,(e=[{key:"generateNumbers",value:function(){return this.answer=m(100)+1,this.firstNumber=this.answer-3*this.step,this.secondNumber=this.answer-2*this.step,this.thirdNumber=this.answer-1*this.step,[this.firstNumber,this.secondNumber,this.thirdNumber]}},{key:"showTask",value:function(){var t=this;return this.generateNumbers(),document.querySelector("#castModal .modal-content").innerHTML='\n<div class="modal-header">\n  <h5 class="modal-title" id="castModalLabel">Continue the sequence of numbers</h5>\n</div>\n<div class="modal-body">\n  <section id="cast" >\n    <div class="task-example"> </div>\n    <form>\n    <div class="input-group mb-3">\n      <input type="text" class="form-control keyboard-support" id="solveInput" aria-label="Recipient\'s username" aria-describedby="basic-addon2">\n      <div class="input-group-append">\n        <button class="btn btn-outline-secondary keyboard-support" type="submit" id="solveBtn">Solve</button>\n      </div>\n    </div>\n    </form>\n  </section>\n</div>\n',o()(".task-example").text("".concat(this.firstNumber," ").concat(this.secondNumber," ").concat(this.thirdNumber," . . .")),o()("#castModal").modal("toggle"),new Promise(function(n){o()("#solveBtn").on("click",function(e){e.preventDefault();var r=o()("#solveInput").val();o()("#castModal").modal("toggle"),n(t.verifyResult(r))})})}},{key:"verifyResult",value:function(t){return+t===this.answer}}])&&G(n.prototype,e),r&&G(n,r),t}();function U(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var V={arrowleft:37,arrowright:39,arrowup:38,arrowdown:40,space:32,enter:13},B=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.currentCast=null,t.defineKeyboardSupport()}var n,e,r;return n=t,r=[{key:"defineKeyboardSupport",value:function(){document.body.addEventListener("keydown",t.keyboardSupport)}},{key:"keyboardSupport",value:function(t){var n=t.which,e=0;if(n===V.arrowleft||n===V.arrowup)e=-1;else{if(n!==V.arrowright&&n!==V.arrowdown)return;e=1}t.preventDefault();var r=document.querySelectorAll(".keyboard-support"),o=r.length,i=document.activeElement;if(o>0)if(i.classList.contains("keyboard-support")){var a=Array.from(r).indexOf(i);-1!==a&&(a+=e),a<0&&(a=o-1),a>=o&&(a=0),r[a].focus()}else r[0].focus(),r[0]!==document.activeElement&&r[o-1].focus()}},{key:"draw",value:function(){document.querySelector("#castModal .modal-body").innerHTML='\n<section id="cast" >\n<div class="row">\n  <div class="col">\n    <button class="btn btn-info btn-block keyboard-support" type="button" data-toggle="collapse" data-target="#multiCollapseExample1" aria-expanded="false" aria-controls="multiCollapseExample1">HEAL</button>\n  </div>\n  <div class="col">\n    <button class="btn btn-warning btn-block keyboard-support" type="button" data-toggle="collapse" data-target="#multiCollapseExample2" aria-expanded="false" aria-controls="multiCollapseExample2">ATTACK</button>\n  </div>\n</div>\n  <div class="row">\n    <div class="col">\n    <div class="collapse multi-collapse" id="multiCollapseExample1">\n \n        <a href="#" data-id="engtoru" class="btn btn-outline-info btn-block keyboard-support">Translate</a>\n        <a href="#" data-id="pronunciation" class="btn btn-outline-info btn-block keyboard-support">Pronunciation</a>\n        <a href="#" data-id="sequence" class="btn btn-outline-info btn-block keyboard-support">Sequence</a>\n   \n    </div>\n  </div>\n  <div class="col">\n    <div class="collapse multi-collapse" id="multiCollapseExample2">\n\n        <a href="#" data-id="math" class="btn btn-outline-warning btn-block keyboard-support">Math</a>\n        <a href="#" data-id="engtoruaudio" class="btn btn-outline-warning btn-block keyboard-support">Audio Translate</a>\n        <a href="#" data-id="audition" class="btn btn-outline-warning btn-block keyboard-support">Audition</a>\n     \n    </div>\n  </div>\n</div>\n\n</section>\n',o()("#castModal").modal({})}},{key:"empty",value:function(){o()("#cast").empty()}}],(e=[{key:"showTask",value:function(t){switch(t!==this.currentCast&&(this.currentCast=t),this.currentCast){case"math":return(new N).showTask();case"engtoru":return(new P).showTask();case"audition":return(new L).showTask();case"engtoruaudio":return(new M).showTask();case"pronunciation":return(new j).showTask();case"sequence":return(new H).showTask()}return t}},{key:"getPlayerCast",value:function(){var n=this;return t.draw(),this.addEventsListener(),new Promise(function(t){o()("#castModal").on("hidden.bs.modal",function(){t(n.currentCast)})})}},{key:"addEventsListener",value:function(){var t=this;o()("#cast").on("click",function(n){var e=n.target;e&&"A"===e.tagName&&(n.preventDefault(),t.currentCast=e.dataset.id,o()("#castModal").modal("toggle"))})}}])&&U(n.prototype,e),r&&U(n,r),t}();e(19);function W(t,n,e,r,o,i,a){try{var s=t[i](a),l=s.value}catch(t){return void e(t)}s.done?n(l):Promise.resolve(l).then(r,o)}function z(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var q="https://desolate-gorge-11975.herokuapp.com/api/Scores",Y={},X=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}var n,e,r;return n=t,e=null,r=[{key:"sendData",value:function(t,n){o.a.post(t,n)}},{key:"getData",value:function(n){return fetch(n).then(function(t){return t.json()}).then(function(n){return t.setResult(n)})}},{key:"setResult",value:function(t){return Y=t}},{key:"showScoreboard",value:function(){var n,e=(n=regeneratorRuntime.mark(function n(e,r){var o;return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return o={name:e,defeatedmonsters:r.length},n.next=3,t.sendData(q,o);case 3:return n.next=5,t.getData(q);case 5:t.drawScoreboard();case 6:case"end":return n.stop()}},n,this)}),function(){var t=this,e=arguments;return new Promise(function(r,o){var i=n.apply(t,e);function a(t){W(i,r,o,a,s,"next",t)}function s(t){W(i,r,o,a,s,"throw",t)}a(void 0)})});return function(t,n){return e.apply(this,arguments)}}()},{key:"drawScoreboard",value:function(){document.querySelector("#scoreModal .modal-content").innerHTML='\n<div class="card text-center">\n  <div class="table-responsive">\n    <h4 class="card-title">SCOREBOARD</h4>\n    <table class="scoreboard table table-hover">\n      <thead class="scoreboard-thead">\n        <tr>\n          <th scope="col">Name</th>\n          <th scope="col">Defeated Monsters</th>\n        </tr>\n      </thead>\n      <tbody class="scoreboard-tbody">\n\n      </tbody>\n    </table>\n  </div>\n</div>\n<div class="modal-footer">\n    <button id="restart" class="btn btn-outline-danger col keyboard-support">Restart</button>\n</div>\n';var t=document.querySelector(".scoreboard-tbody"),n=document.createDocumentFragment();Y.forEach(function(t){var e=document.createElement("tr"),r=document.createElement("td"),o=document.createElement("td");r.appendChild(document.createTextNode(t.name)),o.appendChild(document.createTextNode("".concat(t.defeatedmonsters))),e.appendChild(r),e.appendChild(o),n.appendChild(e)}),t.appendChild(n),o()("#scoreModal").modal()}}],e&&z(n.prototype,e),r&&z(n,r),t}();function Q(t,n,e,r,o,i,a){try{var s=t[i](a),l=s.value}catch(t){return void e(t)}s.done?n(l):Promise.resolve(l).then(r,o)}function $(t){return function(){var n=this,e=arguments;return new Promise(function(r,o){var i=t.apply(n,e);function a(t){Q(i,r,o,a,s,"next",t)}function s(t){Q(i,r,o,a,s,"throw",t)}a(void 0)})}}function J(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var Z=function(){function t(n,e){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.player=new x(n,e),this.monster=new b,this.cast=new B,this.playground={},this.defeatedMonsters=[],this.typesOfCast={heal:["engtoru","pronunciation","sequence"],damage:["math","audition","engtoruaudio"]}}var n,e,r;return n=t,e=[{key:"draw",value:function(){o()("main").remove(),o()("nav").remove(),A.draw(),A.updateNames(this.player.name,this.monster.name),document.querySelector(".playground-container").innerHTML='\n  <div id="playground"></div>\n',this.playground=new T,this.playground.drawPlayer(this.player.playerClass),this.playground.drawMonster(),this.player.generateSounds(),this.monster.generateSounds()}},{key:"start",value:function(){var t=$(regeneratorRuntime.mark(function t(){var n=this;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,f(1e3);case 2:return this.startCast(),t.abrupt("return",new Promise(function(t){o()("#scoreModal").on("shown.bs.modal",function(){t(n.currentState)})}));case 4:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"startCast",value:function(){var t=$(regeneratorRuntime.mark(function t(){var n,e,r;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return o()(".modal-header").append(o()("h5").text("Choose your spell")),t.next=3,this.cast.getPlayerCast();case 3:return n=t.sent,t.next=6,this.cast.showTask(n);case 6:return e=t.sent,t.next=9,this.defineTypeOfAttack(n);case 9:r=t.sent,this.fight(e,r);case 11:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"fight",value:function(){var t=$(regeneratorRuntime.mark(function t(n,e){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(!n||"damage"!==e){t.next=22;break}return this.player.dealDamage(this.monster),this.playground.playerRunForward.start(),this.playground.setPlayerAnimation("run"),this.player.sounds.run.play(),t.next=7,f(1e3);case 7:return this.playground.playerRunForward.stop(),this.player.sounds.hit.play(),this.playground.setPlayerAnimation("shot"),this.monster.sounds.hurt["hurt".concat(m(3))].play(),t.next=13,f(600);case 13:return this.playground.playerRunBack.start(),this.player.sounds.run.play(),this.playground.setPlayerAnimation("walk"),t.next=18,f(1e3);case 18:this.playground.playerRunBack.stop(),this.playground.setPlayerAnimation("stand"),t.next=47;break;case 22:if(n){t.next=37;break}return this.monster.dealDamage(this.player),this.playground.monsterStandAnim.stop(),this.playground.monsterShotAnim.start(),this.playground.setPlayerAnimation("hit"),this.player.sounds.hurt["hurt".concat(m(4))].play(),t.next=30,f(1500);case 30:return this.playground.monsterShotAnim.stop(),this.playground.monsterStandAnim.start(),this.playground.setPlayerAnimation("stand"),t.next=35,f(500);case 35:t.next=47;break;case 37:if(!n||"heal"!==e){t.next=47;break}return this.player.heal(),this.player.sounds.heal.play(),this.playground.healAnimation(),this.playground.setPlayerAnimation("hit"),t.next=44,f(600);case 44:return this.playground.setPlayerAnimation("stand"),t.next=47,f(500);case 47:A.updateHp(this.player.hp,this.monster.hp),this.checkVictory();case 49:case"end":return t.stop()}},t,this)}));return function(n,e){return t.apply(this,arguments)}}()},{key:"checkVictory",value:function(){var t=$(regeneratorRuntime.mark(function t(){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(!(this.player.hp<=0)){t.next=8;break}return this.playground.setPlayerAnimation("die"),t.next=4,f(600);case 4:this.playground.player.stop(),X.showScoreboard(this.player.name,this.defeatedMonsters),t.next=27;break;case 8:if(!(this.monster.hp<=0)){t.next=26;break}return this.playground.setPlayerAnimation("jump"),t.next=12,f(600);case 12:return this.playground.setPlayerAnimation("stand"),t.next=15,f(500);case 15:return this.defeatedMonsters.push(this.monster.name),this.monster=new b,this.monster.generateSounds(),this.playground.drawMonster(),A.updateHp(this.player.hp,this.monster.hp),A.updateNames(this.player.name,this.monster.name),t.next=23,f(2e3);case 23:this.startCast(),t.next=27;break;case 26:this.startCast();case 27:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"defineTypeOfAttack",value:function(){var t=$(regeneratorRuntime.mark(function t(n){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(!this.typesOfCast.damage.some(function(t){return t===n})){t.next=3;break}return t.abrupt("return","damage");case 3:return t.abrupt("return","heal");case 4:case"end":return t.stop()}},t,this)}));return function(n){return t.apply(this,arguments)}}()}],r=[{key:"empty",value:function(){o()("main").empty()}}],e&&J(n.prototype,e),r&&J(n,r),t}();function tt(t,n,e,r,o,i,a){try{var s=t[i](a),l=s.value}catch(t){return void e(t)}s.done?n(l):Promise.resolve(l).then(r,o)}function nt(t){return function(){var n=this,e=arguments;return new Promise(function(r,o){var i=t.apply(n,e);function a(t){tt(i,r,o,a,s,"next",t)}function s(t){tt(i,r,o,a,s,"throw",t)}a(void 0)})}}var et=function(){var t=nt(regeneratorRuntime.mark(function t(n){var e;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(n.playerName){t.next=5;break}return t.next=3,u.getNewPlayerName();case 3:e=t.sent,n.setPlayerName(e);case 5:case"end":return t.stop()}},t,this)}));return function(n){return t.apply(this,arguments)}}(),rt=function(){var t=nt(regeneratorRuntime.mark(function t(n){var e;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,et(n);case 2:return(e=new Z(n.playerName,n.playerClass)).draw(),t.next=6,f(1e3);case 6:return window.battle=e,t.next=9,e.start();case 9:o()("#restart").on("click",nt(regeneratorRuntime.mark(function t(){var e;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return(e=new a).setPlayerName(n.playerName),o()("#scoreModal").modal("hide"),t.next=5,rt(e);case 5:case"end":return t.stop()}},t,this)})));case 10:case"end":return t.stop()}},t,this)}));return function(n){return t.apply(this,arguments)}}();!function(){window.$=o.a;var t=new a;t,l.draw(),o()(".js-start-game").on("click",nt(regeneratorRuntime.mark(function n(){return regeneratorRuntime.wrap(function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,rt(t);case 2:case"end":return n.stop()}},n,this)})))}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,